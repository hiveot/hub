// Package transports with the 3 flow messages: requests, response and  notifications
package messaging

import (
	"github.com/hiveot/hub/messaging/tputils"
	"github.com/hiveot/hub/wot"
	"github.com/teris-io/shortid"
	"time"
)

// ResponseMessage, ActionStatus and ThingValue define the standardized messaging
// envelopes for handling responses.
// Each transport protocol bindings map this format to this specific format.

// MessageTypeNotification identify the message as a notification.
const MessageTypeNotification = "notification"

// NotificationMessage for sending asynchronous notifications to a subscriber/observer
//
// The Data field contains the message response data as defined by the operation
// Possible operations in notifications:
//   - invokeaction             action status as per TD
//   - observeproperty          property value as per TD, when status==running
//   - observeallproperties     map[name]value  (multiple updates)
//   - subscribeevent           event value as per TD, when status==running
type NotificationMessage struct {

	// CorrelationID of the request this is a response to, if any.
	CorrelationID string `json:"correlationID,omitempty"`

	// Data containing the notification data as described in the TD event or property dataschema.
	// If the operation is one of the Thing level operations, the output is specified
	// by the operation's dataschema. WoT doesn't have this yet so hiveot will
	// define the missing bits if any. (see documentation)
	Data any `json:"data"` // native

	// Error contains the short error description when status is failed.
	Error string `json:"error"`

	// MessageID unique ID of the message. Intended to detect duplicates.
	// Generated by the protocol binding.
	MessageID string `json:"messageID,omitempty"`

	// MessageType identifies this message payload as a response
	// This is set to the value of MessageTypeNotification
	MessageType string `json:"type"`

	// Name of the action or property affordance this is a response from.
	// This field is optional and intended to help debugging and logging.
	Name string `json:"name,omitempty"`

	// The operation this is a notification of. Eg subscribeevent or observeproperty.
	Operation string `json:"operation"`

	// Authenticated ID of the agent sending the notification, set by the server.
	// The protocol server MUST set this to the authenticated sender.
	SenderID string `json:"senderID"`

	// The optional notification status in case of action progress
	// this is replaced by ActionStatus payload.
	//Status string `json:"status,omitempty"`

	// ThingID of the thing this is a response from.
	// For responses passed to consumers this is the digitwin dThingID
	// For responses sent by agents this is the agent ThingID
	// This field is optional and intended to help debugging and logging.
	ThingID string `json:"thingID,omitempty"`

	// Timestamp the notification was created
	Timestamp string `json:"timestamp,omitempty"`
}

// ToString is a helper to easily read the notification data as a string
func (notif *NotificationMessage) ToString(maxlen int) string {
	return tputils.DecodeAsString(notif.Data, maxlen)
}

// NewNotificationMessage creates a new NotificationMessage instance.
//
//	operation is the notification operation WoTOpSubscribeEvent or WoTOpObserveProperty
//	thingID is the thing the value applies to (destination of action or source of event)
//	name is the name of the property, event or action affordance as described in the thing TD
//	data is the data as defined in the corresponding affordance dataschema or nil if not applicable
func NewNotificationMessage(operation string, thingID, name string, data any) *NotificationMessage {
	notif := &NotificationMessage{
		MessageType: MessageTypeNotification,
		Operation:   operation,
		ThingID:     thingID,
		Name:        name,
		Data:        data,
		Timestamp:   time.Now().Format(wot.RFC3339Milli),
		MessageID:   shortid.MustGenerate(),
	}
	return notif
}
