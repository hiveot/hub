// Package transports with the 3 flow messages: requests, response and  notifications
package messaging

import (
	"github.com/hiveot/hub/messaging/tputils"
	"github.com/hiveot/hub/wot"
	"github.com/teris-io/shortid"
	"time"
)

// RequestMessage defines the standardized message envelope for sending requests.
// Each transport protocol bindings map this format to this specific format.

// MessageTypeRequest constant that identify a payload as a request
const MessageTypeRequest = "request"

// RequestMessage for sending a request for an operation on a Thing or service.
// Agents/Things  MUST send a response when a request is received and a correlationID
// is included.
//
// The following operations are considered to be requests:
//
//   - invokeaction  [WoT]
//   - subscribe, unsubscribe [WoT]    (handled by protocol bindings)
//   - observe, unobserve [WoT]        (handled by protocol bindings)
//   - readproperty, readallproperties [WoT]
//   - queryaction, queryallactions [WoT]
//   - readevent, readallevents  (of a Thing)  [HiveOT extension]
//   - readtd, readalltds  (of a directory or thing) [HiveOT extension]
type RequestMessage struct {

	// CorrelationID of the message. Uniquely identifies the request and must be included
	// in the response.
	// Notifications can include this to correlate with the subscription.
	// Message streams can include this to correlate with the original request.
	// This is optional. If omitted, no response will be received.
	CorrelationID string `json:"correlationID,omitempty"`

	// Created holds the timestamp the request was created using RFC3339milli
	// This MUST be set by the protocol server if not provided.
	Created string `json:"created"`

	// Input for the request as described in the TD affordance dataschema.
	// If the operation is one of the Thing level operations, the input is specified
	// by the operation's dataschema. WoT doesn't have this yet so hiveot will
	// define the missing bits if any.
	Input any `json:"input,omitempty"` // native

	// MessageID unique ID of the message. Intended to detect duplicates.
	// Generated by the protocol binding.
	MessageID string `json:"messageID"`

	// MessageType identifies this message payload as a request
	// This is set to "request"
	MessageType string `json:"type"`

	// Name of the event, action or property affordance the request is for.
	// This field is optional and only required for specific operations.
	Name string `json:"name,omitempty"`

	// The operation for this message as defined in TD-1.1 or the hiveot extensions (HTOp...)
	// This identifies the request and is a required field
	Operation string `json:"operation"`

	// SenderID is the account ID of the client sending the request.
	// The protocol server MUST set this to the authenticated client.
	// Intended for services that link requests to the client, such as the state storage service.
	SenderID string `json:"senderID,omitempty"`

	// ThingID of the thing this request is for.
	// For messages from consumers this is the digitwin dThingID
	// For messages to agents this is the agent ThingID
	// This field is required.
	ThingID string `json:"thingID"`
}

// CreateResponse is a helper to easily create a response from a request with the
// status set to 'completed' or failed if err is not nil.
// If err is set then the status is set to failed.
func (req *RequestMessage) CreateResponse(output any, err error) (resp *ResponseMessage) {
	resp = NewResponseMessage(
		req.Operation, req.ThingID, req.Name, output, err, req.CorrelationID)
	return resp
}

// CreateRunningNotification is a helper to easily create a 'running' status update while a request is running.
func (req *RequestMessage) CreateRunningNotification() (notif *NotificationMessage) {
	notif = NewNotificationMessage(
		req.Operation, req.ThingID, req.Name, nil)
	notif.CorrelationID = req.CorrelationID
	return notif
}

// ToString is a helper to easily convert the request input to a string
// maxlen is the maximum string length or 0 for unlimited
func (req *RequestMessage) ToString(maxlen int) string {
	return tputils.DecodeAsString(req.Input, maxlen)
}

// ToObject is a helper to easily convert the request input to an object
func (req *RequestMessage) ToObject(input any) error {
	return tputils.DecodeAsObject(req.Input, &input)
}

// NewRequestMessage creates a new RequestMessage instance.
//
//	operation is the request operation WoTOp... or HTOp...
//	thingID is the thing the value applies to (destination of action or source of event)
//	name is the name of the property, event or action affordance as described in the thing TD
//	input is the request input as defined in the corresponding affordance dataschema.
//	correlationID unique ID of the request or empty when no response is expected
func NewRequestMessage(operation string, thingID, name string, input any, correlationID string) *RequestMessage {
	return &RequestMessage{
		MessageType:   MessageTypeRequest,
		Operation:     operation,
		ThingID:       thingID,
		Name:          name,
		Input:         input,
		CorrelationID: correlationID,
		Created:       time.Now().Format(wot.RFC3339Milli),
		MessageID:     shortid.MustGenerate(),
	}
}
