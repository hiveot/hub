// Package transports with the 3 flow messages: requests, response and  notifications
package messaging

import (
	"github.com/hiveot/hub/lib/utils"
	"github.com/hiveot/hub/messaging/tputils"
	"github.com/teris-io/shortid"
	"time"
)

// ResponseMessage, ActionStatus and ThingValue define the standardized messaging
// envelopes for handling responses.
// Each transport protocol bindings map this format to this specific format.

const AffordanceTypeEvent = "event"
const AffordanceTypeProperty = "property"
const AffordanceTypeAction = "action"

// MessageTypeResponse identify the message as a response.
const MessageTypeResponse = "response"

// Request status provided with the response.
// this aligns with action status values from WoT spec
const (
	// StatusPending - the request has not yet been delivered
	StatusPending = "pending"
	// StatusRunning - the request is being processed
	StatusRunning = "running"
	// StatusCompleted - the request processing was completed
	StatusCompleted = "completed"
	// StatusFailed - the request processing or delivery failed
	StatusFailed = "failed"
)

// ActionStatus is used in the response message payload for invokeaction and queryaction
// responses.
// Note: keep this in sync with the digital twin ActionStatus in the TD.
type ActionStatus struct {

	// ID that uniquely identifies the action
	// This can be an identifier or a URL.
	//
	// The action request identifier
	ActionID string `json:"actionID,omitempty"`

	// AgentID with Agent ID
	//
	// The agent handling the action
	AgentID string `json:"agentID,omitempty"`

	// Error with Error
	//
	// Action error info when failed
	Error string `json:"error,omitempty"`

	// Input with Action input
	//
	// Action input value
	Input any `json:"input,omitempty"`

	// Name with Action name
	//
	// name of the action or property
	Name string `json:"name,omitempty"`

	// Output with Action output
	Output any `json:"output,omitempty"`

	// SenderID of the client requesting the action
	SenderID string `json:"senderID,omitempty"`

	// Status with Action status
	//
	// Status of the action's progress: pending, running, completed, failed
	Status string `json:"status,omitempty"`

	// ThingID with Action Thing
	//
	// Digital twin ThingID the action applies to
	ThingID string `json:"thingID,omitempty"`

	// Requested time the action request was received
	//
	// Time the action was initially requested
	Requested string `json:"requested,omitempty"`

	// Updated time the action status was last updated
	//
	// Time the action status was last updated
	Updated string `json:"updated,omitempty"`
}

// ThingValue is the response payload to subscribeevent, observeproperty,
// readevent and readproperty operations.
type ThingValue struct {
	// ID is the unique identification of the value
	ID string `json:"id,omitempty"`

	// Name with affordance name
	//
	// Name of the affordance holding the value
	Name string `json:"name,omitempty"`

	// Output with Payload
	//
	// Data in format as described by the thing's property affordance
	Output any `json:"output,omitempty"`

	// ThingID with Thing ID
	//
	// Digital twin Thing ID
	ThingID string `json:"thingID,omitempty"`

	// Updated with Updated time
	//
	// Time the value was last updated
	Updated string `json:"updated,omitempty"`

	// Type of value: AffordanceTypeProperty|Event|Action
	AffordanceType string `json:"affordanceType"`
}

// ToString is a helper to easily read the response output as a string
func (tv *ThingValue) ToString(maxlen int) string {
	return tputils.DecodeAsString(tv.Output, maxlen)
}

// ResponseMessage serves to notify a client of the result of a request.
//
// The Output field contains the message response data as defined by the operation
// Action related response output:
//   - invokeaction             action output as per TD, when status==completed
//   - queryaction              []ActionStatus object array
//   - queryallactions          map [name][]ActionStatus objects
//
// Property related response output:
//   - readproperty             ThingValue object
//   - readallproperties        map[name]ThingValue objects
//
// Event related response output
//   - readevent                ThingValue object
//   - readallevents            map[name]ThingValue objects
type ResponseMessage struct {

	// CorrelationID of the request this is a response to, if any.
	CorrelationID string `json:"correlationID,omitempty"`

	// Error contains the short error description when status is failed.
	Error string `json:"error"`

	// MessageID unique ID of the message. Intended to detect duplicates.
	// Generated by the protocol binding.
	MessageID string `json:"messageID,omitempty"`

	// MessageType identifies this message payload as a response
	// This is set to the value of MessageTypeResponse
	MessageType string `json:"type"`

	// Name of the action or property affordance this is a response from.
	// This field is optional and intended to help debugging and logging.
	Name string `json:"name,omitempty"`

	// The operation this is a response to. This MUST be the operation provided in the request.
	Operation string `json:"operation"`

	// Output for the request as described in the TD affordance dataschema.
	// If the operation is one of the Thing level operations, the output is specified
	// by the operation's dataschema. WoT doesn't have this yet so hiveot will
	// define the missing bits if any. (see documentation)
	//
	// If status is failed then output optionally contains a detailed error description.
	Output any `json:"output"` // value?

	// Timestamp the request was received by the thing agent
	//Received string `json:"received"`

	// Authenticated ID of the agent sending the response, set by the server
	// The protocol server MUST set this to the authenticated sender.
	SenderID string `json:"senderID"`

	// ThingID of the thing this is a response from.
	// For responses passed to consumers this is the digitwin dThingID
	// For responses sent by agents this is the agent ThingID
	// This field is optional and intended to help debugging and logging.
	ThingID string `json:"thingID,omitempty"`

	// Timestamp the response was created
	Timestamp string `json:"timestamp"`
}

// ToString is a helper to easily read the response output as a string
func (resp *ResponseMessage) ToString(maxlen int) string {
	return tputils.DecodeAsString(resp.Output, maxlen)
}

// NewResponseMessage creates a new ResponseMessage instance.
//
// This sets status to completed if err is nil or Failed if err is provided.
// If the status is not completed or failed then set it to the appropriate value after creation.
//
//	operation is the request operation WoTOp... or HTOp...
//	thingID is the thing the value applies to (destination of action or source of event)
//	name is the name of the property, event or action affordance as described in the thing TD
//	output is the output data as defined in the corresponding affordance dataschema or nil if not applicable
//	err is the optional error response which will set status to failed
//	correlationID  ID provided by the request
func NewResponseMessage(operation string, thingID, name string, output any, err error, correlationID string) *ResponseMessage {
	resp := &ResponseMessage{
		MessageType:   MessageTypeResponse,
		Operation:     operation,
		ThingID:       thingID,
		Name:          name,
		Output:        output,
		CorrelationID: correlationID,
		Timestamp:     utils.FormatUTCMilli(time.Now()),
		MessageID:     shortid.MustGenerate(),
	}
	if err != nil {
		resp.Error = err.Error()
	}
	return resp
}
