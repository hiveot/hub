// Package authn with types and interfaces for using this service with agent 'authn'
// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.
// Generated 09 Oct 24 10:30 PDT.
package authn

import "errors"
import "github.com/hiveot/hub/lib/utils"
import "github.com/hiveot/hub/lib/hubclient"

// AdminAgentID is the connection ID of the agent managing the Thing.
const AdminAgentID = "authn"

// AdminServiceID is the internal thingID of the device/service as used by agents.
// Agents use this to publish events and subscribe to actions
const AdminServiceID = "admin"

// AdminDThingID is the Digitwin thingID as used by agents. Digitwin adds the dtw:{agent} prefix to the serviceID
// Consumers use this to publish actions and subscribe to events
const AdminDThingID = "dtw:authn:admin"

//--- Argument and Response struct for action of Thing 'dtw:authn:admin' ---

const AdminAddAgentMethod = "addAgent"

// AdminAddAgentArgs defines the arguments of the addAgent function
// Add Agent - Create an account for IoT device agents
type AdminAddAgentArgs struct {

	// ClientID with Client ID
	ClientID string `json:"clientID,omitempty"`

	// DisplayName with Display Name
	DisplayName string `json:"displayName,omitempty"`

	// PubKey with Public Key
	PubKey string `json:"pubKey,omitempty"`
}

const AdminAddConsumerMethod = "addConsumer"

// AdminAddConsumerArgs defines the arguments of the addConsumer function
// Add Consumer - Add an end-user client
type AdminAddConsumerArgs struct {

	// ClientID with Client ID
	ClientID string `json:"clientID,omitempty"`

	// DisplayName with Display Name
	DisplayName string `json:"displayName,omitempty"`

	// Password with Password
	Password string `json:"password,omitempty"`
}

const AdminAddServiceMethod = "addService"

// AdminAddServiceArgs defines the arguments of the addService function
// Add Service - Add a service account
type AdminAddServiceArgs struct {

	// ClientID with Client ID
	ClientID string `json:"clientID,omitempty"`

	// DisplayName with Display Name
	DisplayName string `json:"displayName,omitempty"`

	// PubKey with Public Key
	PubKey string `json:"pubKey,omitempty"`
}

const AdminGetClientProfileMethod = "getClientProfile"

const AdminGetProfilesMethod = "getProfiles"

const AdminNewAuthTokenMethod = "newAuthToken"

const AdminRemoveClientMethod = "removeClient"

const AdminSetClientPasswordMethod = "setClientPassword"

// AdminSetClientPasswordArgs defines the arguments of the setClientPassword function
// Set Client Password - Update the password of a consumer
//
// Client ID and password
type AdminSetClientPasswordArgs struct {

	// ClientID with Client ID
	ClientID string `json:"clientID,omitempty"`

	// Password with Password
	Password string `json:"password,omitempty"`
}

const AdminUpdateClientProfileMethod = "updateClientProfile"

// AdminAddAgent client method - Add Agent.
// Create an account for IoT device agents
func AdminAddAgent(hc hubclient.IHubClient, clientID string, displayName string, pubKey string) (token string, err error) {
	var args = AdminAddAgentArgs{clientID, displayName, pubKey}
	err = hc.Rpc(AdminDThingID, AdminAddAgentMethod, &args, &token)
	return
}

// AdminAddConsumer client method - Add Consumer.
// Add an end-user client
func AdminAddConsumer(hc hubclient.IHubClient, clientID string, displayName string, password string) (err error) {
	var args = AdminAddConsumerArgs{clientID, displayName, password}
	err = hc.Rpc(AdminDThingID, AdminAddConsumerMethod, &args, nil)
	return
}

// AdminAddService client method - Add Service.
// Add a service account
func AdminAddService(hc hubclient.IHubClient, clientID string, displayName string, pubKey string) (token string, err error) {
	var args = AdminAddServiceArgs{clientID, displayName, pubKey}
	err = hc.Rpc(AdminDThingID, AdminAddServiceMethod, &args, &token)
	return
}

// AdminGetClientProfile client method - Get Client Profile.
// Get the profile information describing a client
func AdminGetClientProfile(hc hubclient.IHubClient, clientID string) (profile ClientProfile, err error) {

	err = hc.Rpc(AdminDThingID, AdminGetClientProfileMethod, &clientID, &profile)
	return
}

// AdminGetProfiles client method - Get Profiles.
// Get a list of all client profiles
func AdminGetProfiles(hc hubclient.IHubClient) (clientProfiles []ClientProfile, err error) {

	err = hc.Rpc(AdminDThingID, AdminGetProfilesMethod, nil, &clientProfiles)
	return
}

// AdminNewAuthToken client method - New Authentication Token.
// Obtain a new authentication token for an agent or service
func AdminNewAuthToken(hc hubclient.IHubClient, clientID string) (token string, err error) {

	err = hc.Rpc(AdminDThingID, AdminNewAuthTokenMethod, &clientID, &token)
	return
}

// AdminRemoveClient client method - Remove Client.
// Remove a client account
func AdminRemoveClient(hc hubclient.IHubClient, clientID string) (err error) {

	err = hc.Rpc(AdminDThingID, AdminRemoveClientMethod, &clientID, nil)
	return
}

// AdminSetClientPassword client method - Set Client Password.
// Update the password of a consumer
func AdminSetClientPassword(hc hubclient.IHubClient, clientID string, password string) (err error) {
	var args = AdminSetClientPasswordArgs{clientID, password}
	err = hc.Rpc(AdminDThingID, AdminSetClientPasswordMethod, &args, nil)
	return
}

// AdminUpdateClientProfile client method - Update Client Profile.
// Update the details of a client
func AdminUpdateClientProfile(hc hubclient.IHubClient, clientProfile ClientProfile) (err error) {

	err = hc.Rpc(AdminDThingID, AdminUpdateClientProfileMethod, &clientProfile, nil)
	return
}

// IAdminService defines the interface of the 'Admin' service
//
// This defines a method for each of the actions in the TD.
type IAdminService interface {

	// AddAgent Add Agent
	// Create an account for IoT device agents
	// This returns a agent authentication token
	AddAgent(senderID string, agentInfo AdminAddAgentArgs) (token string, err error)

	// AddConsumer Add Consumer
	// Add an end-user client
	AddConsumer(senderID string, consumerInfo AdminAddConsumerArgs) error

	// AddService Add Service
	// Add a service account
	// This returns a service authentication token
	AddService(senderID string, serviceInfo AdminAddServiceArgs) (token string, err error)

	// GetClientProfile Get Client Profile
	// Get the profile information describing a client
	GetClientProfile(senderID string, clientID string) (profile ClientProfile, err error)

	// GetProfiles Get Profiles
	// Get a list of all client profiles
	GetProfiles(senderID string) (clientProfiles []ClientProfile, err error)

	// NewAuthToken New Authentication Token
	// Obtain a new authentication token for an agent or service
	// This returns a new service or agent authentication token
	NewAuthToken(senderID string, clientID string) (token string, err error)

	// RemoveClient Remove Client
	// Remove a client account
	RemoveClient(senderID string, clientID string) error

	// SetClientPassword Set Client Password
	// Update the password of a consumer
	SetClientPassword(senderID string, clientInfo AdminSetClientPasswordArgs) error

	// UpdateClientProfile Update Client Profile
	// Update the details of a client
	UpdateClientProfile(senderID string, clientProfile ClientProfile) error
}

// NewHandleAdminAction returns a server handler for Thing 'dtw:authn:admin' actions.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
//
// This returns the marshalled response data or an error.
func NewHandleAdminAction(svc IAdminService) func(consumerID, dThingID, name string, input any, messageID string) (string, any, error) {
	return func(consumerID, dThingID, actionName string, input any, messageID string) (string, any, error) {
		var err error
		var status string = "completed"
		var output any
		switch actionName {
		case "newAuthToken":
			var args string
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				output, err = svc.NewAuthToken(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "removeClient":
			var args string
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				err = svc.RemoveClient(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "addAgent":
			args := AdminAddAgentArgs{}
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				output, err = svc.AddAgent(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "addConsumer":
			args := AdminAddConsumerArgs{}
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				err = svc.AddConsumer(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "addService":
			args := AdminAddServiceArgs{}
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				output, err = svc.AddService(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "getClientProfile":
			var args string
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				output, err = svc.GetClientProfile(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "getProfiles":
			if err == nil {
				output, err = svc.GetProfiles(consumerID)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "setClientPassword":
			args := AdminSetClientPasswordArgs{}
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				err = svc.SetClientPassword(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "updateClientProfile":
			var args ClientProfile
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				err = svc.UpdateClientProfile(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		default:
			err = errors.New("Unknown Method '" + actionName + "' of service '" + dThingID + "'")
			status = "failed"
		}
		return status, output, err
	}
}

// AdminTD contains the raw TD of this service for publication to the Hub
const AdminTD = `{"@context":["https://www.w3.org/2022/wot/td/v1.1",{"ht":"https://www.hiveot.net/vocab/v0.1"}],"@type":"Service","created":"2024-06-04T17:00:00.000Z","description":"HiveOT runtime service for administration of consumers, Thing agents and services","id":"admin","modified":"2024-06-04T17:00:00.000Z","support":"https://www.github.com/hiveot/hub","title":"Authentication Administration Service","properties":{"nrClients":{"title":"Number of clients","readOnly":true,"type":"integer","forms":null}},"actions":{"addAgent":{"@type":"ht:function","title":"Add Agent","description":"Create an account for IoT device agents","input":{"title":"Agent Info","readOnly":false,"type":"object","properties":{"clientID":{"title":"Client ID","readOnly":false,"type":"string"},"displayName":{"title":"Display Name","readOnly":false,"type":"string"},"pubKey":{"title":"Public Key","readOnly":false,"type":"string"}}},"output":{"title":"Token","description":"Agent authentication token","readOnly":false,"type":"string"},"idempotent":true},"addConsumer":{"@type":"ht:function","title":"Add Consumer","description":"Add an end-user client","input":{"title":"Consumer Info","readOnly":false,"type":"object","properties":{"clientID":{"title":"Client ID","readOnly":false,"type":"string"},"displayName":{"title":"Display Name","readOnly":false,"type":"string"},"password":{"title":"Password","readOnly":false,"type":"string"}}},"idempotent":true},"addService":{"@type":"ht:function","title":"Add Service","description":"Add a service account","input":{"title":"Service Info","readOnly":false,"type":"object","properties":{"clientID":{"title":"Client ID","readOnly":false,"type":"string"},"displayName":{"title":"Display Name","readOnly":false,"type":"string"},"pubKey":{"title":"Public Key","readOnly":false,"type":"string"}}},"output":{"title":"Token","description":"Service authentication token","readOnly":false,"type":"string"},"idempotent":true},"getClientProfile":{"@type":"ht:function","title":"Get Client Profile","description":"Get the profile information describing a client","input":{"title":"Client ID","readOnly":false,"type":"string"},"output":{"title":"Profile","readOnly":false,"type":"ClientProfile"},"idempotent":true},"getProfiles":{"@type":"ht:function","title":"Get Profiles","description":"Get a list of all client profiles","output":{"title":"Client Profiles","readOnly":false,"type":"array","items":{"title":"Client Profile","readOnly":false,"type":"ClientProfile"}},"idempotent":true},"newAuthToken":{"@type":"ht:function","title":"New Authentication Token","description":"Obtain a new authentication token for an agent or service","input":{"title":"Client ID","readOnly":false,"type":"string"},"output":{"title":"Token","description":"New service or agent authentication token","readOnly":false,"type":"string"}},"removeClient":{"@type":"ht:function","title":"Remove Client","description":"Remove a client account","input":{"title":"Client ID","readOnly":false,"type":"string"}},"setClientPassword":{"@type":"ht:function","title":"Set Client Password","description":"Update the password of a consumer","input":{"title":"Client Info","description":"Client ID and password","readOnly":false,"type":"object","properties":{"clientID":{"title":"Client ID","readOnly":false,"type":"string"},"password":{"title":"Password","readOnly":false,"type":"string"}}}},"updateClientProfile":{"@type":"ht:function","title":"Update Client Profile","description":"Update the details of a client","input":{"title":"Client Profile","readOnly":false,"type":"ClientProfile"}}},"events":{"added":{"title":"Client Added","description":"A new client was added","data":{"title":"Client ID","readOnly":false,"type":"string"}},"removed":{"title":"Client Removed","description":"A client was removed","data":{"title":"Client ID","readOnly":false,"type":"string"}}},"security":["bearer"],"securityDefinitions":{"bearer":{"scheme":""}}}`
