// Package authn with types and interfaces for using this service with agent 'authn'
// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.
// Generated 07 Oct 24 20:16 PDT.
package authn

import "errors"
import "github.com/hiveot/hub/lib/utils"
import "github.com/hiveot/hub/lib/hubclient"

// UserAgentID is the connection ID of the agent managing the Thing.
const UserAgentID = "authn"

// UserServiceID is the internal thingID of the device/service as used by agents.
// Agents use this to publish events and subscribe to actions
const UserServiceID = "user"

// UserDThingID is the Digitwin thingID as used by agents. Digitwin adds the dtw:{agent} prefix to the serviceID
// Consumers use this to publish actions and subscribe to events
const UserDThingID = "dtw:authn:user"

//--- Schema definitions of Thing 'dtw:authn:user' ---

// ClientProfile defines a Client Profile data schema of the authn agent.
//
// This contains client information of device agents, services and consumers
type ClientProfile struct {

	// ClientID with Client ID
	ClientID string `json:"clientID,omitempty"`

	// ClientType with Client Type
	ClientType ClientType `json:"clientType,omitempty"`

	// Disabled with Disabled
	//
	// This client account has been disabled
	Disabled bool `json:"disabled,omitempty"`

	// DisplayName with Display Name
	DisplayName string `json:"displayName,omitempty"`

	// PubKey with Public Key
	PubKey string `json:"pubKey,omitempty"`

	// Updated with Updated timestamp in msec since epoch
	Updated int64 `json:"updated,omitempty"`
}

// ClientType enumerator
//
// identifies the client's category
type ClientType string

const (

	// ClientTypeAgent for Agent
	//
	// Agents represent one or more devices
	ClientTypeAgent = "agent"

	// ClientTypeService for Service
	//
	// Service enrich information
	ClientTypeService = "service"

	// ClientTypeConsumer for Consumer
	//
	// Consumers are end-users of information
	ClientTypeConsumer = "consumer"
)

// ClientRole enumerator
type ClientRole string

const (

	// ClientRoleNone for No role
	//
	// No role means that the user has no permissions.
	// It can not do anything until the role is upgraded to viewer or better
	// Read permissions: none
	// Write permissions: none
	ClientRoleNone = "none"

	// ClientRoleAdmin for Administrator role
	//
	// Administrators can publish and subscribe to any sources and invoke all services
	// Read permissions: subEvents, subActions
	// Write permissions: pubEvents, pubActions, pubConfig
	ClientRoleAdmin = "admin"

	// ClientRoleAgent for Device agent role
	//
	// Device agents can publish thing events and subscribe to device actions
	// Read permissions: subActions
	// Write permissions: pubTDs, pubEvents
	ClientRoleAgent = "agent"

	// ClientRoleManager for Manager role
	//
	// Managers can subscribe to Thing TD, events, publish actions and update configuration
	// Read permissions: subEvents
	// Write permissions: pubActions, pubConfig
	ClientRoleManager = "manager"

	// ClientRoleOperator for Operator role
	//
	// Operators can subscribe to events and publish actions
	// Read permissions: subEvents
	// Write permissions: pubActions
	ClientRoleOperator = "operator"

	// ClientRoleService for Service role
	//
	// Services act as an admin user and a device
	// Read permissions: subEvents, subActions, subConfig
	// Write permissions: pubEvents, pubActions, pubConfig
	ClientRoleService = "service"

	// ClientRoleViewer for Viewer role
	//
	// Viewers can read TDs and subscribe to Thing Events
	// Read permissions: subEvents
	// Write permissions: none
	ClientRoleViewer = "viewer"
)

//--- Argument and Response struct for action of Thing 'dtw:authn:user' ---

const UserGetProfileMethod = "getProfile"

const UserLoginMethod = "login"

// UserLoginArgs defines the arguments of the login function
// Login - Login with password
type UserLoginArgs struct {

	// ClientID with Login ID
	ClientID string `json:"clientID,omitempty"`

	// Password with Password
	Password string `json:"password,omitempty"`
}

// UserLoginResp defines the response of the login function
// Login - Login with password
type UserLoginResp struct {

	// SessionID with SessionID
	SessionID string `json:"sessionID,omitempty"`

	// Token with Token
	Token string `json:"token,omitempty"`
}

const UserRefreshTokenMethod = "refreshToken"

// UserRefreshTokenArgs defines the arguments of the refreshToken function
// Request a new auth token for the current client -
type UserRefreshTokenArgs struct {

	// ClientID with ClientID
	ClientID string `json:"clientID,omitempty"`

	// OldToken with Old Token
	OldToken string `json:"oldToken,omitempty"`
}

const UserUpdateNameMethod = "updateName"

const UserUpdatePasswordMethod = "updatePassword"

const UserUpdatePubKeyMethod = "updatePubKey"

const UserValidateTokenMethod = "validateToken"

// UserValidateTokenResp defines the response of the validateToken function
// Validate Token - Check if the given token is still valid
type UserValidateTokenResp struct {

	// ClientID with Client ID
	ClientID string `json:"clientID,omitempty"`

	// Error with Validation error
	Error string `json:"error,omitempty"`

	// SessionID with Session ID
	SessionID string `json:"sessionID,omitempty"`
}

// UserGetProfile client method - Get Client Profile.
func UserGetProfile(hc hubclient.IHubClient) (resp ClientProfile, err error) {

	err = hc.Rpc(UserDThingID, UserGetProfileMethod, nil, &resp)
	return
}

// UserLogin client method - Login.
// Login with password
func UserLogin(hc hubclient.IHubClient, clientID string, password string) (resp UserLoginResp, err error) {
	var args = UserLoginArgs{clientID, password}
	err = hc.Rpc(UserDThingID, UserLoginMethod, &args, &resp)
	return
}

// UserRefreshToken client method - Request a new auth token for the current client.
func UserRefreshToken(hc hubclient.IHubClient, clientID string, oldToken string) (token string, err error) {
	var args = UserRefreshTokenArgs{clientID, oldToken}
	err = hc.Rpc(UserDThingID, UserRefreshTokenMethod, &args, &token)
	return
}

// UserUpdateName client method - Request changing the display name of the current client.
func UserUpdateName(hc hubclient.IHubClient, newName string) (err error) {

	err = hc.Rpc(UserDThingID, UserUpdateNameMethod, &newName, nil)
	return
}

// UserUpdatePassword client method - Update Password.
// Request changing the password of the current client
func UserUpdatePassword(hc hubclient.IHubClient, password string) (err error) {

	err = hc.Rpc(UserDThingID, UserUpdatePasswordMethod, &password, nil)
	return
}

// UserUpdatePubKey client method - Update Public Key.
// Request changing the public key on file of the current client.
func UserUpdatePubKey(hc hubclient.IHubClient, publicKeyPEM string) (err error) {

	err = hc.Rpc(UserDThingID, UserUpdatePubKeyMethod, &publicKeyPEM, nil)
	return
}

// UserValidateToken client method - Validate Token.
// Check if the given token is still valid
func UserValidateToken(hc hubclient.IHubClient, token string) (resp UserValidateTokenResp, err error) {

	err = hc.Rpc(UserDThingID, UserValidateTokenMethod, &token, &resp)
	return
}

// IUserService defines the interface of the 'User' service
//
// This defines a method for each of the actions in the TD.
type IUserService interface {

	// GetProfile Get Client Profile
	GetProfile(senderID string) (resp ClientProfile, err error)

	// Login Login
	// Login with password
	Login(senderID string, args UserLoginArgs) (resp UserLoginResp, err error)

	// RefreshToken Request a new auth token for the current client
	RefreshToken(senderID string, args UserRefreshTokenArgs) (token string, err error)

	// UpdateName Request changing the display name of the current client
	UpdateName(senderID string, newName string) error

	// UpdatePassword Update Password
	// Request changing the password of the current client
	UpdatePassword(senderID string, password string) error

	// UpdatePubKey Update Public Key
	// Request changing the public key on file of the current client.
	UpdatePubKey(senderID string, publicKeyPEM string) error

	// ValidateToken Validate Token
	// Check if the given token is still valid
	ValidateToken(senderID string, token string) (resp UserValidateTokenResp, err error)
}

// NewHandleUserAction returns a server handler for Thing 'dtw:authn:user' actions.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
//
// This returns the marshalled response data or an error.
func NewHandleUserAction(svc IUserService) func(consumerID, dThingID, name string, input any, messageID string) (string, any, error) {
	return func(consumerID, dThingID, actionName string, input any, messageID string) (string, any, error) {
		var err error
		var status string = "completed"
		var output any
		switch actionName {
		case "getProfile":
			if err == nil {
				output, err = svc.GetProfile(consumerID)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "login":
			args := UserLoginArgs{}
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				output, err = svc.Login(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "refreshToken":
			args := UserRefreshTokenArgs{}
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				output, err = svc.RefreshToken(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "updateName":
			var args string
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				err = svc.UpdateName(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "updatePassword":
			var args string
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				err = svc.UpdatePassword(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "updatePubKey":
			var args string
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				err = svc.UpdatePubKey(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "validateToken":
			var args string
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				output, err = svc.ValidateToken(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		default:
			err = errors.New("Unknown Method '" + actionName + "' of service '" + dThingID + "'")
			status = "failed"
		}
		return status, output, err
	}
}

// UserTD contains the raw TD of this service for publication to the Hub
const UserTD = `{"@context":["https://www.w3.org/2022/wot/td/v1.1",{"ht":"https://www.hiveot.net/vocab/v0.1"}],"@type":"Service","created":"2024-06-04T17:00:00.000Z","description":"HiveOT runtime service for users","id":"user","modified":"2024-06-04T17:00:00.000Z","support":"https://www.github.com/hiveot/hub","title":"Authentication User Service","schemaDefinitions":{"ClientProfile":{"title":"Client Profile","description":"This contains client information of device agents, services and consumers","readOnly":false,"type":"object","properties":{"clientID":{"title":"Client ID","readOnly":false,"type":"string"},"clientType":{"title":"Client Type","readOnly":false,"type":"ClientType"},"disabled":{"title":"Disabled","description":"This client account has been disabled","readOnly":false,"type":"bool"},"displayName":{"title":"Display Name","readOnly":false,"type":"string"},"pubKey":{"title":"Public Key","readOnly":false,"type":"string"},"updated":{"title":"Updated timestamp in msec since epoch","readOnly":false,"type":"int64"}}},"ClientType":{"title":"Client Type","description":"identifies the client's category","oneOf":[{"title":"Agent","description":"Agents represent one or more devices","const":"agent","readOnly":false},{"title":"Service","description":"Service enrich information","const":"service","readOnly":false},{"title":"Consumer","description":"Consumers are end-users of information","const":"consumer","readOnly":false}],"readOnly":false,"type":"string"},"clientRole":{"title":"Client Roles","oneOf":[{"title":"No role","description":"No role means that the user has no permissions.","comments":["It can not do anything until the role is upgraded to viewer or better","Read permissions: none","Write permissions: none"],"const":"none","readOnly":false},{"title":"Administrator role","description":"Administrators can publish and subscribe to any sources and invoke all services","comments":["Read permissions: subEvents, subActions","Write permissions: pubEvents, pubActions, pubConfig"],"const":"admin","readOnly":false},{"title":"Device agent role","description":"Device agents can publish thing events and subscribe to device actions","comments":["Read permissions: subActions","Write permissions: pubTDs, pubEvents"],"const":"agent","readOnly":false},{"title":"Manager role","description":"Managers can subscribe to Thing TD, events, publish actions and update configuration","comments":["Read permissions: subEvents","Write permissions: pubActions, pubConfig"],"const":"manager","readOnly":false},{"title":"Operator role","description":"Operators can subscribe to events and publish actions","comments":["Read permissions: subEvents","Write permissions: pubActions"],"const":"operator","readOnly":false},{"title":"Service role","description":"Services act as an admin user and a device","comments":["Read permissions: subEvents, subActions, subConfig","Write permissions: pubEvents, pubActions, pubConfig"],"const":"service","readOnly":false},{"title":"Viewer role","description":"Viewers can read TDs and subscribe to Thing Events","comments":["Read permissions: subEvents","Write permissions: none"],"const":"viewer","readOnly":false}],"readOnly":false,"type":"string"}},"actions":{"getProfile":{"@type":"ht:function","title":"Get Client Profile","output":{"readOnly":false,"type":"ClientProfile"},"safe":true},"login":{"@type":"ht:function","title":"Login","description":"Login with password","input":{"readOnly":false,"type":"object","properties":{"clientID":{"title":"Login ID","readOnly":false,"type":"string"},"password":{"title":"Password","readOnly":false,"type":"string"}}},"output":{"readOnly":false,"type":"object","properties":{"sessionID":{"title":"SessionID","readOnly":false,"type":"string"},"token":{"title":"Token","readOnly":false,"type":"string"}}}},"refreshToken":{"@type":"ht:function","title":"Request a new auth token for the current client","input":{"readOnly":false,"type":"object","properties":{"clientID":{"title":"ClientID","readOnly":false,"type":"string"},"oldToken":{"title":"Old Token","readOnly":false,"type":"string"}}},"output":{"title":"Token","readOnly":false,"type":"string"}},"updateName":{"@type":"ht:function","title":"Request changing the display name of the current client","input":{"title":"New Name","readOnly":false,"type":"string"},"idempotent":true},"updatePassword":{"@type":"ht:function","title":"Update Password","description":"Request changing the password of the current client","input":{"title":"Password","readOnly":false,"type":"string"},"idempotent":true},"updatePubKey":{"@type":"ht:function","title":"Update Public Key","description":"Request changing the public key on file of the current client.","input":{"title":"Public Key PEM","description":"Public Key in PEM format","readOnly":false,"type":"string"},"idempotent":true},"validateToken":{"@type":"ht:function","title":"Validate Token","description":"Check if the given token is still valid","input":{"title":"Token","readOnly":false,"type":"string"},"output":{"readOnly":false,"type":"object","properties":{"clientID":{"title":"Client ID","readOnly":false,"type":"string"},"error":{"title":"Validation error","readOnly":false,"type":"string"},"sessionID":{"title":"Session ID","readOnly":false,"type":"string"}}},"idempotent":true}},"security":["bearer"],"securityDefinitions":{"bearer":{"scheme":""}}}`
