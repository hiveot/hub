// Package authn with types and interfaces for using this service with agent 'authn'
// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.
// Generated 08 Jun 24 22:25 PDT.
package authn

import "encoding/json"
import "errors"
import "github.com/hiveot/hub/lib/things"
import "github.com/hiveot/hub/lib/hubclient"

// UserAgentID is the connection ID of the agent managing the Thing.
const UserAgentID = "authn"

// UserServiceID is the internal thingID of the device/service as used by agents.
// Agents use this to publish events and subscribe to actions
const UserServiceID = "user"

// UserDThingID is the Digitwin thingID as used by agents. Digitwin adds the dtw:{agent} prefix to the serviceID
// Consumers use this to publish actions and subscribe to events
const UserDThingID = "dtw:authn:user"

//--- Schema definitions of Thing 'dtw:authn:user' ---

// ClientProfile defines a Client Profile data schema of the authn agent.
//
// This contains client information of device agents, services and consumers
type ClientProfile struct {

	// ClientID with Client ID
	ClientID string `json:"clientID,omitempty"`

	// ClientType with Client Type
	ClientType ClientType `json:"clientType,omitempty"`

	// Disabled with Disabled
	//
	// This client account has been disabled
	Disabled bool `json:"disabled,omitempty"`

	// DisplayName with Display Name
	DisplayName string `json:"displayName,omitempty"`

	// PubKey with Public Key
	PubKey string `json:"pubKey,omitempty"`

	// Updated with Updated timestamp in msec since epoch
	Updated int64 `json:"updated,omitempty"`
}

// ClientType enumerator
//
// identifies the client's category
type ClientType string

const (
	// ClientTypeAgent for Agents represent one or more devices
	ClientTypeAgent ClientType = "agent"
	// ClientTypeService for Service enrich information
	ClientTypeService ClientType = "service"
	// ClientTypeConsumer for Consumers are end-users of information
	ClientTypeConsumer ClientType = "consumer"
)

//--- Argument and Response struct for action of Thing 'dtw:authn:user' ---

const UserGetProfileMethod = "getProfile"

const UserLoginMethod = "login"

// UserLoginArgs defines the arguments of the login function
// Login - Login with password
type UserLoginArgs struct {

	// ClientID with Login ID
	ClientID string `json:"clientID,omitempty"`

	// Password with Password
	Password string `json:"password,omitempty"`
}

// UserLoginResp defines the response of the login function
// Login - Login with password
type UserLoginResp struct {

	// SessionID with SessionID
	SessionID string `json:"sessionID,omitempty"`

	// Token with Token
	Token string `json:"token,omitempty"`
}

const UserRefreshTokenMethod = "refreshToken"

const UserUpdateNameMethod = "updateName"

const UserUpdatePasswordMethod = "updatePassword"

const UserUpdatePubKeyMethod = "updatePubKey"

const UserValidateTokenMethod = "validateToken"

// UserValidateTokenResp defines the response of the validateToken function
// Validate Token - Check if the given token is still valid
type UserValidateTokenResp struct {

	// ClientID with Client ID
	ClientID string `json:"clientID,omitempty"`

	// Error with Validation error
	Error string `json:"error,omitempty"`

	// SessionID with Session ID
	SessionID string `json:"sessionID,omitempty"`
}

// UserClient client for talking to the 'dtw:authn:user' service
type UserClient struct {
	dThingID string
	hc       hubclient.IHubClient
}

// GetProfile client method - Get Client Profile.
func (svc *UserClient) GetProfile() (resp ClientProfile, err error) {
	err = svc.hc.Rpc(svc.dThingID, UserGetProfileMethod, nil, &resp)
	return
}

// Login client method - Login.
// Login with password
func (svc *UserClient) Login(args UserLoginArgs) (resp UserLoginResp, err error) {
	err = svc.hc.Rpc(svc.dThingID, UserLoginMethod, &args, &resp)
	return
}

// RefreshToken client method - Request a new auth token for the current client.
func (svc *UserClient) RefreshToken(oldToken string) (token string, err error) {
	err = svc.hc.Rpc(svc.dThingID, UserRefreshTokenMethod, &oldToken, &token)
	return
}

// UpdateName client method - Request changing the display name of the current client.
func (svc *UserClient) UpdateName(newName string) (err error) {
	err = svc.hc.Rpc(svc.dThingID, UserUpdateNameMethod, &newName, nil)
	return
}

// UpdatePassword client method - Update Password.
// Request changing the password of the current client
func (svc *UserClient) UpdatePassword(password string) (err error) {
	err = svc.hc.Rpc(svc.dThingID, UserUpdatePasswordMethod, &password, nil)
	return
}

// UpdatePubKey client method - Update Public Key.
// Request changing the public key on file of the current client.
func (svc *UserClient) UpdatePubKey(publicKeyPEM string) (err error) {
	err = svc.hc.Rpc(svc.dThingID, UserUpdatePubKeyMethod, &publicKeyPEM, nil)
	return
}

// ValidateToken client method - Validate Token.
// Check if the given token is still valid
func (svc *UserClient) ValidateToken(token string) (resp UserValidateTokenResp, err error) {
	err = svc.hc.Rpc(svc.dThingID, UserValidateTokenMethod, &token, &resp)
	return
}

// NewUserClient creates a new client for invoking Authentication User Service methods.
func NewUserClient(hc hubclient.IHubClient) *UserClient {
	cl := UserClient{
		hc:       hc,
		dThingID: "dtw:authn:user",
	}
	return &cl
}

// IUserService defines the interface of the 'User' service
//
// This defines a method for each of the actions in the TD.
type IUserService interface {

	// GetProfile Get Client Profile
	GetProfile(senderID string) (resp ClientProfile, err error)

	// Login Login
	// Login with password
	Login(senderID string, args UserLoginArgs) (resp UserLoginResp, err error)

	// RefreshToken Request a new auth token for the current client
	RefreshToken(senderID string, oldToken string) (token string, err error)

	// UpdateName Request changing the display name of the current client
	UpdateName(senderID string, newName string) error

	// UpdatePassword Update Password
	// Request changing the password of the current client
	UpdatePassword(senderID string, password string) error

	// UpdatePubKey Update Public Key
	// Request changing the public key on file of the current client.
	UpdatePubKey(senderID string, publicKeyPEM string) error

	// ValidateToken Validate Token
	// Check if the given token is still valid
	ValidateToken(senderID string, token string) (resp UserValidateTokenResp, err error)
}

// NewUserHandler returns a server handler for Thing 'dtw:authn:user' actions.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
//
// This returns the marshalled response data or an error.
func NewUserHandler(svc IUserService) func(*things.ThingMessage) hubclient.DeliveryStatus {
	return func(msg *things.ThingMessage) (stat hubclient.DeliveryStatus) {
		var err error
		var resp interface{}
		var senderID = msg.SenderID
		switch msg.Key {
		case "updateName":
			var args string
			err = msg.Unmarshal(&args)
			if err == nil {
				err = svc.UpdateName(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "updatePassword":
			var args string
			err = msg.Unmarshal(&args)
			if err == nil {
				err = svc.UpdatePassword(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "updatePubKey":
			var args string
			err = msg.Unmarshal(&args)
			if err == nil {
				err = svc.UpdatePubKey(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "validateToken":
			var args string
			err = msg.Unmarshal(&args)
			if err == nil {
				resp, err = svc.ValidateToken(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "getProfile":
			if err == nil {
				resp, err = svc.GetProfile(senderID)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "login":
			args := UserLoginArgs{}
			err = msg.Unmarshal(&args)
			if err == nil {
				resp, err = svc.Login(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "refreshToken":
			var args string
			err = msg.Unmarshal(&args)
			if err == nil {
				resp, err = svc.RefreshToken(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		default:
			err = errors.New("Unknown Method '" + msg.Key + "' of service '" + msg.ThingID + "'")
			stat.Failed(msg, err)
		}
		if resp != nil {
			stat.Reply, _ = json.Marshal(resp)
		}
		stat.Completed(msg, err)
		return stat
	}
}
