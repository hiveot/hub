// Package authz with types and interfaces for using this service with agent 'authz'
// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.
// Generated 23 Nov 24 07:23 PST.
package authz

import (
	"errors"
	"github.com/hiveot/hub/wot/transports"
)
import "github.com/hiveot/hub/lib/utils"

// UserAgentID is the account ID of the agent managing the Thing.
const UserAgentID = "authz"

// UserServiceID is the thingID of the device/service as used by agents.
// Agents use this to publish events and subscribe to actions
const UserServiceID = "user"

// UserDThingID is the Digitwin thingID as used by consumers. Digitwin adds the dtw:{agent} prefix to the serviceID
// Consumers use this to publish actions and subscribe to events
const UserDThingID = "dtw:authz:user"

// Thing names
const (
	UserActionSetPermissions = "setPermissions"
)

//--- Schema definitions of Thing 'dtw:authz:user' ---

// ThingPermissions defines a Thing Permissions data schema of the authz agent.
//
// This defines the roles that have permissions to access this thing
// Used by agents and services to set the roles that can invoke actions on a service.
// These permissions are default recommendations made by the service provider.
// The authz service can override these defaults with another configuration.
type ThingPermissions struct {

	// AgentID with Agent ID
	//
	// The agent granting the permissions.
	AgentID string `json:"agentID,omitempty"`

	// Allow with Roles
	//
	// Roles allowed access to a Thing
	Allow []ClientRole `json:"allow,omitempty"`

	// Deny with
	Deny []ClientRole `json:"deny,omitempty"`

	// ThingID with Thing ID
	//
	// ThingID of the service whose permissions are set.
	// This is the ThingID as send by the agent, without the digitwin prefix.
	ThingID string `json:"thingID,omitempty"`
}

// ClientRole enumerator
type ClientRole string

const (

	// ClientRoleNone for No role
	//
	// No role means that the user has no permissions.
	// It can not do anything until the role is upgraded to viewer or better
	// Read permissions: none
	// Write permissions: none
	ClientRoleNone ClientRole = "none"

	// ClientRoleAdmin for Administrator role
	//
	// Administrators can publish and subscribe to any sources and invoke all services
	// Read permissions: subEvents, subActions
	// Write permissions: pubEvents, pubActions, pubConfig
	ClientRoleAdmin ClientRole = "admin"

	// ClientRoleAgent for Device agent role
	//
	// Device agents can publish thing events and subscribe to device actions
	// Read permissions: subActions
	// Write permissions: pubTDs, pubEvents
	ClientRoleAgent ClientRole = "agent"

	// ClientRoleManager for Manager role
	//
	// Managers can subscribe to Thing TD, events, publish actions and update configuration
	// Read permissions: subEvents
	// Write permissions: pubActions, pubConfig
	ClientRoleManager ClientRole = "manager"

	// ClientRoleOperator for Operator role
	//
	// Operators can subscribe to events and publish actions
	// Read permissions: subEvents
	// Write permissions: pubActions
	ClientRoleOperator ClientRole = "operator"

	// ClientRoleService for Service role
	//
	// Services act as an admin user and a device
	// Read permissions: subEvents, subActions, subConfig
	// Write permissions: pubEvents, pubActions, pubConfig
	ClientRoleService ClientRole = "service"

	// ClientRoleViewer for Viewer role
	//
	// Viewers can read TDs and subscribe to Thing Events
	// Read permissions: subEvents
	// Write permissions: none
	ClientRoleViewer ClientRole = "viewer"
)

//--- Argument and Response struct for action of Thing 'dtw:authz:user' ---

const UserSetPermissionsMethod = "setPermissions"

// UserSetPermissions client method - Set Permissions.
// Set the roles that can use a Thing or service
func UserSetPermissions(hc transports.IConsumer, permissions ThingPermissions) (err error) {

	err = hc.Rpc(UserDThingID, UserSetPermissionsMethod, &permissions, nil)
	return
}

// IUserService defines the interface of the 'User' service
//
// This defines a method for each of the actions in the TD.
type IUserService interface {

	// SetPermissions Set Permissions
	// Set the roles that can use a Thing or service
	SetPermissions(senderID string, permissions ThingPermissions) error
}

// NewHandleUserAction returns a server handler for Thing 'dtw:authz:user' actions.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
//
// This returns the marshalled response data or an error.
func NewHandleUserAction(svc IUserService) func(msg *transports.ThingMessage) transports.RequestStatus {
	return func(msg *transports.ThingMessage) (stat transports.RequestStatus) {
		var err error
		stat.Completed(msg, nil, nil)
		var output any
		switch msg.Name {
		case "setPermissions":
			var args ThingPermissions
			err = utils.DecodeAsObject(msg.Data, &args)
			if err == nil {
				err = svc.SetPermissions(msg.SenderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		default:
			err = errors.New("Unknown Method '" + msg.Name + "' of service '" + msg.ThingID + "'")
		}
		stat.Completed(msg, output, err)
		return stat
	}
}

// UserTD contains the raw TD of this service for publication to the Hub
const UserTD = `{"actions":{"setPermissions":{"@type":"ht:function","description":"Set the roles that can use a Thing or service","title":"Set Permissions","idempotent":true,"input":{"title":"Permissions","readOnly":false,"type":"ThingPermissions"}}},"@context":["https://www.w3.org/2022/wot/td/v1.1",{"ht":"https://www.hiveot.net/vocab/v0.1"}],"@type":"Service","created":"2024-06-04T17:00:00.000Z","deny":["none"],"description":"HiveOT runtime service for services setting permissions","id":"user","modified":"2024-06-04T17:00:00.000Z","schemaDefinitions":{"ThingPermissions":{"title":"Thing Permissions","description":"This defines the roles that have permissions to access this thing","comments":["Used by agents and services to set the roles that can invoke actions on a service.","These permissions are default recommendations made by the service provider.","The authz service can override these defaults with another configuration."],"readOnly":false,"type":"object","properties":{"agentID":{"title":"Agent ID","description":"The agent granting the permissions.","readOnly":false,"type":"string"},"allow":{"title":"Roles","description":"Roles allowed access to a Thing","readOnly":false,"type":"array","items":{"title":"Role","description":"Role allowed access to a Thing","readOnly":false,"type":"ClientRole"}},"deny":{"readOnly":false,"type":"array","items":{"title":"Role","description":"Role denied access to the Thing","readOnly":false,"type":"ClientRole"}},"thingID":{"title":"Thing ID","description":"ThingID of the service whose permissions are set.","comments":["This is the ThingID as send by the agent, without the digitwin prefix."],"readOnly":false,"type":"string"}}},"clientRole":{"title":"Client Roles","oneOf":[{"title":"No role","description":"No role means that the user has no permissions.","comments":["It can not do anything until the role is upgraded to viewer or better","Read permissions: none","Write permissions: none"],"const":"none","readOnly":false},{"title":"Administrator role","description":"Administrators can publish and subscribe to any sources and invoke all services","comments":["Read permissions: subEvents, subActions","Write permissions: pubEvents, pubActions, pubConfig"],"const":"admin","readOnly":false},{"title":"Device agent role","description":"Device agents can publish thing events and subscribe to device actions","comments":["Read permissions: subActions","Write permissions: pubTDs, pubEvents"],"const":"agent","readOnly":false},{"title":"Manager role","description":"Managers can subscribe to Thing TD, events, publish actions and update configuration","comments":["Read permissions: subEvents","Write permissions: pubActions, pubConfig"],"const":"manager","readOnly":false},{"title":"Operator role","description":"Operators can subscribe to events and publish actions","comments":["Read permissions: subEvents","Write permissions: pubActions"],"const":"operator","readOnly":false},{"title":"Service role","description":"Services act as an admin user and a device","comments":["Read permissions: subEvents, subActions, subConfig","Write permissions: pubEvents, pubActions, pubConfig"],"const":"service","readOnly":false},{"title":"Viewer role","description":"Viewers can read TDs and subscribe to Thing Events","comments":["Read permissions: subEvents","Write permissions: none"],"const":"viewer","readOnly":false}],"readOnly":false,"type":"string"}},"security":["bearer"],"securityDefinitions":{"bearer":{"scheme":""}},"title":"Authorization Client Services","support":"https://www.github.com/hiveot/hub"}`
