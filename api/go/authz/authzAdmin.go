// Package authz with types and interfaces for using this service with agent 'authz'
// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.
// Generated 10 Jan 25 14:09 PST. 
package authz

import "errors"
import "github.com/hiveot/hub/transports/tputils"
import "github.com/hiveot/hub/transports"

// AdminAgentID is the account ID of the agent managing the Thing.
const AdminAgentID = "authz"

// AdminServiceID is the thingID of the device/service as used by agents.
// Agents use this to publish events and subscribe to actions
const AdminServiceID = "admin"

// AdminDThingID is the Digitwin thingID as used by consumers. Digitwin adds the dtw:{agent} prefix to the serviceID
// Consumers use this to publish actions and subscribe to events
const AdminDThingID = "dtw:authz:admin"

// Thing names
const (
    AdminActionGetClientRole = "getClientRole"
    AdminActionSetClientRole = "setClientRole"
)
//--- Argument and Response struct for action of Thing 'dtw:authz:admin' ---

const AdminGetClientRoleMethod = "getClientRole"

const AdminSetClientRoleMethod = "setClientRole"

// AdminSetClientRoleArgs defines the arguments of the setClientRole function
// Set Client Role - Update the role of a consumer
type AdminSetClientRoleArgs struct {
    
    // ClientID with Client ID
    ClientID string `json:"clientID,omitempty"`
    
    // Role with Client Role
    Role ClientRole `json:"role,omitempty"`
}


// AdminGetClientRole client method - Get Client Role.
// Read the role of a client
func AdminGetClientRole(hc transports.IConsumerConnection, clientID string)(role ClientRole, err error){
    
    err = hc.Rpc("invokeaction", AdminDThingID, AdminGetClientRoleMethod, &clientID, &role)
    return
}

// AdminSetClientRole client method - Set Client Role.
// Update the role of a consumer
func AdminSetClientRole(hc transports.IConsumerConnection, clientID string, role ClientRole)(err error){
    var args = AdminSetClientRoleArgs{clientID, role}
    err = hc.Rpc("invokeaction", AdminDThingID, AdminSetClientRoleMethod, &args, nil)
    return
}


// IAdminService defines the interface of the 'Admin' service
//
// This defines a method for each of the actions in the TD. 
// 
type IAdminService interface {

   // GetClientRole Get Client Role
   // Read the role of a client
   // This returns a response with client role
   GetClientRole(senderID string, clientID string) (role ClientRole, err error)

   // SetClientRole Set Client Role
   // Update the role of a consumer
   SetClientRole(senderID string, args AdminSetClientRoleArgs) error
}

// NewHandleAdminAction returns an agent handler for Thing 'dtw:authz:admin' actions.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
// 
// This returns the marshalled response data or an error.
func NewHandleAdminAction(svc IAdminService)(func(msg transports.RequestMessage) transports.ResponseMessage) {
    return func(msg transports.RequestMessage) transports.ResponseMessage {
        var output any
        var err error
        switch msg.Name {
            case "getClientRole":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.GetClientRole(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "setClientRole":
                args := AdminSetClientRoleArgs{}
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  err = svc.SetClientRole(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            default:
            	err = errors.New("Unknown Method '"+msg.Name+"' of service '"+msg.ThingID+"'")
        }
        return msg.CreateResponse(output,err)
    }
}

// AdminTD contains the raw TD of this service for publication to the Hub
const AdminTD = `{"actions":{"getClientRole":{"@type":"hiveot:function","description":"Read the role of a client","title":"Get Client Role","idempotent":true,"input":{"title":"ClientID","description":"ID of the service, agent or consumer","readOnly":false,"type":"string"},"output":{"title":"Role","description":"Response with client role","readOnly":false,"type":"ClientRole"},"safe":true},"setClientRole":{"@type":"hiveot:function","description":"Update the role of a consumer","title":"Set Client Role","idempotent":true,"input":{"readOnly":false,"type":"object","properties":{"clientID":{"title":"Client ID","readOnly":false,"type":"string"},"role":{"title":"Client Role","readOnly":false,"type":"ClientRole"}}}}},"allow":["admin"],"@context":["https://www.w3.org/2022/wot/td/v1.1",{"hiveot":"https://www.hiveot.net/vocab/v0.1"}],"@type":"Service","created":"2024-06-04T17:00:00.000Z","description":"HiveOT runtime service for administration of roles and permissions","events":{},"id":"admin","modified":"2024-06-04T17:00:00.000Z","properties":{},"security":["bearer"],"securityDefinitions":{"bearer":{"scheme":""}},"title":"Authorization Administration Service","support":"https://www.github.com/hiveot/hub"}`