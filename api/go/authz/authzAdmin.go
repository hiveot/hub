// Package authz with types and interfaces for using this service with agent 'authz'
// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.
// Generated 14 Jul 24 20:51 PDT.
package authz

import "errors"
import "github.com/hiveot/hub/lib/things"
import "github.com/hiveot/hub/lib/hubclient"

// AdminAgentID is the connection ID of the agent managing the Thing.
const AdminAgentID = "authz"

// AdminServiceID is the internal thingID of the device/service as used by agents.
// Agents use this to publish events and subscribe to actions
const AdminServiceID = "admin"

// AdminDThingID is the Digitwin thingID as used by agents. Digitwin adds the dtw:{agent} prefix to the serviceID
// Consumers use this to publish actions and subscribe to events
const AdminDThingID = "dtw:authz:admin"

//--- Argument and Response struct for action of Thing 'dtw:authz:admin' ---

const AdminGetClientRoleMethod = "getClientRole"

const AdminSetClientRoleMethod = "setClientRole"

// AdminSetClientRoleArgs defines the arguments of the setClientRole function
// Set Client Role - Update the role of a consumer
type AdminSetClientRoleArgs struct {

	// ClientID with Client ID
	ClientID string `json:"clientID,omitempty"`

	// Role with Client Role
	Role string `json:"role,omitempty"`
}

// AdminGetClientRole client method - Get Client Role.
// Read the role of a client
func AdminGetClientRole(hc hubclient.IHubClient, clientID string) (role string, err error) {

	err = hc.Rpc(AdminDThingID, AdminGetClientRoleMethod, &clientID, &role)
	return
}

// AdminSetClientRole client method - Set Client Role.
// Update the role of a consumer
func AdminSetClientRole(hc hubclient.IHubClient, clientID string, role string) (err error) {
	var args = AdminSetClientRoleArgs{clientID, role}
	err = hc.Rpc(AdminDThingID, AdminSetClientRoleMethod, &args, nil)
	return
}

// IAdminService defines the interface of the 'Admin' service
//
// This defines a method for each of the actions in the TD.
type IAdminService interface {

	// GetClientRole Get Client Role
	// Read the role of a client
	// This returns a response with client role
	GetClientRole(senderID string, clientID string) (role string, err error)

	// SetClientRole Set Client Role
	// Update the role of a consumer
	SetClientRole(senderID string, args AdminSetClientRoleArgs) error
}

// NewAdminHandler returns a server handler for Thing 'dtw:authz:admin' actions.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
//
// This returns the marshalled response data or an error.
func NewAdminHandler(svc IAdminService) func(*things.ThingMessage) hubclient.DeliveryStatus {
	return func(msg *things.ThingMessage) (stat hubclient.DeliveryStatus) {
		var err error
		var resp interface{}
		var senderID = msg.SenderID
		switch msg.Key {
		case "getClientRole":
			var args string
			err = msg.Decode(&args)
			if err == nil {
				resp, err = svc.GetClientRole(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "setClientRole":
			args := AdminSetClientRoleArgs{}
			err = msg.Decode(&args)
			if err == nil {
				err = svc.SetClientRole(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		default:
			err = errors.New("Unknown Method '" + msg.Key + "' of service '" + msg.ThingID + "'")
			stat.DeliveryFailed(msg, err)
		}
		stat.Completed(msg, resp, err)
		return stat
	}
}
