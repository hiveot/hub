// Package authz with types and interfaces for using this service with agent 'authz'
// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.
// Generated 16 Oct 24 20:48 PDT.
package authz

import "errors"
import "github.com/hiveot/hub/api/go/vocab"
import "github.com/hiveot/hub/lib/utils"
import "github.com/hiveot/hub/lib/hubclient"

// AdminAgentID is the connection ID of the agent managing the Thing.
const AdminAgentID = "authz"

// AdminServiceID is the internal thingID of the device/service as used by agents.
// Agents use this to publish events and subscribe to actions
const AdminServiceID = "admin"

// AdminDThingID is the Digitwin thingID as used by agents. Digitwin adds the dtw:{agent} prefix to the serviceID
// Consumers use this to publish actions and subscribe to events
const AdminDThingID = "dtw:authz:admin"

//--- Argument and Response struct for action of Thing 'dtw:authz:admin' ---

const AdminGetClientRoleMethod = "getClientRole"

const AdminSetClientRoleMethod = "setClientRole"

// AdminSetClientRoleArgs defines the arguments of the setClientRole function
// Set Client Role - Update the role of a consumer
type AdminSetClientRoleArgs struct {

	// ClientID with Client ID
	ClientID string `json:"clientID,omitempty"`

	// Role with Client Role
	Role ClientRole `json:"role,omitempty"`
}

// AdminGetClientRole client method - Get Client Role.
// Read the role of a client
func AdminGetClientRole(hc hubclient.IConsumerClient, clientID string) (role ClientRole, err error) {

	err = hc.Rpc(AdminDThingID, AdminGetClientRoleMethod, &clientID, &role)
	return
}

// AdminSetClientRole client method - Set Client Role.
// Update the role of a consumer
func AdminSetClientRole(hc hubclient.IConsumerClient, clientID string, role ClientRole) (err error) {
	var args = AdminSetClientRoleArgs{clientID, role}
	err = hc.Rpc(AdminDThingID, AdminSetClientRoleMethod, &args, nil)
	return
}

// IAdminService defines the interface of the 'Admin' service
//
// This defines a method for each of the actions in the TD.
type IAdminService interface {

	// GetClientRole Get Client Role
	// Read the role of a client
	// This returns a response with client role
	GetClientRole(senderID string, clientID string) (role ClientRole, err error)

	// SetClientRole Set Client Role
	// Update the role of a consumer
	SetClientRole(senderID string, args AdminSetClientRoleArgs) error
}

// NewHandleAdminAction returns a server handler for Thing 'dtw:authz:admin' actions.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
//
// This returns the marshalled response data or an error.
func NewHandleAdminAction(svc IAdminService) func(consumerID, dThingID, name string, input any, messageID string) (string, any, error) {
	return func(consumerID, dThingID, actionName string, input any, messageID string) (string, any, error) {
		var err error
		var status = vocab.ProgressStatusCompleted
		var output any
		switch actionName {
		case "setClientRole":
			args := AdminSetClientRoleArgs{}
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				err = svc.SetClientRole(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "getClientRole":
			var args string
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				output, err = svc.GetClientRole(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		default:
			err = errors.New("Unknown Method '" + actionName + "' of service '" + dThingID + "'")
			status = vocab.ProgressStatusFailed
		}
		return status, output, err
	}
}

// AdminTD contains the raw TD of this service for publication to the Hub
const AdminTD = `{"@context":["https://www.w3.org/2022/wot/td/v1.1",{"ht":"https://www.hiveot.net/vocab/v0.1"}],"@type":"Service","created":"2024-06-04T17:00:00.000Z","description":"HiveOT runtime service for administration of roles and permissions","id":"admin","modified":"2024-06-04T17:00:00.000Z","support":"https://www.github.com/hiveot/hub","title":"Authorization Administration Service","actions":{"getClientRole":{"@type":"ht:function","title":"Get Client Role","description":"Read the role of a client","input":{"title":"ClientID","description":"ID of the service, agent or consumer","readOnly":false,"type":"string"},"output":{"title":"Role","description":"Response with client role","readOnly":false,"type":"ClientRole"},"safe":true,"idempotent":true},"setClientRole":{"@type":"ht:function","title":"Set Client Role","description":"Update the role of a consumer","input":{"readOnly":false,"type":"object","properties":{"clientID":{"title":"Client ID","readOnly":false,"type":"string"},"role":{"title":"Client Role","readOnly":false,"type":"ClientRole"}}},"idempotent":true}},"security":["bearer"],"securityDefinitions":{"bearer":{"scheme":""}}}`
