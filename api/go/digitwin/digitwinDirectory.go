// Package digitwin with types and interfaces for using this service with agent 'digitwin'
// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.
// Generated 09 Jun 24 10:18 PDT.
package digitwin

import "encoding/json"
import "errors"
import "github.com/hiveot/hub/lib/things"
import "github.com/hiveot/hub/lib/hubclient"

// DirectoryAgentID is the connection ID of the agent managing the Thing.
const DirectoryAgentID = "digitwin"

// DirectoryServiceID is the internal thingID of the device/service as used by agents.
// Agents use this to publish events and subscribe to actions
const DirectoryServiceID = "directory"

// DirectoryDThingID is the Digitwin thingID as used by agents. Digitwin adds the dtw:{agent} prefix to the serviceID
// Consumers use this to publish actions and subscribe to events
const DirectoryDThingID = "dtw:digitwin:directory"

//--- Argument and Response struct for action of Thing 'dtw:digitwin:directory' ---

const DirectoryQueryTDsMethod = "queryTDs"

// DirectoryQueryTDsArgs defines the arguments of the queryTDs function
// Query TDs - Query Thing TD documents from the directory
type DirectoryQueryTDsArgs struct {

	// Limit with Max entries
	//
	// Maximum number of entries to return
	Limit int `json:"limit,omitempty"`

	// Offset with Result offset
	//
	// Number of results to skip
	Offset int `json:"offset,omitempty"`

	// Query with Query Things
	//
	// Query expression (tbd)
	Query string `json:"query,omitempty"`
}

const DirectoryReadTDMethod = "readTD"

const DirectoryReadTDsMethod = "readTDs"

// DirectoryReadTDsArgs defines the arguments of the readTDs function
// Read TDs - Read a batch of TD documents
type DirectoryReadTDsArgs struct {

	// Limit with Limit
	Limit int `json:"limit,omitempty"`

	// Offset with Offset
	Offset int `json:"offset,omitempty"`
}

const DirectoryRemoveTDMethod = "removeTD"

// DirectoryClient client for talking to the 'dtw:digitwin:directory' service
type DirectoryClient struct {
	dThingID string
	hc       hubclient.IHubClient
}

// QueryTDs client method - Query TDs.
// Query Thing TD documents from the directory
func (svc *DirectoryClient) QueryTDs(args DirectoryQueryTDsArgs) (tDDList []string, err error) {
	err = svc.hc.Rpc(svc.dThingID, DirectoryQueryTDsMethod, &args, &tDDList)
	return
}

// ReadTD client method - Read TD.
// This returns a JSON encoded TD document
func (svc *DirectoryClient) ReadTD(thingID string) (tDD string, err error) {
	err = svc.hc.Rpc(svc.dThingID, DirectoryReadTDMethod, &thingID, &tDD)
	return
}

// ReadTDs client method - Read TDs.
// Read a batch of TD documents
func (svc *DirectoryClient) ReadTDs(args DirectoryReadTDsArgs) (tDlist []string, err error) {
	err = svc.hc.Rpc(svc.dThingID, DirectoryReadTDsMethod, &args, &tDlist)
	return
}

// RemoveTD client method - Remove TD.
// Remove a Thing TD document from the digital twin directory and value stores
func (svc *DirectoryClient) RemoveTD(thingID string) (err error) {
	err = svc.hc.Rpc(svc.dThingID, DirectoryRemoveTDMethod, &thingID, nil)
	return
}

// NewDirectoryClient creates a new client for invoking DigiTwin Directory Service methods.
func NewDirectoryClient(hc hubclient.IHubClient) *DirectoryClient {
	cl := DirectoryClient{
		hc:       hc,
		dThingID: "dtw:digitwin:directory",
	}
	return &cl
}

// IDirectoryService defines the interface of the 'Directory' service
//
// This defines a method for each of the actions in the TD.
type IDirectoryService interface {

	// QueryTDs Query TDs
	// Query Thing TD documents from the directory
	// This returns a list of JSON encoded TD documents
	QueryTDs(senderID string, args DirectoryQueryTDsArgs) (tDDList []string, err error)

	// ReadTD Read TD
	// This returns a JSON encoded TD document
	// This returns a a JSON encoded Thing Description Document
	ReadTD(senderID string, thingID string) (tDD string, err error)

	// ReadTDs Read TDs
	// Read a batch of TD documents
	// This returns a list of JSON encoded TD documents
	ReadTDs(senderID string, args DirectoryReadTDsArgs) (tDlist []string, err error)

	// RemoveTD Remove TD
	// Remove a Thing TD document from the digital twin directory and value stores
	RemoveTD(senderID string, thingID string) error
}

// NewDirectoryHandler returns a server handler for Thing 'dtw:digitwin:directory' actions.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
//
// This returns the marshalled response data or an error.
func NewDirectoryHandler(svc IDirectoryService) func(*things.ThingMessage) hubclient.DeliveryStatus {
	return func(msg *things.ThingMessage) (stat hubclient.DeliveryStatus) {
		var err error
		var resp interface{}
		var senderID = msg.SenderID
		switch msg.Key {
		case "readTD":
			var args string
			err = msg.Unmarshal(&args)
			if err == nil {
				resp, err = svc.ReadTD(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "readTDs":
			args := DirectoryReadTDsArgs{}
			err = msg.Unmarshal(&args)
			if err == nil {
				resp, err = svc.ReadTDs(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "removeTD":
			var args string
			err = msg.Unmarshal(&args)
			if err == nil {
				err = svc.RemoveTD(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "queryTDs":
			args := DirectoryQueryTDsArgs{}
			err = msg.Unmarshal(&args)
			if err == nil {
				resp, err = svc.QueryTDs(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		default:
			err = errors.New("Unknown Method '" + msg.Key + "' of service '" + msg.ThingID + "'")
			stat.Failed(msg, err)
		}
		if resp != nil {
			stat.Reply, _ = json.Marshal(resp)
		}
		stat.Completed(msg, err)
		return stat
	}
}
