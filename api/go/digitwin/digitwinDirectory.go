// Package digitwin with types and interfaces for using this service with agent 'digitwin'
// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.
// Generated 09 Oct 24 10:30 PDT.
package digitwin

import "errors"
import "github.com/hiveot/hub/lib/utils"
import "github.com/hiveot/hub/lib/hubclient"

// DirectoryAgentID is the connection ID of the agent managing the Thing.
const DirectoryAgentID = "digitwin"

// DirectoryServiceID is the internal thingID of the device/service as used by agents.
// Agents use this to publish events and subscribe to actions
const DirectoryServiceID = "directory"

// DirectoryDThingID is the Digitwin thingID as used by agents. Digitwin adds the dtw:{agent} prefix to the serviceID
// Consumers use this to publish actions and subscribe to events
const DirectoryDThingID = "dtw:digitwin:directory"

//--- Argument and Response struct for action of Thing 'dtw:digitwin:directory' ---

const DirectoryQueryDTDsMethod = "queryDTDs"

// DirectoryQueryDTDsArgs defines the arguments of the queryDTDs function
// Query DTDs - Query digital twin TD documents from the directory
type DirectoryQueryDTDsArgs struct {

	// Limit with Max entries
	//
	// Maximum number of entries to return
	Limit int `json:"limit,omitempty"`

	// Offset with Result offset
	//
	// Number of results to skip
	Offset int `json:"offset,omitempty"`

	// Query with Query Things
	//
	// JSON Query expression (tbd)
	Query string `json:"query,omitempty"`
}

const DirectoryReadAllDTDsMethod = "readAllDTDs"

// DirectoryReadAllDTDsArgs defines the arguments of the readAllDTDs function
// Read all TDs - Read a batch of TD documents
type DirectoryReadAllDTDsArgs struct {

	// Limit with Limit
	//
	// Maximum number of documents to return
	Limit int `json:"limit,omitempty"`

	// Offset with Offset
	//
	// Start index in the list of TD documents
	Offset int `json:"offset,omitempty"`
}

const DirectoryReadDTDMethod = "readDTD"

const DirectoryRemoveDTDMethod = "removeDTD"

const DirectoryUpdateDTDMethod = "updateDTD"

// DirectoryQueryDTDs client method - Query DTDs.
// Query digital twin TD documents from the directory
func DirectoryQueryDTDs(hc hubclient.IHubClient, limit int, offset int, query string) (tDdocuments []string, err error) {
	var args = DirectoryQueryDTDsArgs{limit, offset, query}
	err = hc.Rpc(DirectoryDThingID, DirectoryQueryDTDsMethod, &args, &tDdocuments)
	return
}

// DirectoryReadAllDTDs client method - Read all TDs.
// Read a batch of TD documents
func DirectoryReadAllDTDs(hc hubclient.IHubClient, limit int, offset int) (tDlist []string, err error) {
	var args = DirectoryReadAllDTDsArgs{limit, offset}
	err = hc.Rpc(DirectoryDThingID, DirectoryReadAllDTDsMethod, &args, &tDlist)
	return
}

// DirectoryReadDTD client method - Read TD.
// Return a JSON encoded TD document
func DirectoryReadDTD(hc hubclient.IHubClient, thingID string) (tD string, err error) {

	err = hc.Rpc(DirectoryDThingID, DirectoryReadDTDMethod, &thingID, &tD)
	return
}

// DirectoryRemoveDTD client method - Remove TD.
// Remove a digital twin from the directory
func DirectoryRemoveDTD(hc hubclient.IHubClient, dThingID string) (err error) {

	err = hc.Rpc(DirectoryDThingID, DirectoryRemoveDTDMethod, &dThingID, nil)
	return
}

// DirectoryUpdateDTD client method - Update DTD.
// Update the Digital twin TD in the directory
func DirectoryUpdateDTD(hc hubclient.IHubClient, tD string) (err error) {

	err = hc.Rpc(DirectoryDThingID, DirectoryUpdateDTDMethod, &tD, nil)
	return
}

// IDirectoryService defines the interface of the 'Directory' service
//
// This defines a method for each of the actions in the TD.
type IDirectoryService interface {

	// QueryDTDs Query DTDs
	// Query digital twin TD documents from the directory
	// This returns a list of JSON encoded TD documents
	QueryDTDs(senderID string, args DirectoryQueryDTDsArgs) (tDdocuments []string, err error)

	// ReadAllDTDs Read all TDs
	// Read a batch of TD documents
	// This returns a list of JSON encoded TD documents
	ReadAllDTDs(senderID string, args DirectoryReadAllDTDsArgs) (tDlist []string, err error)

	// ReadDTD Read TD
	// Return a JSON encoded TD document
	// This returns a a JSON encoded Thing Description Document
	ReadDTD(senderID string, thingID string) (tD string, err error)

	// RemoveDTD Remove TD
	// Remove a digital twin from the directory
	RemoveDTD(senderID string, dThingID string) error

	// UpdateDTD Update DTD
	// Update the Digital twin TD in the directory
	UpdateDTD(senderID string, tD string) error
}

// NewHandleDirectoryAction returns a server handler for Thing 'dtw:digitwin:directory' actions.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
//
// This returns the marshalled response data or an error.
func NewHandleDirectoryAction(svc IDirectoryService) func(consumerID, dThingID, name string, input any, messageID string) (string, any, error) {
	return func(consumerID, dThingID, actionName string, input any, messageID string) (string, any, error) {
		var err error
		var status string = "completed"
		var output any
		switch actionName {
		case "readAllDTDs":
			args := DirectoryReadAllDTDsArgs{}
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				output, err = svc.ReadAllDTDs(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "removeDTD":
			var args string
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				err = svc.RemoveDTD(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "queryDTDs":
			args := DirectoryQueryDTDsArgs{}
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				output, err = svc.QueryDTDs(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "updateDTD":
			var args string
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				err = svc.UpdateDTD(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "readDTD":
			var args string
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				output, err = svc.ReadDTD(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		default:
			err = errors.New("Unknown Method '" + actionName + "' of service '" + dThingID + "'")
			status = "failed"
		}
		return status, output, err
	}
}

// DirectoryTD contains the raw TD of this service for publication to the Hub
const DirectoryTD = `{"@context":["https://www.w3.org/2022/wot/td/v1.1",{"ht":"https://www.hiveot.net/vocab/v0.1"}],"@type":"Service","created":"2024-04-21T17:00:00.000Z","description":"HiveOT digital twin directory service","id":"directory","modified":"2024-04-21T17:00:00.000Z","support":"https://www.github.com/hiveot/hub","title":"DigiTwin Directory Service","actions":{"queryDTDs":{"@type":"ht:function","title":"Query DTDs","description":"Query digital twin TD documents from the directory","input":{"readOnly":false,"type":"object","properties":{"limit":{"title":"Max entries","description":"Maximum number of entries to return","default":100,"readOnly":false,"type":"integer","minimum":1},"offset":{"title":"Result offset","description":"Number of results to skip","default":0,"readOnly":false,"type":"integer"},"query":{"title":"Query Things","description":"JSON Query expression (tbd)","readOnly":false,"type":"string"}}},"output":{"title":"TD documents","description":"List of JSON encoded TD documents","readOnly":false,"type":"array","items":{"readOnly":false,"type":"string"}},"idempotent":true},"readAllDTDs":{"@type":"ht:function","title":"Read all TDs","description":"Read a batch of TD documents","input":{"readOnly":false,"type":"object","properties":{"limit":{"title":"Limit","description":"Maximum number of documents to return","default":100,"readOnly":false,"type":"integer","minimum":1},"offset":{"title":"Offset","description":"Start index in the list of TD documents","default":0,"readOnly":false,"type":"integer"}}},"output":{"title":"TD list","description":"List of JSON encoded TD documents","readOnly":false,"type":"array","items":{"readOnly":false,"type":"string"}},"safe":true,"idempotent":true},"readDTD":{"@type":"ht:function","title":"Read TD","description":"Return a JSON encoded TD document","input":{"title":"Thing ID","description":"Digital Twin Thing ID of the Thing to read","readOnly":false,"type":"string"},"output":{"title":"TD","description":"A JSON encoded Thing Description Document","readOnly":false,"type":"string"},"safe":true,"idempotent":true},"removeDTD":{"@type":"ht:function","title":"Remove TD","description":"Remove a digital twin from the directory","input":{"title":"dThing ID","description":"Digital Twin Thing ID of the Thing to remove","readOnly":false,"type":"string"},"idempotent":true},"updateDTD":{"@type":"ht:function","title":"Update DTD","description":"Update the Digital twin TD in the directory","input":{"title":"TD","description":"Device TD document in JSON format","readOnly":false,"type":"string"},"idempotent":true}},"events":{"thingRemoved":{"title":"Thing Removed","description":"A Thing TD was removed from the directory","data":{"title":"thingID","description":"ID of the Thing that was removed","readOnly":false,"type":"string"}},"thingUpdated":{"title":"Thing Updated","description":"A digital twin Thing TD was updated in the directory","data":{"title":"TD","description":"JSON encoded TD of the Thing that updated","readOnly":false,"type":"string"}}},"security":["bearer"],"securityDefinitions":{"bearer":{"description":"HTTP protocol authentication","scheme":"bearer","name":"authentication","alg":"es256","format":"jwt","in":"header"}}}`
