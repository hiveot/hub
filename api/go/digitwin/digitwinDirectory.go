// Package digitwin with types and interfaces for using this service with agent 'digitwin'
// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.
// Generated 14 Jul 24 20:51 PDT.
package digitwin

import "errors"
import "github.com/hiveot/hub/lib/things"
import "github.com/hiveot/hub/lib/hubclient"

// DirectoryAgentID is the connection ID of the agent managing the Thing.
const DirectoryAgentID = "digitwin"

// DirectoryServiceID is the internal thingID of the device/service as used by agents.
// Agents use this to publish events and subscribe to actions
const DirectoryServiceID = "directory"

// DirectoryDThingID is the Digitwin thingID as used by agents. Digitwin adds the dtw:{agent} prefix to the serviceID
// Consumers use this to publish actions and subscribe to events
const DirectoryDThingID = "dtw:digitwin:directory"

//--- Argument and Response struct for action of Thing 'dtw:digitwin:directory' ---

const DirectoryQueryTDsMethod = "queryTDs"

// DirectoryQueryTDsArgs defines the arguments of the queryTDs function
// Query TDs - Query Thing TD documents from the directory
type DirectoryQueryTDsArgs struct {

	// Limit with Max entries
	//
	// Maximum number of entries to return
	Limit int `json:"limit,omitempty"`

	// Offset with Result offset
	//
	// Number of results to skip
	Offset int `json:"offset,omitempty"`

	// Query with Query Things
	//
	// Query expression (tbd)
	Query string `json:"query,omitempty"`
}

const DirectoryReadTDMethod = "readTD"

const DirectoryReadTDsMethod = "readTDs"

// DirectoryReadTDsArgs defines the arguments of the readTDs function
// Read TDs - Read a batch of TD documents
type DirectoryReadTDsArgs struct {

	// Limit with Limit
	Limit int `json:"limit,omitempty"`

	// Offset with Offset
	Offset int `json:"offset,omitempty"`
}

const DirectoryRemoveTDMethod = "removeTD"

const DirectoryUpdateTDMethod = "updateTD"

// DirectoryQueryTDs client method - Query TDs.
// Query Thing TD documents from the directory
func DirectoryQueryTDs(hc hubclient.IHubClient, limit int, offset int, query string) (tDDList []string, err error) {
	var args = DirectoryQueryTDsArgs{limit, offset, query}
	err = hc.Rpc(DirectoryDThingID, DirectoryQueryTDsMethod, &args, &tDDList)
	return
}

// DirectoryReadTD client method - Read TD.
// This returns a JSON encoded TD document
func DirectoryReadTD(hc hubclient.IHubClient, thingID string) (tD string, err error) {

	err = hc.Rpc(DirectoryDThingID, DirectoryReadTDMethod, &thingID, &tD)
	return
}

// DirectoryReadTDs client method - Read TDs.
// Read a batch of TD documents
func DirectoryReadTDs(hc hubclient.IHubClient, limit int, offset int) (tDlist []string, err error) {
	var args = DirectoryReadTDsArgs{limit, offset}
	err = hc.Rpc(DirectoryDThingID, DirectoryReadTDsMethod, &args, &tDlist)
	return
}

// DirectoryRemoveTD client method - Remove TD.
// Remove a Thing TD document from the digital twin directory and value stores
func DirectoryRemoveTD(hc hubclient.IHubClient, thingID string) (err error) {

	err = hc.Rpc(DirectoryDThingID, DirectoryRemoveTDMethod, &thingID, nil)
	return
}

// DirectoryUpdateTD client method - Update TD.
// Update the TD in the directory
func DirectoryUpdateTD(hc hubclient.IHubClient, tD string) (err error) {

	err = hc.Rpc(DirectoryDThingID, DirectoryUpdateTDMethod, &tD, nil)
	return
}

// IDirectoryService defines the interface of the 'Directory' service
//
// This defines a method for each of the actions in the TD.
type IDirectoryService interface {

	// QueryTDs Query TDs
	// Query Thing TD documents from the directory
	// This returns a list of JSON encoded TD documents
	QueryTDs(senderID string, args DirectoryQueryTDsArgs) (tDDList []string, err error)

	// ReadTD Read TD
	// This returns a JSON encoded TD document
	// This returns a a JSON encoded Thing Description Document
	ReadTD(senderID string, thingID string) (tD string, err error)

	// ReadTDs Read TDs
	// Read a batch of TD documents
	// This returns a list of JSON encoded TD documents
	ReadTDs(senderID string, args DirectoryReadTDsArgs) (tDlist []string, err error)

	// RemoveTD Remove TD
	// Remove a Thing TD document from the digital twin directory and value stores
	RemoveTD(senderID string, thingID string) error

	// UpdateTD Update TD
	// Update the TD in the directory
	UpdateTD(senderID string, tD string) error
}

// NewDirectoryHandler returns a server handler for Thing 'dtw:digitwin:directory' actions.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
//
// This returns the marshalled response data or an error.
func NewDirectoryHandler(svc IDirectoryService) func(*things.ThingMessage) hubclient.DeliveryStatus {
	return func(msg *things.ThingMessage) (stat hubclient.DeliveryStatus) {
		var err error
		var resp interface{}
		var senderID = msg.SenderID
		switch msg.Key {
		case "updateTD":
			var args string
			err = msg.Decode(&args)
			if err == nil {
				err = svc.UpdateTD(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "readTD":
			var args string
			err = msg.Decode(&args)
			if err == nil {
				resp, err = svc.ReadTD(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "readTDs":
			args := DirectoryReadTDsArgs{}
			err = msg.Decode(&args)
			if err == nil {
				resp, err = svc.ReadTDs(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "removeTD":
			var args string
			err = msg.Decode(&args)
			if err == nil {
				err = svc.RemoveTD(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "queryTDs":
			args := DirectoryQueryTDsArgs{}
			err = msg.Decode(&args)
			if err == nil {
				resp, err = svc.QueryTDs(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		default:
			err = errors.New("Unknown Method '" + msg.Key + "' of service '" + msg.ThingID + "'")
			stat.DeliveryFailed(msg, err)
		}
		stat.Completed(msg, resp, err)
		return stat
	}
}
