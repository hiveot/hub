// Package digitwin with types and interfaces for using this service with agent 'digitwin'
// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.
// Generated 19 Jul 24 19:42 PDT.
package digitwin

import "errors"
import "github.com/hiveot/hub/lib/things"
import "github.com/hiveot/hub/lib/hubclient"

// InboxAgentID is the connection ID of the agent managing the Thing.
const InboxAgentID = "digitwin"

// InboxServiceID is the internal thingID of the device/service as used by agents.
// Agents use this to publish events and subscribe to actions
const InboxServiceID = "inbox"

// InboxDThingID is the Digitwin thingID as used by agents. Digitwin adds the dtw:{agent} prefix to the serviceID
// Consumers use this to publish actions and subscribe to events
const InboxDThingID = "dtw:digitwin:inbox"

//--- Schema definitions of Thing 'dtw:digitwin:inbox' ---

// InboxRecord defines a Inbox Record data schema of the digitwin agent.
//
// Record of action request and delivery progress
type InboxRecord struct {

	// Delivered with Delivered Timestamp
	//
	// DateTime in RFC3339milli the action was delivered to the device agent
	Delivered string `json:"delivered,omitempty"`

	// Error with
	//
	// Error if the request could not be completed
	Error string `json:"error,omitempty"`

	// Input with Action Input
	//
	// Action input parameters
	Input any `json:"input,omitempty"`

	// Key with
	//
	// Action key to invoke
	Key string `json:"key,omitempty"`

	// MessageID with
	//
	// Message ID linking requests and delivery updates
	MessageID string `json:"messageID,omitempty"`

	// MessageType with
	//
	// Message action types
	MessageType string `json:"messageType,omitempty"`

	// Progress with
	//
	// Delivery progress
	Progress string `json:"progress,omitempty"`

	// Received with Received Timestamp
	//
	// DateTime in RFC3339milli the action was received by the inbox
	Received string `json:"received,omitempty"`

	// SenderID with
	//
	// Connection ID of the sender. Used to send delivery updates.
	SenderID string `json:"senderID,omitempty"`

	// ThingID with
	//
	// Digitwin Thing ID the action is directed at
	ThingID string `json:"thingID,omitempty"`

	// Timestamp with Timestamp of creation
	//
	// Timestamp in milliseconds since epoch this record was created
	Timestamp int `json:"timestamp,omitempty"`

	// Updated with Updated Timestamp
	//
	// DateTime in RFC3339milli the delivery status was last updated
	Updated string `json:"updated,omitempty"`
}

//--- Argument and Response struct for action of Thing 'dtw:digitwin:inbox' ---

const InboxReadLatestMethod = "readLatest"

// InboxReadLatestArgs defines the arguments of the readLatest function
// Read Latest - Read the latest Thing action record from the inbox
type InboxReadLatestArgs struct {

	// Key with Value Key
	//
	// The action key to read
	Key string `json:"key,omitempty"`

	// ThingID with Thing ID
	//
	// ID of the Thing to read
	ThingID string `json:"thingID,omitempty"`
}

// InboxReadLatestResp defines the response of the readLatest function
// Read Latest - Read the latest Thing action record from the inbox
//
// Action records
type InboxReadLatestResp InboxRecord

// InboxReadLatest client method - Read Latest.
// Read the latest Thing action record from the inbox
func InboxReadLatest(hc hubclient.IHubClient, key string, thingID string) (inboxRecord InboxRecord, err error) {
	var args = InboxReadLatestArgs{key, thingID}
	err = hc.Rpc(InboxDThingID, InboxReadLatestMethod, &args, &inboxRecord)
	return
}

// IInboxService defines the interface of the 'Inbox' service
//
// This defines a method for each of the actions in the TD.
type IInboxService interface {

	// ReadLatest Read Latest
	// Read the latest Thing action record from the inbox
	// This returns a action records
	ReadLatest(senderID string, args InboxReadLatestArgs) (inboxRecord InboxRecord, err error)
}

// NewInboxHandler returns a server handler for Thing 'dtw:digitwin:inbox' actions.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
//
// This returns the marshalled response data or an error.
func NewInboxHandler(svc IInboxService) func(*things.ThingMessage) hubclient.DeliveryStatus {
	return func(msg *things.ThingMessage) (stat hubclient.DeliveryStatus) {
		var err error
		var resp interface{}
		var senderID = msg.SenderID
		switch msg.Key {
		case "readLatest":
			args := InboxReadLatestArgs{}
			err = msg.Decode(&args)
			if err == nil {
				resp, err = svc.ReadLatest(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		default:
			err = errors.New("Unknown Method '" + msg.Key + "' of service '" + msg.ThingID + "'")
			stat.DeliveryFailed(msg, err)
		}
		stat.Completed(msg, resp, err)
		return stat
	}
}
