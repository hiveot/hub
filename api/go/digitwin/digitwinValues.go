// Package digitwin with types and interfaces for using this service with agent 'digitwin'
// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.
// Generated 30 Nov 24 22:13 PST.
package digitwin

import "errors"
import "github.com/hiveot/hub/lib/utils"
import "github.com/hiveot/hub/lib/hubclient"

// ValuesAgentID is the account ID of the agent managing the Thing.
const ValuesAgentID = "digitwin"

// ValuesServiceID is the thingID of the device/service as used by agents.
// Agents use this to publish events and subscribe to actions
const ValuesServiceID = "values"

// ValuesDThingID is the Digitwin thingID as used by consumers. Digitwin adds the dtw:{agent} prefix to the serviceID
// Consumers use this to publish actions and subscribe to events
const ValuesDThingID = "dtw:digitwin:values"

// Thing names
const (
	ValuesEventProgress           = "progress"
	ValuesActionReadProperty      = "readProperty"
	ValuesActionQueryAction       = "queryAction"
	ValuesActionQueryAllActions   = "queryAllActions"
	ValuesActionReadAllEvents     = "readAllEvents"
	ValuesActionReadAllProperties = "readAllProperties"
	ValuesActionReadEvent         = "readEvent"
)

//--- Schema definitions of Thing 'dtw:digitwin:values' ---

// ActionValue defines a Action Value data schema of the digitwin agent.
//
// Input value of the last action
type ActionValue struct {

	// Input with Action input
	//
	// Action input value
	Input any `json:"input,omitempty"`

	// Name with Action name
	Name string `json:"name,omitempty"`

	// Output with Action output
	Output any `json:"output,omitempty"`

	// Progress with Action progress
	//
	// Status of the action's progress
	Progress string `json:"progress,omitempty"`

	// RequestID with Message ID
	//
	// Message ID of the action
	RequestID string `json:"requestID,omitempty"`

	// SenderID with Consumer ID
	SenderID string `json:"senderID,omitempty"`

	// Updated with Updated time
	//
	// Time the action was initiated
	Updated string `json:"updated,omitempty"`
}

// ThingValue defines a Thing Value data schema of the digitwin agent.
//
// Property or event value
type ThingValue struct {

	// Data with Payload
	//
	// Data in format as described by the thing's property affordance
	Data any `json:"data,omitempty"`

	// Name with Name
	//
	// Name of the property holding the value
	Name string `json:"name,omitempty"`

	// RequestID with Message ID
	//
	// link to property write or action that caused the value to change
	RequestID string `json:"requestID,omitempty"`

	// SenderID with Sender ID
	//
	// ID of the sender updating the value
	SenderID string `json:"senderID,omitempty"`

	// Updated with Updated time
	//
	// Time the value was last updated
	Updated string `json:"updated,omitempty"`
}

//--- Argument and Response struct for action of Thing 'dtw:digitwin:values' ---

const ValuesQueryActionMethod = "queryAction"

// ValuesQueryActionArgs defines the arguments of the queryAction function
// Action status - Read the current action status of a Thing
type ValuesQueryActionArgs struct {

	// Name with Action Name
	//
	// The action name to query
	Name string `json:"name,omitempty"`

	// ThingID with Thing ID
	//
	// ID of the Thing to query
	ThingID string `json:"thingID,omitempty"`
}

const ValuesQueryAllActionsMethod = "queryAllActions"

const ValuesReadAllEventsMethod = "readAllEvents"

const ValuesReadAllPropertiesMethod = "readAllProperties"

const ValuesReadEventMethod = "readEvent"

// ValuesReadEventArgs defines the arguments of the readEvent function
// Read event value - Read the latest event value of a Thing
type ValuesReadEventArgs struct {

	// Name with Event name
	//
	// Name of the event to read the latest values
	Name string `json:"name,omitempty"`

	// ThingID with Thing ID
	//
	// ID of the Thing to read
	ThingID string `json:"thingID,omitempty"`
}

const ValuesReadPropertyMethod = "readProperty"

// ValuesReadPropertyArgs defines the arguments of the readProperty function
// Read property value - Read the latest property value
type ValuesReadPropertyArgs struct {

	// Name with Property name
	//
	// The property name whose value to read
	Name string `json:"name,omitempty"`

	// ThingID with Thing ID
	//
	// ID of the Thing to read
	ThingID string `json:"thingID,omitempty"`
}

// ValuesQueryAction client method - Action status.
// Read the current action status of a Thing
func ValuesQueryAction(hc transports.IConsumer, name string, thingID string) (actionvalue ActionValue, err error) {
	var args = ValuesQueryActionArgs{name, thingID}
	err = hc.Rpc(ValuesDThingID, ValuesQueryActionMethod, &args, &actionvalue)
	return
}

// ValuesQueryAllActions client method - All actions.
// Read the current status for all actions of a Thing
func ValuesQueryAllActions(hc transports.IConsumer, thingID string) (actionvalues []ActionValue, err error) {

	err = hc.Rpc(ValuesDThingID, ValuesQueryAllActionsMethod, &thingID, &actionvalues)
	return
}

// ValuesReadAllEvents client method - Read all event values.
// Read the latest known event values of a Thing
func ValuesReadAllEvents(hc transports.IConsumer, thingID string) (eventvalues []ThingValue, err error) {

	err = hc.Rpc(ValuesDThingID, ValuesReadAllEventsMethod, &thingID, &eventvalues)
	return
}

// ValuesReadAllProperties client method - Read all properties.
// Read the latest known property values
func ValuesReadAllProperties(hc transports.IConsumer, thingID string) (propertyvalues []ThingValue, err error) {

	err = hc.Rpc(ValuesDThingID, ValuesReadAllPropertiesMethod, &thingID, &propertyvalues)
	return
}

// ValuesReadEvent client method - Read event value.
// Read the latest event value of a Thing
func ValuesReadEvent(hc transports.IConsumer, name string, thingID string) (eventvalue ThingValue, err error) {
	var args = ValuesReadEventArgs{name, thingID}
	err = hc.Rpc(ValuesDThingID, ValuesReadEventMethod, &args, &eventvalue)
	return
}

// ValuesReadProperty client method - Read property value.
// Read the latest property value
func ValuesReadProperty(hc transports.IConsumer, name string, thingID string) (propertyvalue ThingValue, err error) {
	var args = ValuesReadPropertyArgs{name, thingID}
	err = hc.Rpc(ValuesDThingID, ValuesReadPropertyMethod, &args, &propertyvalue)
	return
}

// IValuesService defines the interface of the 'Values' service
//
// This defines a method for each of the actions in the TD.
type IValuesService interface {

	// QueryAction Action status
	// Read the current action status of a Thing
	// This returns a the latest action value
	QueryAction(senderID string, args ValuesQueryActionArgs) (actionvalue ActionValue, err error)

	// QueryAllActions All actions
	// Read the current status for all actions of a Thing
	// This returns a list with the latest known action value for all actions
	QueryAllActions(senderID string, thingID string) (actionvalues []ActionValue, err error)

	// ReadAllEvents Read all event values
	// Read the latest known event values of a Thing
	// This returns a list with the most recent event value objects
	ReadAllEvents(senderID string, thingID string) (eventvalues []ThingValue, err error)

	// ReadAllProperties Read all properties
	// Read the latest known property values
	// This returns a list of ThingValue objects
	ReadAllProperties(senderID string, thingID string) (propertyvalues []ThingValue, err error)

	// ReadEvent Read event value
	// Read the latest event value of a Thing
	// This returns a most recent event value
	ReadEvent(senderID string, args ValuesReadEventArgs) (eventvalue ThingValue, err error)

	// ReadProperty Read property value
	// Read the latest property value
	// This returns a most recent property value
	ReadProperty(senderID string, args ValuesReadPropertyArgs) (propertyvalue ThingValue, err error)
}

// NewHandleValuesAction returns a server handler for Thing 'dtw:digitwin:values' actions.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
//
// This returns the marshalled response data or an error.
func NewHandleValuesAction(svc IValuesService) func(msg *transports.ThingMessage) transports.RequestStatus {
	return func(msg *transports.ThingMessage) (stat transports.RequestStatus) {
		var err error
		stat.Completed(msg, nil, nil)
		var output any
		switch msg.Name {
		case "readAllProperties":
			var args string
			err = utils.DecodeAsObject(msg.Data, &args)
			if err == nil {
				output, err = svc.ReadAllProperties(msg.SenderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "readEvent":
			args := ValuesReadEventArgs{}
			err = utils.DecodeAsObject(msg.Data, &args)
			if err == nil {
				output, err = svc.ReadEvent(msg.SenderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "readProperty":
			args := ValuesReadPropertyArgs{}
			err = utils.DecodeAsObject(msg.Data, &args)
			if err == nil {
				output, err = svc.ReadProperty(msg.SenderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "queryAction":
			args := ValuesQueryActionArgs{}
			err = utils.DecodeAsObject(msg.Data, &args)
			if err == nil {
				output, err = svc.QueryAction(msg.SenderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "queryAllActions":
			var args string
			err = utils.DecodeAsObject(msg.Data, &args)
			if err == nil {
				output, err = svc.QueryAllActions(msg.SenderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "readAllEvents":
			var args string
			err = utils.DecodeAsObject(msg.Data, &args)
			if err == nil {
				output, err = svc.ReadAllEvents(msg.SenderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		default:
			err = errors.New("Unknown Method '" + msg.Name + "' of service '" + msg.ThingID + "'")
		}
		stat.Completed(msg, output, err)
		return stat
	}
}

// ValuesTD contains the raw TD of this service for publication to the Hub
const ValuesTD = `{"actions":{"queryAction":{"@type":"hiveot:function","description":"Read the current action status of a Thing","title":"Action status","idempotent":true,"input":{"readOnly":false,"type":"object","properties":{"name":{"title":"Action Name","description":"The action name to query","readOnly":false,"type":"string"},"thingID":{"title":"Thing ID","description":"ID of the Thing to query","readOnly":false,"type":"string"}},"required":["thingID","name"]},"output":{"title":"Action value","description":"The latest action value","readOnly":false,"type":"ActionValue"},"safe":true},"queryAllActions":{"@type":"hiveot:function","description":"Read the current status for all actions of a Thing","title":"All actions","idempotent":true,"input":{"title":"Thing ID","description":"ID of the Thing to query","readOnly":false,"type":"string"},"output":{"title":"Action values","description":"List with the latest known action value for all actions","readOnly":false,"type":"array","items":{"readOnly":false,"type":"ActionValue"}},"safe":true},"readAllEvents":{"@type":"hiveot:function","description":"Read the latest known event values of a Thing","title":"Read all event values","idempotent":true,"input":{"title":"Thing ID","description":"ID of the Thing to read","readOnly":false,"type":"string"},"output":{"title":"Event values","description":"List with the most recent event value objects","readOnly":false,"type":"array","items":{"title":"Event value","readOnly":false,"type":"ThingValue"}},"safe":true},"readAllProperties":{"@type":"hiveot:function","description":"Read the latest known property values","title":"Read all properties","idempotent":true,"input":{"title":"Thing ID","description":"Digital twin ID of the Thing to read","readOnly":false,"type":"string"},"output":{"title":"Property values","description":"List of ThingValue objects","readOnly":false,"type":"array","items":{"title":"Property Value","readOnly":false,"type":"ThingValue"}},"safe":true},"readEvent":{"@type":"hiveot:function","description":"Read the latest event value of a Thing","title":"Read event value","idempotent":true,"input":{"readOnly":false,"type":"object","properties":{"name":{"title":"Event name","description":"Name of the event to read the latest values","readOnly":false,"type":"string"},"thingID":{"title":"Thing ID","description":"ID of the Thing to read","readOnly":false,"type":"string"}},"required":["thingID","name"]},"output":{"title":"Event value","description":"Most recent event value","readOnly":false,"type":"ThingValue"},"safe":true},"readProperty":{"@type":"hiveot:function","description":"Read the latest property value","title":"Read property value","idempotent":true,"input":{"readOnly":false,"type":"object","properties":{"name":{"title":"Property name","description":"The property name whose value to read","readOnly":false,"type":"string"},"thingID":{"title":"Thing ID","description":"ID of the Thing to read","readOnly":false,"type":"string"}},"required":["thingID","name"]},"output":{"title":"Property value","description":"Most recent property value","readOnly":false,"type":"ThingValue"},"safe":true}},"@context":["https://www.w3.org/2022/wot/td/v1.1",{"ht":"https://www.hiveot.net/vocab/v0.1"}],"@type":"Service","created":"2024-10-04T17:00:00.000Z","deny":["none"],"description":"Last known property, event and action values","events":{"progress":{"description":"Progress notification of a property write or thing action request","title":"Progress","data":{"readOnly":false,"type":"object","properties":{"data":{"title":"Data","description":"Input value in format as described by the thing's property affordance","readOnly":false,"type":"any"},"id":{"title":"Thing ID","description":"Thing ID of thing whose value is updated","readOnly":false,"type":"string"},"messageType":{"title":"Message Type","description":"Type of change request","enum":["action","property"],"readOnly":false,"type":"string"},"name":{"title":"Property name","description":"Name of the property or action the notification applies to","readOnly":false,"type":"string"},"requestID":{"title":"Message ID","description":"link to action or property write that triggered the update","readOnly":false,"type":"string"},"senderID":{"title":"Sender ID","description":"ID of the sender of the request","readOnly":false,"type":"string"},"status":{"title":"Progress status","description":"The new status of the update progress.","readOnly":false,"type":"string"},"statusInfo":{"title":"Additional status information","readOnly":false,"type":"string"}}}}},"id":"values","modified":"2024-10-04T17:00:00.000Z","properties":null,"schemaDefinitions":{"ActionValue":{"title":"Action Value","description":"Input value of the last action","readOnly":false,"type":"object","properties":{"input":{"title":"Action input","description":"Action input value","readOnly":false,"type":"any"},"name":{"title":"Action name","readOnly":false,"type":"string"},"output":{"title":"Action output","readOnly":false,"type":"any"},"progress":{"title":"Action progress","description":"Status of the action's progress","readOnly":false,"type":"string"},"requestID":{"title":"Message ID","description":"Message ID of the action","readOnly":false,"type":"string"},"senderID":{"title":"Consumer ID","readOnly":false,"type":"string"},"updated":{"title":"Updated time","description":"Time the action was initiated","readOnly":false,"type":"dateTime"}}},"ThingValue":{"title":"Thing Value","description":"Property or event value","readOnly":false,"type":"object","properties":{"data":{"title":"Payload","description":"Data in format as described by the thing's property affordance","readOnly":false,"type":"any"},"name":{"title":"Name","description":"Name of the property holding the value","readOnly":false,"type":"string"},"requestID":{"title":"Message ID","description":"link to property write or action that caused the value to change","readOnly":false,"type":"string"},"senderID":{"title":"Sender ID","description":"ID of the sender updating the value","readOnly":false,"type":"string"},"updated":{"title":"Updated time","description":"Time the value was last updated","readOnly":false,"type":"dateTime"}}}},"security":["bearer"],"securityDefinitions":{"bearer":{"description":"HTTP protocol authentication","scheme":"bearer","name":"authentication","alg":"es256","format":"jwt","in":"header"}},"title":"DigiTwin Values","support":"https://www.github.com/hiveot/hub"}`
