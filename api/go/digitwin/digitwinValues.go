// Package digitwin with types and interfaces for using this service with agent 'digitwin'
// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.
// Generated 29 Dec 24 17:28 PST. 
package digitwin

import "errors"
import "github.com/hiveot/hub/transports/tputils"
import "github.com/hiveot/hub/transports"

// ValuesAgentID is the account ID of the agent managing the Thing.
const ValuesAgentID = "digitwin"

// ValuesServiceID is the thingID of the device/service as used by agents.
// Agents use this to publish events and subscribe to actions
const ValuesServiceID = "values"

// ValuesDThingID is the Digitwin thingID as used by consumers. Digitwin adds the dtw:{agent} prefix to the serviceID
// Consumers use this to publish actions and subscribe to events
const ValuesDThingID = "dtw:digitwin:values"

// Thing names
const (
    ValuesEventProgress = "progress"
    ValuesActionReadEvent = "readEvent"
    ValuesActionReadProperty = "readProperty"
    ValuesActionQueryAction = "queryAction"
    ValuesActionReadAllEvents = "readAllEvents"
    ValuesActionReadAllProperties = "readAllProperties"
)

//--- Schema definitions of Thing 'dtw:digitwin:values' ---

// ActionStatus defines a Action Status data schema of the digitwin agent.
//
// Status of the last action
type ActionStatus struct {
    
    // AgentID with Agent ID
    //
    // The agent handling the action
    AgentID string `json:"agentID,omitempty"`
    
    // Error with Error
    //
    // Action error info when failed
    Error string `json:"error,omitempty"`
    
    // Input with Action input
    //
    // Action input value
    Input any `json:"input,omitempty"`
    
    // Name with Action name
    //
    // name of the action or property
    Name string `json:"name,omitempty"`
    
    // Output with Action output
    Output any `json:"output,omitempty"`
    
    // RequestID with Request ID
    //
    // The action request identifier
    RequestID string `json:"requestID,omitempty"`
    
    // SenderID with Consumer ID
    SenderID string `json:"senderID,omitempty"`
    
    // Status with Action status
    //
    // Status of the action's progress
    Status string `json:"status,omitempty"`
    
    // ThingID with Action Thing
    //
    // Digital twin ThingID the action applies to
    ThingID string `json:"thingID,omitempty"`
    
    // TimeEnded with End Time
    //
    // Time the action has completed or failed
    TimeEnded string `json:"timeEnded,omitempty"`
    
    // TimeRequested with Creation Time
    //
    // Time the action was initially requested
    TimeRequested string `json:"timeRequested,omitempty"`
    
    // TimeUpdated with Updated time
    //
    // Time the action status was last updated
    TimeUpdated string `json:"timeUpdated,omitempty"`
}

// ThingValue defines a Thing Value data schema of the digitwin agent.
//
// Property or event value
type ThingValue struct {
    
    // Data with Payload
    //
    // Data in format as described by the thing's property affordance
    Data any `json:"data,omitempty"`
    
    // Name with Name
    //
    // Name of the property holding the value
    Name string `json:"name,omitempty"`
    
    // RequestID with Message ID
    //
    // link to property write or action that caused the value to change
    RequestID string `json:"requestID,omitempty"`
    
    // SenderID with Sender ID
    //
    // ID of the sender updating the value
    SenderID string `json:"senderID,omitempty"`
    
    // Updated with Updated time
    //
    // Time the value was last updated
    Updated string `json:"updated,omitempty"`
}

//--- Argument and Response struct for action of Thing 'dtw:digitwin:values' ---

const ValuesQueryActionMethod = "queryAction"

// ValuesQueryActionArgs defines the arguments of the queryAction function
// Action status - Read the current action status of a Thing
type ValuesQueryActionArgs struct {
    
    // Name with Action Name
    //
    // The action name to query
    Name string `json:"name,omitempty"`
    
    // ThingID with Thing ID
    //
    // ID of the Thing to query
    ThingID string `json:"thingID,omitempty"`
}

const ValuesReadAllEventsMethod = "readAllEvents"

const ValuesReadAllPropertiesMethod = "readAllProperties"

const ValuesReadEventMethod = "readEvent"

// ValuesReadEventArgs defines the arguments of the readEvent function
// Read event value - Read the latest event value of a Thing
type ValuesReadEventArgs struct {
    
    // Name with Event name
    //
    // Name of the event to read the latest values
    Name string `json:"name,omitempty"`
    
    // ThingID with Thing ID
    //
    // ID of the Thing to read
    ThingID string `json:"thingID,omitempty"`
}

const ValuesReadPropertyMethod = "readProperty"

// ValuesReadPropertyArgs defines the arguments of the readProperty function
// Read property value - Read the latest property value
type ValuesReadPropertyArgs struct {
    
    // Name with Property name
    //
    // The property name whose value to read
    Name string `json:"name,omitempty"`
    
    // ThingID with Thing ID
    //
    // ID of the Thing to read
    ThingID string `json:"thingID,omitempty"`
}


// ValuesQueryAction client method - Action status.
// Read the current action status of a Thing
func ValuesQueryAction(hc transports.IConsumerConnection, name string, thingID string)(actionvalue ActionStatus, err error){
    var args = ValuesQueryActionArgs{name, thingID}
    err = hc.Rpc("invokeaction", ValuesDThingID, ValuesQueryActionMethod, &args, &actionvalue)
    return
}

// ValuesReadAllEvents client method - Read all event values.
// Read the latest known event values of a Thing
func ValuesReadAllEvents(hc transports.IConsumerConnection, thingID string)(eventvalues []ThingValue, err error){
    
    err = hc.Rpc("invokeaction", ValuesDThingID, ValuesReadAllEventsMethod, &thingID, &eventvalues)
    return
}

// ValuesReadAllProperties client method - Read all properties.
// Read the latest known property values
func ValuesReadAllProperties(hc transports.IConsumerConnection, thingID string)(propertyvalues []ThingValue, err error){
    
    err = hc.Rpc("invokeaction", ValuesDThingID, ValuesReadAllPropertiesMethod, &thingID, &propertyvalues)
    return
}

// ValuesReadEvent client method - Read event value.
// Read the latest event value of a Thing
func ValuesReadEvent(hc transports.IConsumerConnection, name string, thingID string)(eventvalue ThingValue, err error){
    var args = ValuesReadEventArgs{name, thingID}
    err = hc.Rpc("invokeaction", ValuesDThingID, ValuesReadEventMethod, &args, &eventvalue)
    return
}

// ValuesReadProperty client method - Read property value.
// Read the latest property value
func ValuesReadProperty(hc transports.IConsumerConnection, name string, thingID string)(propertyvalue ThingValue, err error){
    var args = ValuesReadPropertyArgs{name, thingID}
    err = hc.Rpc("invokeaction", ValuesDThingID, ValuesReadPropertyMethod, &args, &propertyvalue)
    return
}


// IValuesService defines the interface of the 'Values' service
//
// This defines a method for each of the actions in the TD. 
// 
type IValuesService interface {

   // QueryAction Action status
   // Read the current action status of a Thing
   // This returns a the latest action value
   QueryAction(senderID string, args ValuesQueryActionArgs) (actionvalue ActionStatus, err error)

   // ReadAllEvents Read all event values
   // Read the latest known event values of a Thing
   // This returns a list with the most recent event value objects
   ReadAllEvents(senderID string, thingID string) (eventvalues []ThingValue, err error)

   // ReadAllProperties Read all properties
   // Read the latest known property values
   // This returns a list of ThingValue objects
   ReadAllProperties(senderID string, thingID string) (propertyvalues []ThingValue, err error)

   // ReadEvent Read event value
   // Read the latest event value of a Thing
   // This returns a most recent event value
   ReadEvent(senderID string, args ValuesReadEventArgs) (eventvalue ThingValue, err error)

   // ReadProperty Read property value
   // Read the latest property value
   // This returns a most recent property value
   ReadProperty(senderID string, args ValuesReadPropertyArgs) (propertyvalue ThingValue, err error)
}

// NewHandleValuesAction returns an agent handler for Thing 'dtw:digitwin:values' actions.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
// 
// This returns the marshalled response data or an error.
func NewHandleValuesAction(svc IValuesService)(func(msg transports.RequestMessage) transports.ResponseMessage) {
    return func(msg transports.RequestMessage) transports.ResponseMessage {
        var output any
        var err error
        switch msg.Name {
            case "queryAction":
                args := ValuesQueryActionArgs{}
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.QueryAction(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "readAllEvents":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.ReadAllEvents(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "readAllProperties":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.ReadAllProperties(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "readEvent":
                args := ValuesReadEventArgs{}
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.ReadEvent(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "readProperty":
                args := ValuesReadPropertyArgs{}
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.ReadProperty(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            default:
            	err = errors.New("Unknown Method '"+msg.Name+"' of service '"+msg.ThingID+"'")
        }
        return msg.CreateResponse(output,err)
    }
}

// ValuesTD contains the raw TD of this service for publication to the Hub
const ValuesTD = `{"actions":{"queryAction":{"@type":"hiveot:function","description":"Read the current action status of a Thing","title":"Action status","idempotent":true,"input":{"readOnly":false,"type":"object","properties":{"name":{"title":"Action Name","description":"The action name to query","readOnly":false,"type":"string"},"thingID":{"title":"Thing ID","description":"ID of the Thing to query","readOnly":false,"type":"string"}},"required":["thingID","name"]},"output":{"title":"Action value","description":"The latest action value","readOnly":false,"type":"ActionStatus"},"safe":true},"readAllEvents":{"@type":"hiveot:function","description":"Read the latest known event values of a Thing","title":"Read all event values","idempotent":true,"input":{"title":"Thing ID","description":"ID of the Thing to read","readOnly":false,"type":"string"},"output":{"title":"Event values","description":"List with the most recent event value objects","readOnly":false,"type":"array","items":{"title":"Event value","readOnly":false,"type":"ThingValue"}},"safe":true},"readAllProperties":{"@type":"hiveot:function","description":"Read the latest known property values","title":"Read all properties","idempotent":true,"input":{"title":"Thing ID","description":"Digital twin ID of the Thing to read","readOnly":false,"type":"string"},"output":{"title":"Property values","description":"List of ThingValue objects","readOnly":false,"type":"array","items":{"title":"Property Value","readOnly":false,"type":"ThingValue"}},"safe":true},"readEvent":{"@type":"hiveot:function","description":"Read the latest event value of a Thing","title":"Read event value","idempotent":true,"input":{"readOnly":false,"type":"object","properties":{"name":{"title":"Event name","description":"Name of the event to read the latest values","readOnly":false,"type":"string"},"thingID":{"title":"Thing ID","description":"ID of the Thing to read","readOnly":false,"type":"string"}},"required":["thingID","name"]},"output":{"title":"Event value","description":"Most recent event value","readOnly":false,"type":"ThingValue"},"safe":true},"readProperty":{"@type":"hiveot:function","description":"Read the latest property value","title":"Read property value","idempotent":true,"input":{"readOnly":false,"type":"object","properties":{"name":{"title":"Property name","description":"The property name whose value to read","readOnly":false,"type":"string"},"thingID":{"title":"Thing ID","description":"ID of the Thing to read","readOnly":false,"type":"string"}},"required":["thingID","name"]},"output":{"title":"Property value","description":"Most recent property value","readOnly":false,"type":"ThingValue"},"safe":true}},"@context":["https://www.w3.org/2022/wot/td/v1.1",{"ht":"https://www.hiveot.net/vocab/v0.1"}],"@type":"Service","created":"2024-10-04T17:00:00.000Z","deny":["none"],"description":"Last known property, event and action values","events":{"progress":{"description":"Progress notification of a property write or thing action request","title":"Progress","data":{"readOnly":false,"type":"object","properties":{"data":{"title":"Data","description":"Input value in format as described by the thing's property affordance","readOnly":false,"type":"any"},"id":{"title":"Thing ID","description":"Thing ID of thing whose value is updated","readOnly":false,"type":"string"},"messageType":{"title":"Message Type","description":"Type of change request","enum":["action","property"],"readOnly":false,"type":"string"},"name":{"title":"Property name","description":"Name of the property or action the notification applies to","readOnly":false,"type":"string"},"requestID":{"title":"Message ID","description":"link to action or property write that triggered the update","readOnly":false,"type":"string"},"senderID":{"title":"Sender ID","description":"ID of the sender of the request","readOnly":false,"type":"string"},"status":{"title":"Progress status","description":"The new status of the update progress.","readOnly":false,"type":"string"},"statusInfo":{"title":"Additional status information","readOnly":false,"type":"string"}}}}},"id":"values","modified":"2024-10-04T17:00:00.000Z","properties":null,"schemaDefinitions":{"ActionStatus":{"title":"Action Status","description":"Status of the last action","readOnly":false,"type":"object","properties":{"agentID":{"title":"Agent ID","description":"The agent handling the action","readOnly":false,"type":"string"},"error":{"title":"Error","description":"Action error info when failed","readOnly":false,"type":"string"},"input":{"title":"Action input","description":"Action input value","readOnly":false,"type":"any"},"name":{"title":"Action name","description":"name of the action or property","readOnly":false,"type":"string"},"output":{"title":"Action output","readOnly":false,"type":"any"},"requestID":{"title":"Request ID","description":"The action request identifier","readOnly":false,"type":"string"},"senderID":{"title":"Consumer ID","readOnly":false,"type":"string"},"status":{"title":"Action status","description":"Status of the action's progress","readOnly":false,"type":"string"},"thingID":{"title":"Action Thing","description":"Digital twin ThingID the action applies to","readOnly":false,"type":"string"},"timeEnded":{"title":"End Time","description":"Time the action has completed or failed","readOnly":false,"type":"dateTime"},"timeRequested":{"title":"Creation Time","description":"Time the action was initially requested","readOnly":false,"type":"dateTime"},"timeUpdated":{"title":"Updated time","description":"Time the action status was last updated","readOnly":false,"type":"dateTime"}}},"ThingValue":{"title":"Thing Value","description":"Property or event value","readOnly":false,"type":"object","properties":{"data":{"title":"Payload","description":"Data in format as described by the thing's property affordance","readOnly":false,"type":"any"},"name":{"title":"Name","description":"Name of the property holding the value","readOnly":false,"type":"string"},"requestID":{"title":"Message ID","description":"link to property write or action that caused the value to change","readOnly":false,"type":"string"},"senderID":{"title":"Sender ID","description":"ID of the sender updating the value","readOnly":false,"type":"string"},"updated":{"title":"Updated time","description":"Time the value was last updated","readOnly":false,"type":"dateTime"}}}},"security":["bearer"],"securityDefinitions":{"bearer":{"description":"HTTP protocol authentication","scheme":"bearer","name":"authentication","alg":"es256","format":"jwt","in":"header"}},"title":"DigiTwin Values","support":"https://www.github.com/hiveot/hub"}`