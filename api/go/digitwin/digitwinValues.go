// Package digitwin with types and interfaces for using this service with agent 'digitwin'
// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.
// Generated 04 Oct 24 23:11 PDT.
package digitwin

import "errors"
import "github.com/hiveot/hub/lib/utils"
import "github.com/hiveot/hub/lib/hubclient"

// ValuesAgentID is the connection ID of the agent managing the Thing.
const ValuesAgentID = "digitwin"

// ValuesServiceID is the internal thingID of the device/service as used by agents.
// Agents use this to publish events and subscribe to actions
const ValuesServiceID = "values"

// ValuesDThingID is the Digitwin thingID as used by agents. Digitwin adds the dtw:{agent} prefix to the serviceID
// Consumers use this to publish actions and subscribe to events
const ValuesDThingID = "dtw:digitwin:values"

//--- Schema definitions of Thing 'dtw:digitwin:values' ---

// ActionValue defines a Action Value data schema of the digitwin agent.
//
// Input value of the last action
type ActionValue struct {

	// Input with Action input
	//
	// Action input value
	Input any `json:"input,omitempty"`

	// MessageID with Message ID
	//
	// Message ID of the action
	MessageID string `json:"messageID,omitempty"`

	// Name with Action name
	Name string `json:"name,omitempty"`

	// Output with Action output
	Output any `json:"output,omitempty"`

	// SenderID with Consumer ID
	SenderID string `json:"senderID,omitempty"`

	// Status with Write progress
	//
	// The last write request progress
	Status string `json:"status,omitempty"`

	// Updated with Updated time
	//
	// Time the action was initiated
	Updated string `json:"updated,omitempty"`
}

// EventValue defines a Event Value data schema of the digitwin agent.
//
// Value and update data of an event
type EventValue struct {

	// Data with Event payload
	//
	// Data in format as described by the thing's affordance
	Data any `json:"data,omitempty"`

	// MessageID with Message ID
	//
	// link to action or property triggering the event
	MessageID string `json:"messageID,omitempty"`

	// Name with Event name
	Name string `json:"name,omitempty"`

	// Updated with Updated time
	//
	// Time the value was last updated
	Updated string `json:"updated,omitempty"`
}

// PropertyValue defines a Property Value data schema of the digitwin agent.
//
// Value and update data of a property
type PropertyValue struct {

	// Data with Property value
	//
	// Data in format as described by the thing's property affordance
	Data any `json:"data,omitempty"`

	// MessageID with Message ID
	//
	// link to action or property triggering the change
	MessageID string `json:"messageID,omitempty"`

	// Name with Property name
	Name string `json:"name,omitempty"`

	// Updated with Updated time
	//
	// Time the value was last updated
	Updated string `json:"updated,omitempty"`

	// WriteData with Input
	//
	// Input data requested by the sender
	WriteData any `json:"writeData,omitempty"`

	// WriteMessageID with Write message ID
	//
	// MessageID of the write request
	WriteMessageID string `json:"writeMessageID,omitempty"`

	// WriteSenderID with Write sender
	//
	// ID of the sender writing the property
	WriteSenderID string `json:"writeSenderID,omitempty"`

	// WriteStatus with Write progress
	//
	// The last write request progress
	WriteStatus string `json:"writeStatus,omitempty"`

	// WriteUpdated with Write time
	//
	// Time the last write was requested
	WriteUpdated string `json:"writeUpdated,omitempty"`
}

//--- Argument and Response struct for action of Thing 'dtw:digitwin:values' ---

const ValuesReadActionsMethod = "readActions"

// ValuesReadActionsArgs defines the arguments of the readActions function
// Action status - Read the latest action status
type ValuesReadActionsArgs struct {

	// Names with Action Names
	//
	// The action names to read or empty to read status of all actions
	Names []string `json:"names,omitempty"`

	// ThingID with Thing ID
	//
	// ID of the Thing to read
	ThingID string `json:"thingID,omitempty"`
}

const ValuesReadEventsMethod = "readEvents"

// ValuesReadEventsArgs defines the arguments of the readEvents function
// Read event values - Read the latest event value(s)
type ValuesReadEventsArgs struct {

	// Names with Value Names
	//
	// The event names to read or empty to read all latest values
	Names []string `json:"names,omitempty"`

	// ThingID with Thing ID
	//
	// ID of the Thing to read
	ThingID string `json:"thingID,omitempty"`
}

const ValuesReadPropertiesMethod = "readProperties"

// ValuesReadPropertiesArgs defines the arguments of the readProperties function
// Read properties/event values - Read the latest property or event value(s)
type ValuesReadPropertiesArgs struct {

	// Names with Value Names
	//
	// The property/event names to read or empty to read all latest values
	Names []string `json:"names,omitempty"`

	// ThingID with Thing ID
	//
	// ID of the Thing to read
	ThingID string `json:"thingID,omitempty"`
}

// ValuesReadActions client method - Action status.
// Read the latest action status
func ValuesReadActions(hc hubclient.IHubClient, names []string, thingID string) (actionvaluemap []ActionValue, err error) {
	var args = ValuesReadActionsArgs{names, thingID}
	err = hc.Rpc(ValuesDThingID, ValuesReadActionsMethod, &args, &actionvaluemap)
	return
}

// ValuesReadEvents client method - Read event values.
// Read the latest event value(s)
func ValuesReadEvents(hc hubclient.IHubClient, names []string, thingID string) (eventvalues []EventValue, err error) {
	var args = ValuesReadEventsArgs{names, thingID}
	err = hc.Rpc(ValuesDThingID, ValuesReadEventsMethod, &args, &eventvalues)
	return
}

// ValuesReadProperties client method - Read properties/event values.
// Read the latest property or event value(s)
func ValuesReadProperties(hc hubclient.IHubClient, names []string, thingID string) (propertyvaluemap []PropertyValue, err error) {
	var args = ValuesReadPropertiesArgs{names, thingID}
	err = hc.Rpc(ValuesDThingID, ValuesReadPropertiesMethod, &args, &propertyvaluemap)
	return
}

// IValuesService defines the interface of the 'Values' service
//
// This defines a method for each of the actions in the TD.
type IValuesService interface {

	// ReadActions Action status
	// Read the latest action status
	// This returns a map of action name to status objects
	ReadActions(senderID string, args ValuesReadActionsArgs) (actionvaluemap []ActionValue, err error)

	// ReadEvents Read event values
	// Read the latest event value(s)
	// This returns a most recent event value objects
	ReadEvents(senderID string, args ValuesReadEventsArgs) (eventvalues []EventValue, err error)

	// ReadProperties Read properties/event values
	// Read the latest property or event value(s)
	// This returns a map of name:propertyvalue objects
	ReadProperties(senderID string, args ValuesReadPropertiesArgs) (propertyvaluemap []PropertyValue, err error)
}

// NewHandleValuesAction returns a server handler for Thing 'dtw:digitwin:values' actions.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
//
// This returns the marshalled response data or an error.
func NewHandleValuesAction(svc IValuesService) func(consumerID, dThingID, name string, input any, messageID string) (string, any, error) {
	return func(consumerID, dThingID, actionName string, input any, messageID string) (string, any, error) {
		var err error
		var status string = "completed"
		var output any
		switch actionName {
		case "readActions":
			args := ValuesReadActionsArgs{}
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				output, err = svc.ReadActions(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "readProperties":
			args := ValuesReadPropertiesArgs{}
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				output, err = svc.ReadProperties(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "readEvents":
			args := ValuesReadEventsArgs{}
			err = utils.DecodeAsObject(input, &args)
			if err == nil {
				output, err = svc.ReadEvents(consumerID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		default:
			err = errors.New("Unknown Method '" + actionName + "' of service '" + dThingID + "'")
			status = "failed"
		}
		return status, output, err
	}
}

// ValuesTD contains the raw TD of this service for publication to the Hub
const ValuesTD = `{"@context":["https://www.w3.org/2022/wot/td/v1.1",{"ht":"https://www.hiveot.net/vocab/v0.1"}],"@type":"Service","created":"2024-10-04T17:00:00.000Z","description":"Last known property, event and action values","id":"values","modified":"2024-10-04T17:00:00.000Z","support":"https://www.github.com/hiveot/hub","title":"DigiTwin Values","schemaDefinitions":{"ActionValue":{"title":"Action Value","description":"Input value of the last action","readOnly":false,"type":"object","properties":{"input":{"title":"Action input","description":"Action input value","readOnly":false,"type":"any"},"messageID":{"title":"Message ID","description":"Message ID of the action","readOnly":false,"type":"string"},"name":{"title":"Action name","readOnly":false,"type":"string"},"output":{"title":"Action output","readOnly":false,"type":"any"},"senderID":{"title":"Consumer ID","readOnly":false,"type":"string"},"status":{"title":"Write progress","description":"The last write request progress","enum":["pending","delivered","completed","rejected","aborted"],"readOnly":false,"type":"string"},"updated":{"title":"Updated time","description":"Time the action was initiated","readOnly":false,"type":"dateTime"}}},"EventValue":{"title":"Event Value","description":"Value and update data of an event","readOnly":false,"type":"object","properties":{"data":{"title":"Event payload","description":"Data in format as described by the thing's affordance","readOnly":false,"type":"any"},"messageID":{"title":"Message ID","description":"link to action or property triggering the event","readOnly":false,"type":"string"},"name":{"title":"Event name","readOnly":false,"type":"string"},"updated":{"title":"Updated time","description":"Time the value was last updated","readOnly":false,"type":"dateTime"}}},"PropertyValue":{"title":"Property Value","description":"Value and update data of a property","readOnly":false,"type":"object","properties":{"data":{"title":"Property value","description":"Data in format as described by the thing's property affordance","readOnly":false,"type":"any"},"messageID":{"title":"Message ID","description":"link to action or property triggering the change","readOnly":false,"type":"string"},"name":{"title":"Property name","readOnly":false,"type":"string"},"updated":{"title":"Updated time","description":"Time the value was last updated","readOnly":false,"type":"dateTime"},"writeData":{"title":"Input","description":"Input data requested by the sender","readOnly":false,"type":"any"},"writeMessageID":{"title":"Write message ID","description":"MessageID of the write request","readOnly":false,"type":"string"},"writeSenderID":{"title":"Write sender","description":"ID of the sender writing the property","readOnly":false,"type":"string"},"writeStatus":{"title":"Write progress","description":"The last write request progress","enum":["pending","delivered","completed","rejected","aborted"],"readOnly":false,"type":"string"},"writeUpdated":{"title":"Write time","description":"Time the last write was requested","readOnly":false,"type":"dateTime"}}}},"actions":{"readActions":{"@type":"ht:function","title":"Action status","description":"Read the latest action status","input":{"readOnly":false,"type":"object","properties":{"names":{"title":"Action Names","description":"The action names to read or empty to read status of all actions","readOnly":false,"type":"array","items":{"readOnly":false,"type":"string"}},"thingID":{"title":"Thing ID","description":"ID of the Thing to read","readOnly":false,"type":"string"}},"required":["thingID"]},"output":{"title":"Action value map","description":"map of action name to status objects","readOnly":false,"type":"array","items":{"title":"values","readOnly":false,"type":"ActionValue"}},"safe":true,"idempotent":true},"readEvents":{"@type":"ht:function","title":"Read event values","description":"Read the latest event value(s)","input":{"readOnly":false,"type":"object","properties":{"names":{"title":"Value Names","description":"The event names to read or empty to read all latest values","readOnly":false,"type":"array","items":{"readOnly":false,"type":"string"}},"thingID":{"title":"Thing ID","description":"ID of the Thing to read","readOnly":false,"type":"string"}},"required":["thingID"]},"output":{"title":"Event values","description":"Most recent event value objects","readOnly":false,"type":"array","items":{"title":"EventValue","readOnly":false,"type":"EventValue"}},"safe":true,"idempotent":true},"readProperties":{"@type":"ht:function","title":"Read properties/event values","description":"Read the latest property or event value(s)","input":{"readOnly":false,"type":"object","properties":{"names":{"title":"Value Names","description":"The property/event names to read or empty to read all latest values","readOnly":false,"type":"array","items":{"readOnly":false,"type":"string"}},"thingID":{"title":"Thing ID","description":"ID of the Thing to read","readOnly":false,"type":"string"}},"required":["thingID"]},"output":{"title":"Property value map","description":"map of name:propertyvalue objects","readOnly":false,"type":"array","items":{"title":"PropertyValue","readOnly":false,"type":"PropertyValue"}},"safe":true,"idempotent":true}},"events":{"valueUpdated":{"title":"Thing property updated","description":"A Thing's property value was updated","data":{"readOnly":false,"type":"object","properties":{"name":{"title":"Property name","description":"ID of the property that was updated","readOnly":false,"type":"string"},"thingID":{"title":"Thing ID","description":"ID of the Thing that was updated","readOnly":false,"type":"string"},"value":{"title":"New value","description":"The new value of the property","readOnly":false,"type":"string"}}}}},"security":["bearer"],"securityDefinitions":{"bearer":{"description":"HTTP protocol authentication","scheme":"bearer","name":"authentication","alg":"es256","format":"jwt","in":"header"}}}`
