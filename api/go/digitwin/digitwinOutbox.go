// Package digitwin with types and interfaces for using this service with agent 'digitwin'
// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.
// Generated 08 Jun 24 23:44 PDT.
package digitwin

import "encoding/json"
import "errors"
import "github.com/hiveot/hub/lib/things"
import "github.com/hiveot/hub/lib/hubclient"

// OutboxAgentID is the connection ID of the agent managing the Thing.
const OutboxAgentID = "digitwin"

// OutboxServiceID is the internal thingID of the device/service as used by agents.
// Agents use this to publish events and subscribe to actions
const OutboxServiceID = "outbox"

// OutboxDThingID is the Digitwin thingID as used by agents. Digitwin adds the dtw:{agent} prefix to the serviceID
// Consumers use this to publish actions and subscribe to events
const OutboxDThingID = "dtw:digitwin:outbox"

//--- Argument and Response struct for action of Thing 'dtw:digitwin:outbox' ---

const OutboxReadLatestMethod = "readLatest"

// OutboxReadLatestArgs defines the arguments of the readLatest function
// Read Latest - Read the latest value(s) of a Thing
type OutboxReadLatestArgs struct {

	// Keys with Value Key
	//
	// The event/property IDs to read or empty to read all latest values
	Keys []string `json:"keys,omitempty"`

	// Since with Since
	//
	// Only return values updated since
	Since string `json:"since,omitempty"`

	// ThingID with Thing ID
	//
	// ID of the Thing to read
	ThingID string `json:"thingID,omitempty"`
}

const OutboxRemoveValueMethod = "removeValue"

// OutboxClient client for talking to the 'dtw:digitwin:outbox' service
type OutboxClient struct {
	dThingID string
	hc       hubclient.IHubClient
}

// ReadLatest client method - Read Latest.
// Read the latest value(s) of a Thing
func (svc *OutboxClient) ReadLatest(args OutboxReadLatestArgs) (valuemap string, err error) {
	err = svc.hc.Rpc(svc.dThingID, OutboxReadLatestMethod, &args, &valuemap)
	return
}

// RemoveValue client method - Remove Thing Value.
// Remove a value
func (svc *OutboxClient) RemoveValue(messageID string) (err error) {
	err = svc.hc.Rpc(svc.dThingID, OutboxRemoveValueMethod, &messageID, nil)
	return
}

// NewOutboxClient creates a new client for invoking DigiTwin Outbox methods.
func NewOutboxClient(hc hubclient.IHubClient) *OutboxClient {
	cl := OutboxClient{
		hc:       hc,
		dThingID: "dtw:digitwin:outbox",
	}
	return &cl
}

// IOutboxService defines the interface of the 'Outbox' service
//
// This defines a method for each of the actions in the TD.
type IOutboxService interface {

	// ReadLatest Read Latest
	// Read the latest value(s) of a Thing
	// This returns a jSON encoded map of key:ThingMessage objects
	ReadLatest(senderID string, args OutboxReadLatestArgs) (valuemap string, err error)

	// RemoveValue Remove Thing Value
	// Remove a value
	RemoveValue(senderID string, messageID string) error
}

// NewOutboxHandler returns a server handler for Thing 'dtw:digitwin:outbox' actions.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
//
// This returns the marshalled response data or an error.
func NewOutboxHandler(svc IOutboxService) func(*things.ThingMessage) hubclient.DeliveryStatus {
	return func(msg *things.ThingMessage) (stat hubclient.DeliveryStatus) {
		var err error
		var resp interface{}
		var senderID = msg.SenderID
		switch msg.Key {
		case "readLatest":
			args := OutboxReadLatestArgs{}
			err = msg.Unmarshal(&args)
			if err == nil {
				resp, err = svc.ReadLatest(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		case "removeValue":
			var args string
			err = msg.Unmarshal(&args)
			if err == nil {
				err = svc.RemoveValue(senderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
			break
		default:
			err = errors.New("Unknown Method '" + msg.Key + "' of service '" + msg.ThingID + "'")
			stat.Failed(msg, err)
		}
		if resp != nil {
			stat.Reply, _ = json.Marshal(resp)
		}
		stat.Completed(msg, err)
		return stat
	}
}
