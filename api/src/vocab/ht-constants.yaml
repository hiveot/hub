# definition of constants used in hiveot

# HiveOT operations
Operations:
  version: "0.1"
  link: "github.com/hiveot/hub/api/vocab/ht-constants.yaml"
  description: "HiveOT operations"
  namespace: "ht"
  vocab:
    # consumer operations
    HTOpLogin: "login"
    HTOpLogout: "logout"
    HTOpRefresh: "refresh"
    HTOpReadAllThings: "readAllThings"
    HTOpReadThing: "readThing"
    # agent operations
    HTOpUpdateThing: "updatething"  # directory operation
    HTOpDelivery: "updatedelivery"
    HTOpPublishEvent: "publishevent"
    HTOpUpdateProperty: "updateproperty"




# ProgressStatus for action progress
ProgressStatus:
  version: "0.1"
  link: "github.com/hiveot/hub/api/vocab/ht-constants.yaml"
  description: "Action progress status constants"
  namespace: "ht"
  vocab:
    # action is pending delivery to the Thing
    ProgressStatusPending: "pending"

    # Request is delivered to the Thing agent and waiting completion
    ProgressStatusDelivered: "delivered"

    # Request was processed by the Thing and optionally returned an error
    ProgressStatusCompleted: "completed"

    # Request failed delivery to the Thing
    ProgressStatusFailed: "failed"


# MessageTypes is DEPRECATED. REPLACED BY FORMS
MessageTypes:
  version: "0.1"
  link: "github.com/hiveot/hub/api/vocab/ht-constants.yaml"
  description: "Message types used throughout the Hub and its clients"
  namespace: "ht"
  vocab:

    # action requests flow from a consumer to the digital twin and on to
    # the thing's agent.
    MessageTypeAction:     "action"    # request an action - operators

    # Thing events flow from an agent to digital twin, which forwards it to
    # subscribers.
    # agent [thing event] -> digitwin [dtw event] => subscribers
    MessageTypeEvent:      "event"

    # Progress update message from an agent to the hub onwards to the sender
    # agent [delivery status] -> digitwin [dtw message] -> sender
    MessageTypeProgressUpdate:  "progress"

    # Property value updates flow from a thing agent to the digital twin, which
    # in turn updates observers of the property(ies).
    # the message contains the property name and value as data
    # if no name is given then data contains a map with property key-value pairs.
    MessageTypeProperty:  "property"


