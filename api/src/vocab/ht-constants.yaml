# definition of constants used in hiveot

# HiveOT operations
Operations:
  version: "0.1"
  link: "github.com/hiveot/hub/api/vocab/ht-constants.yaml"
  description: "HiveOT operations"
  namespace: "ht"
  vocab:
    # consumer operations
    HTOpLogin: "login"
    HTOpLogout: "logout"
    HTOpRefresh: "refresh"
    HTOpReadAllThings: "readAllThings"
    HTOpReadThing: "readThing"
    # agent operations
    HTOpUpdateThing: "updatething"
    HTOpPublishEvent: "publishevent"
    HTOpUpdateProperty: "updateproperty"




# MessageTypes is DEPRECATED. REPLACED BY FORMS
MessageTypes:
  version: "0.1"
  link: "github.com/hiveot/hub/api/vocab/ht-constants.yaml"
  description: "Message types used throughout the Hub and its clients"
  namespace: "ht"
  vocab:

    # action requests flow from a consumer to a thing agent via the digitwin inbox.
    #
    # Consumers send digitwin action requests to the digitwin inbox.
    # The inbox converts the digitwin thing ID to the agent thing ID and
    # forwards it to the agent.
    # consumer [dtw action] -> inbox [thing action] -> agent
    MessageTypeAction:     "action"    # request an action - operators

    # Thing events flow from an agent to digitwin subscribers via the outbox.
    #
    # Agents send events to the digitwin outbox.
    # The outbox converts the thingID to the digitwin thingID, and forwards
    # it to subscribers.
    # agent [thing event] -> outbox [dtw event] => subscribers
    MessageTypeEvent:      "event"

    # Delivery update message from an agent to the hub onwards to the sender
    #
    # agent [delivery status] -> inbox [dtw message] -> sender
    #
    # B. digitwin property updates flow from a consumer to thing agent via the inbox.
    # consumer [dtw property] -> inbox [thing property] -> agent
    MessageTypeDeliveryUpdate:  "delivery"

    # A. property updates flow from a thing agent to digitwin subscribers via the outbox:
    # agent [thing property] -> outbox [dtw property] => subscribers
    #
    # B. digitwin property updates flow from a consumer to thing agent via the inbox.
    # consumer [dtw property] -> inbox [thing property] -> agent
    MessageTypeProperty:  "property"

    # are properties and TD a type of event? - yes
    # are these described in the TD event? - no - this is a problem
    EventNameDeliveryUpdate: "$delivery"
    EventNameProperties:     "$properties"   # event with all thing property values
    EventNameTD:             "$td"           # event a td is updated - agents

    # pub prop using   PATCH /thingID/property/propKey   by consumer
    # pub event using  PUT   /thingID/event/eventKey     by agent
    # pub action using POST  /thingID/action/actionKey   by consumer
    # pub td using     PUT   /thingID                    by agent

    # notify prop change using PATCH /thingID/property/key  by agent
    # notify event change using PATCH /thingID/event/key  by agent
    # notify action n/a


