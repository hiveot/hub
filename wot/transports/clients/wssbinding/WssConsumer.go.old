// Package wssclient with requests made by consumers
package wssbinding

import (
	"github.com/hiveot/hub/api/go/digitwin"
	"github.com/hiveot/hub/lib/utils"
	"github.com/hiveot/hub/wot/transports"
	"github.com/teris-io/shortid"
	"log/slog"
	"time"
)

// InvokeAction publishes an action message.
// To receive a reply use WaitForProgressUpdate
// An error is returned if there is no connection.
func (cl *WssBindingClient) InvokeAction(
	dThingID string, name string, input interface{}, correlationID string) (
	stat transports.RequestStatus) {

	if correlationID == "" {
		correlationID = shortid.MustGenerate()
	}
	slog.Info("InvokeAction",
		slog.String("clientID (me)", cl.clientID),
		slog.String("dThingID", dThingID),
		slog.String("name", name),
		slog.String("correlationID", correlationID),
	)
	msg := ActionMessage{
		ThingID:       dThingID,
		MessageType:   MsgTypeInvokeAction,
		Name:          name,
		CorrelationID: correlationID,
		MessageID:     correlationID,
		Data:          input,
		SenderID:      cl.clientID,
		Timestamp:     time.Now().Format(utils.RFC3339Milli),
	}
	err := cl._send(msg)
	stat.Status = transports.RequestPending
	stat.ThingID = dThingID
	stat.Name = name
	stat.CorrelationID = correlationID
	if err != nil {
		stat.Error = err.Error()
	}
	return stat
}

// ObserveAllProperties subscribes to property updates from all observable properties
// Use SetEventHandler to receive observed property updates.
func (cl *WssBindingClient) ObserveAllProperties(thingID string) error {
	slog.Info("ObserveAllProperties",
		slog.String("clientID", cl.clientID),
		slog.String("thingID", thingID))

	msg := PropertyMessage{
		ThingID:     thingID,
		MessageType: MsgTypeObserveAllProperties,
	}
	err := cl._send(msg)
	return err
}

// ObserveProperty subscribes to property updates
// Use SetEventHandler to receive observed property updates
func (cl *WssBindingClient) ObserveProperty(thingID string, name string) error {
	slog.Info("Observe",
		slog.String("clientID", cl.clientID),
		slog.String("thingID", thingID),
		slog.String("name", name))

	msgType := MsgTypeObserveProperty
	if name == "" {
		msgType = MsgTypeObserveAllProperties
	}
	msg := PropertyMessage{
		ThingID:     thingID,
		MessageType: msgType,
		Name:        name,
	}
	err := cl._send(msg)
	return err
}

// QueryAction returns
func (cl *WssBindingClient) QueryAction(thingID string, name string) (value transports.ThingMessage, err error) {
	correlationID := shortid.MustGenerate()
	wssMsg := ActionMessage{
		ThingID:       thingID,
		MessageType:   MsgTypeQueryAction,
		Name:          name,
		CorrelationID: correlationID,
	}
	wssReply := ActionMessage{}
	err = cl._rpc(correlationID, wssMsg, &wssReply)
	if err != nil {
		return value, err
	}
	// convert the result to a standardized message
	value = transports.ThingMessage{
		Data:          wssMsg.Data,
		Name:          wssMsg.Name,
		CorrelationID: wssMsg.CorrelationID,
		Created:       wssMsg.Timestamp,
	}
	return value, err
}

// QueryAllActions returns
func (cl *WssBindingClient) QueryAllActions(thingID string) (values []transports.ThingMessage, err error) {
	correlationID := shortid.MustGenerate()
	wssMsg := ActionMessage{
		ThingID:       thingID,
		MessageType:   MsgTypeQueryAllActions,
		CorrelationID: correlationID,
	}
	wssReply := make([]ActionMessage, 0)
	err = cl._rpc(correlationID, wssMsg, &wssReply)
	if err != nil {
		return nil, err
	}
	// convert the result to a standardized message
	values = make([]transports.ThingMessage, 0, len(wssReply))
	for _, reply := range wssReply {
		el := transports.ThingMessage{
			Data:          reply.Data,
			Name:          reply.Name,
			CorrelationID: reply.CorrelationID,
			Created:       reply.Timestamp,
		}
		values = append(values, el)
	}
	return values, err
}

// ReadAllEvents reads all events from a Thing
func (cl *WssBindingClient) ReadAllEvents(thingID string) (values []transports.ThingMessage, err error) {
	correlationID := shortid.MustGenerate()
	wssMsg := EventMessage{
		ThingID:       thingID,
		MessageType:   MsgTypeReadAllEvents,
		CorrelationID: correlationID,
	}
	wssReply := make([]EventMessage, 0)
	err = cl._rpc(correlationID, wssMsg, &wssReply)
	if err != nil {
		return nil, err
	}
	// convert the result to a standardized message
	values = make([]transports.ThingMessage, 0, len(wssReply))
	for _, reply := range wssReply {
		el := transports.ThingMessage{
			Data:          reply.Data,
			Name:          reply.Name,
			CorrelationID: reply.CorrelationID,
			Created:       reply.Timestamp,
		}
		values = append(values, el)
	}
	return values, err
}

// ReadAllProperties reads all property values from a Thing
// is a form even needed?
func (cl *WssBindingClient) ReadAllProperties(thingID string) (values []transports.ThingMessage, err error) {
	correlationID := shortid.MustGenerate()
	wssMsg := PropertyMessage{
		ThingID:       thingID,
		MessageType:   MsgTypeReadAllProperties,
		CorrelationID: correlationID,
	}
	wssReply := make([]PropertyMessage, 0)
	err = cl._rpc(correlationID, wssMsg, &wssReply)
	if err != nil {
		return nil, err
	}
	// convert the result to a standardized message
	values = make([]transports.ThingMessage, 0, len(wssReply))
	for _, reply := range wssReply {
		el := transports.ThingMessage{
			Data:          reply.Data,
			Name:          reply.Name,
			CorrelationID: reply.CorrelationID,
			Created:       reply.Timestamp,
		}
		values = append(values, el)
	}
	return values, err
}

// ReadEvent returns the Thing event value
func (cl *WssBindingClient) ReadEvent(thingID string, name string) (value transports.ThingMessage, err error) {
	correlationID := shortid.MustGenerate()
	wssMsg := EventMessage{
		ThingID:       thingID,
		Name:          name,
		MessageType:   MsgTypeReadEvent,
		CorrelationID: correlationID,
	}
	wssReply := EventMessage{}
	err = cl._rpc(correlationID, wssMsg, &wssReply)
	if err != nil {
		return value, err
	}
	// convert the result to a standardized message
	value = transports.ThingMessage{
		Data:          wssReply.Data,
		Name:          wssReply.Name,
		CorrelationID: wssReply.CorrelationID,
		Created:       wssReply.Timestamp,
	}
	return value, err
}

// ReadMultipleEvents reads select events from a Thing
func (cl *WssBindingClient) ReadMultipleEvents(thingID string, names []string) (values []transports.ThingMessage, err error) {
	correlationID := shortid.MustGenerate()
	wssMsg := EventMessage{
		ThingID:       thingID,
		MessageType:   MsgTypeReadMultipleEvents,
		Names:         names,
		CorrelationID: correlationID,
	}
	wssReply := make([]EventMessage, 0)
	err = cl._rpc(correlationID, wssMsg, &wssReply)
	if err != nil {
		return nil, err
	}
	// convert the result to a standardized message
	values = make([]transports.ThingMessage, 0, len(wssReply))
	for _, reply := range wssReply {
		el := transports.ThingMessage{
			Data:          reply.Data,
			Name:          reply.Name,
			CorrelationID: reply.CorrelationID,
			Created:       reply.Timestamp,
		}
		values = append(values, el)
	}
	return values, err
}

// ReadMultipleProperties requests reading multiple properties from a thing
func (cl *WssBindingClient) ReadMultipleProperties(
	thingID string, names []string) (value []transports.ThingMessage, err error) {

	correlationID := shortid.MustGenerate()
	wssMsg := PropertyMessage{
		ThingID:       thingID,
		Names:         names,
		MessageType:   MsgTypeReadMultipleProperties,
		CorrelationID: correlationID,
	}
	var wssReply []PropertyMessage
	err = cl._rpc(correlationID, wssMsg, &wssReply)
	if err != nil {
		return nil, err
	}
	// convert the result to a standardized message
	value = make([]transports.ThingMessage, 0, len(wssReply))
	for _, reply := range wssReply {
		el := transports.ThingMessage{
			Data:          reply.Data,
			Name:          reply.Name,
			CorrelationID: reply.CorrelationID,
			Created:       reply.Timestamp,
		}
		value = append(value, el)
	}
	return value, err
}

// ReadProperty is the internal publish request and wait for answer handler
func (cl *WssBindingClient) ReadProperty(
	thingID string, name string) (value transports.ThingMessage, err error) {

	correlationID := shortid.MustGenerate()
	wssMsg := PropertyMessage{
		ThingID:       thingID,
		Name:          name,
		MessageType:   MsgTypeReadProperty,
		CorrelationID: correlationID,
	}
	wssReply := PropertyMessage{}
	err = cl._rpc(correlationID, wssMsg, &wssReply)
	if err != nil {
		return value, err
	}
	value = transports.ThingMessage{
		Data:          wssReply.Data,
		Name:          wssReply.Name,
		CorrelationID: wssReply.CorrelationID,
		Created:       wssReply.Timestamp,
	}
	return value, err
}

// ReadTD returns the TD document in its JSON encoded format
func (cl *WssBindingClient) ReadTD(dThingID string) (tdJSON string, err error) {
	err = cl.Rpc(digitwin.DirectoryDThingID, digitwin.DirectoryActionReadTD, dThingID, &tdJSON)
	return tdJSON, err
}

// ReadAllTDs returns a paged list of TD documents in their JSON format
func (cl *WssBindingClient) ReadAllTDs(offset int, limit int) (tdJSONs []string, err error) {
	args := digitwin.DirectoryReadAllTDsArgs{
		Offset: offset,
		Limit:  limit,
	}
	err = cl.Rpc(digitwin.DirectoryDThingID, digitwin.DirectoryActionReadAllTDs, args, &tdJSONs)
	return tdJSONs, err
}

// Rpc invokes an action and waits for a completion or failed progress update.
// This uses a correlationID to link actions to progress updates. Only use this for actions
// that support the 'rpc' capabilities (eg, the agent sends the progress update)
func (cl *WssBindingClient) Rpc(
	dThingID string, name string, input interface{}, resp interface{}) (err error) {
	correlationID := "rpc-" + shortid.MustGenerate()
	msg := ActionMessage{
		ThingID:       dThingID,
		MessageType:   MsgTypeInvokeAction,
		Name:          name,
		CorrelationID: correlationID,
		MessageID:     correlationID,
		Data:          input,
		SenderID:      cl.clientID,
		Timestamp:     time.Now().Format(utils.RFC3339Milli),
	}
	err = cl._rpc(correlationID, msg, resp)
	if err != nil {
		slog.Error("RPC failed",
			"thingID", dThingID, "name", name, "err", err.Error())
	}
	return err
}

// PublishFromForm is form-based method of invoking an operation
//func (cl *WssBindingClient) PublishFromForm(
//	thingID string, name string, op tdd.Form, data any) (
//	status string, data any, err error) {
//
//	correlationID := ""
//	slog.Info("SendOperation",
//		slog.String("clientID (me)", cl.clientID),
//		slog.String("thingID", thingID),
//		slog.String("name", name),
//		slog.String("correlationID", correlationID),
//	)
//	// TODO: pick the message format based on the operation
//	msg := ActionMessage{
//		ThingID:       thingID,
//		MessageType:   op.GetOperation(),
//		Name:          name,
//		CorrelationID: correlationID,
//		Data:          data,
//		Timestamp:     time.Now().Format(utils.RFC3339Milli),
//		SenderID:      cl.clientID,
//	}
//	err := cl._send(msg)
//	stat.Status = RequestPending
//	stat.ThingID = thingID
//	stat.Name = name
//	stat.CorrelationID = correlationID
//	if err != nil {
//		stat.Error = err.Error()
//	}
//	return stat
//}

// Subscribe sends a subscribe request to the server
// Use SetEventHandler to receive subscribed events or SetRequestHandler for actions
func (cl *WssBindingClient) Subscribe(thingID string, name string) error {
	slog.Info("Subscribe",
		slog.String("clientID", cl.clientID),
		slog.String("thingID", thingID),
		slog.String("name", name))

	msgType := MsgTypeSubscribeEvent
	if name == "" {
		msgType = MsgTypeSubscribeAllEvents
	}
	msg := EventMessage{
		ThingID:     thingID,
		MessageType: msgType,
		Name:        name,
	}
	err := cl._send(msg)
	return err
}

// Unobserve sends an unobserve request to the server
func (cl *WssBindingClient) Unobserve(thingID string, name string) error {
	slog.Info("Unobserve",
		slog.String("clientID", cl.clientID),
		slog.String("thingID", thingID),
		slog.String("name", name))

	msgType := MsgTypeUnobserveProperty
	if name == "" {
		msgType = MsgTypeUnobserveAllProperties
	}
	msg := PropertyMessage{
		ThingID:     thingID,
		MessageType: msgType,
		Name:        name,
	}
	err := cl._send(msg)
	return err
}

// Unsubscribe sends an unsubscribe request to the server
func (cl *WssBindingClient) Unsubscribe(thingID string, name string) error {
	slog.Info("Unsubscribe",
		slog.String("clientID", cl.clientID),
		slog.String("thingID", thingID),
		slog.String("name", name))

	msgType := MsgTypeUnsubscribeEvent
	if name == "" {
		msgType = MsgTypeUnsubscribeAllEvents
	}
	msg := EventMessage{
		ThingID:     thingID,
		MessageType: msgType,
		Name:        name,
	}
	err := cl._send(msg)
	return err
}

// WriteProperty writes a configuration change request
func (cl *WssBindingClient) WriteProperty(thingID string, name string, data any) (
	stat transports.RequestStatus) {

	slog.Info("WriteProperty",
		slog.String("me", cl.clientID),
		slog.String("thingID", thingID),
		slog.String("name", name),
	)
	correlationID := shortid.MustGenerate()
	msg := PropertyMessage{
		ThingID:       thingID,
		MessageType:   MsgTypeWriteProperty,
		Name:          name,
		Data:          data,
		CorrelationID: correlationID,
		Timestamp:     time.Now().Format(utils.RFC3339Milli),
	}
	err := cl._send(msg)
	stat.ThingID = thingID
	stat.Name = name
	stat.CorrelationID = correlationID
	stat.Status = transports.RequestPending
	if err != nil {
		stat.Error = err.Error()
	}

	return stat
}
