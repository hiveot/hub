package ssescclient

// InvokeAction publishes an action message and waits for an answer or until timeout
// An error is returned if delivery failed or succeeded but the action itself failed
//func (cl *SsescBindingClient) InvokeAction(
//	dThingID string, name string, input interface{}, output interface{}, correlationID string) (
//	stat transports.RequestStatus) {
//
//	// pass to the http binding
//	return cl.httpClient.InvokeAction(dThingID, name, input, output, correlationID)
//}

// Observe subscribes to property updates with the SSE-SC return channel.
// Use SetEventHandler to receive observed property updates
// If name is empty then this observes all property changes
//func (cl *SsescBindingClient) Observe(dThingID string, name string) error {
//	slog.Info("Observe",
//		slog.String("clientID", cl.clientID),
//		slog.String("thingID", dThingID),
//		slog.String("name", name))
//
//	stat := cl.httpClient.Pub(http.MethodPost,
//		PostObservePropertiesPath, dThingID, name, nil, "")
//	if stat.Error != "" {
//		return errors.New(stat.Error)
//	}
//	return nil
//}

// SendOperation is temporary transition to support using TD forms
//func (cl *HttpSSEClient) SendOperation(
//	href string, op tdd.Form, data any) (stat protocoltransports.RequestStatus) {
//
//	slog.Info("PublishFromForm", "href", href, "op", op)
//	panic("Just a placeholder. Dont use this yet. Not implemented")
//	return stat
//}

//
//// Subscribe subscribes to a single event of one or more thing.
//// Use SetEventHandler to receive subscribed events or SetRequestHandler for actions
//func (cl *SsescBindingClient) Subscribe(dThingID string, name string) error {
//
//	slog.Info("Subscribe",
//		slog.String("clientID", cl.clientID),
//		slog.String("cid", cl.GetClientID()),
//		slog.String("dThingID", dThingID),
//		slog.String("name", name))
//
//	stat := cl.httpClient.Pub(http.MethodPost,
//		PostSubscribeEventPath, dThingID, name, nil, "")
//	if stat.Error != "" {
//		return errors.New(stat.Error)
//	}
//	return nil
//}
//
//// Unobserve thing properties
//func (cl *SsescBindingClient) Unobserve(dThingID string, name string) error {
//	slog.Info("Unobserve",
//		slog.String("clientID", cl.clientID),
//		slog.String("dThingID", dThingID),
//		slog.String("name", name))
//
//	stat := cl.httpClient.Pub(http.MethodPost,
//		PostUnobservePropertyPath, dThingID, name, nil, "")
//	if stat.Error != "" {
//		return errors.New(stat.Error)
//	}
//	return nil
//}
//
//// Unsubscribe from thing event(s)
//func (cl *SsescBindingClient) Unsubscribe(dThingID string, name string) error {
//	slog.Info("Unsubscribe",
//		slog.String("clientID", cl.clientID),
//		slog.String("dThingID", dThingID),
//		slog.String("name", name))
//
//	stat := cl.httpClient.Pub(http.MethodPost,
//		PostUnsubscribeEventPath, dThingID, name, nil, "")
//	if stat.Error != "" {
//		return errors.New(stat.Error)
//	}
//	return nil
//}
//
//// WriteProperty posts a configuration change request
//func (cl *SsescBindingClient) WriteProperty(dThingID string, name string, data any) (
//	stat transports.RequestStatus) {
//
//	slog.Info("WriteProperty",
//		slog.String("me", cl.clientID),
//		slog.String("thingID", dThingID),
//		slog.String("name", name),
//	)
//
//	stat = cl.httpClient.Pub(
//		http.MethodPost, PostWritePropertyPath, dThingID, name, data, "")
//	return stat
//}
