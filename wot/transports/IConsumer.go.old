package transports

// TransportStatus connection status of a hub client transport
//type TransportStatus struct {
//	// URL of the hub
//	HubURL string
//	// CA used to connect
//	CaCert *x509.Certificate
//	// the client ID to identify as
//	//SenderID string
//
//	// The current connection status
//	isConnected bool
//
//	// The last connection error message, if any
//	LastError error
//
//	// flags indicating the supported protocols
//	SupportsCertAuth     bool
//	SupportsPasswordAuth bool
//	SupportsKeysAuth     bool
//	SupportsTokenAuth    bool
//}

// IConsumer defines the interface of operations a consumer can perform
// on devices connected to the Hub.
type IConsumer interface {
	IProtocolBindingClient

	// --- actions ---

	// QueryAction returns the last completed action status
	QueryAction(thingID string, name string) (value ThingMessage, err error)

	// QueryAllActions returns the last completed action statuses of all actions
	QueryAllActions(thingID string) (values []ThingMessage, err error)

	// InvokeAction [consumer] invokes an action request and returns as soon as the
	// request is delivered to the Hub.
	// This returns a delivery status with response data if delivered
	InvokeAction(dThingID string, name string, input interface{}, correlationID string) RequestStatus

	// --- events ---

	// ReadAllEvents reads all events from a Thing.
	// Supported by the HiveOT Hub.
	// This is not part of TD-1.1 so it might not work on 3rd party devices.
	ReadAllEvents(thingID string) (values []ThingMessage, err error)

	// ReadEvent reads the latest value of a Thing event.
	// Supported by the HiveOT Hub.
	// This is not part of TD-1.1 so it might not work on 3rd party devices.
	ReadEvent(thingID string, name string) (value ThingMessage, err error)

	// ReadMultipleEvents reads the latest values of select events from a Thing
	ReadMultipleEvents(thingID string, names []string) (values []ThingMessage, err error)

	// Subscribe adds a subscription for events from the given ThingID.
	// Use SetMessageHandler to receive the event messages
	//
	//  dThingID is the digital twin Thing ID of the Thing to subscribe to.
	//	name of the event to subscribe as described in the TD or "" for all events
	Subscribe(dThingID string, name string) error

	// Unsubscribe [consumer] removes a previous event subscription.
	// dThingID and key must match that of Subscribe
	Unsubscribe(dThingID string, name string) error

	// --- properties ---

	// ObserveAllProperties adds a subscription for all properties of the Thing
	// with the given ThingID.
	//
	// Use SetMessageHandler to receive property update notifications.
	//
	//  dThingID is the digital twin Thing ID of the Thing to observe.
	ObserveAllProperties(dThingID string) error

	// ObserveProperty adds a subscription for properties from the given ThingID.
	//
	// Use SetMessageHandler to receive property update notifications.
	//
	//  dThingID is the digital twin Thing ID of the Thing to observe.
	//	name of the property to observe as described in the TD or "" for all properties
	ObserveProperty(dThingID string, name string) error

	// ReadAllProperties returns the latest values of all properties.
	ReadAllProperties(thingID string) (values []ThingMessage, err error)

	// ReadMultipleProperties reads the values of select properties from a Thing
	ReadMultipleProperties(thingID string, names []string) (values []ThingMessage, err error)

	// ReadProperty reads a single property value from a Thing
	ReadProperty(thingID string, name string) (value ThingMessage, err error)

	// Unobserve [consumer] removes a previous property subscription.
	// dThingID and key must match that of Observe
	Unobserve(dThingID string, name string) error

	// --- TDs ---

	// ReadTD returns the TD document in its JSON encoded format
	ReadTD(dThingID string) (tdJSON string, err error)

	// ReadAllTDs returns a paged list of TD documents in their JSON format
	ReadAllTDs(offset int, limit int) (tdJSONs []string, err error)

	// WriteProperty [consumer] publishes a property write request
	//
	// An async actionstatus response is sent if the property has been written,
	// or a property update message can be returned.
	//
	//	dThingID is the digital twin thingID whose property to write
	//	name is the name of the property to write
	//	Value is a value based on the PropertyAffordances in the TD
	// This returns the delivery status and an error code if delivery fails
	WriteProperty(dThingID string, name string, value any) RequestStatus

	// Rpc [consumer] makes a RPC call using an action and waits for an action status
	// confirmation message.
	//
	// This invokes PubAction to send the request, and waits for an ActionStatus
	// message with a matching correlationID.
	//
	// The arguments and responses are defined in structs (same approach as gRPC) which are
	// defined in the service api. This struct can also be generated from the TD document
	// if available at build time. See cmd/genapi for the CLI.
	//
	//	dThingID is the digital twin ID of the service providing the RPC method
	//	name of the RPC method as described in the service TD action affordance
	//	args is the struct or type containing the arguments to marshal
	//	resp is the address of a struct or type receiving the result values
	//
	// This returns an error if delivery failed or an error was returned
	Rpc(dThingID string, name string, args interface{}, resp interface{}) error

	// PublishFromForm is a form-based method of invoking an operation
	// This is under development.
	//PublishFromForm(href string, op tdd.Form, data any, requestID string) RequestStatus

}
