// Package transports with the 3 flow messages: requests, response and  notifications
package transports

import (
	"github.com/araddon/dateparse"
	"github.com/hiveot/hub/transports/tputils"
	"github.com/hiveot/hub/wot"
	"github.com/teris-io/shortid"
	"time"
)

// This defines the standardized application messages used by hiveot and its transport protocols.

// constants that identify a payload as a request,response or notification
// intended for use in hiveot protocol extensions.
const (
	MessageTypeNotification = "notification"
	MessageTypeRequest      = "request"
	MessageTypeResponse     = "response"
)

// request status
// this aligns with action status values from WoT spec
const (
	// StatusPending - the request has not yet been delivered
	StatusPending = "pending"
	// StatusRunning - the request is being processed
	StatusRunning = "running"
	// StatusCompleted - the request processing was completed
	StatusCompleted = "completed"
	// StatusFailed - the request processing or delivery failed
	StatusFailed = "failed"
)

// NotificationHandler processes a notification message
type NotificationHandler func(notification NotificationMessage)

// ResponseHandler handles a response to a request message
type ResponseHandler func(response ResponseMessage)

// RequestHandler processes a request and returns a response.
//
//	msg is the envelope that contains the request to process
type RequestHandler func(msg RequestMessage) (response ResponseMessage)

// NotificationMessage serves to notify subscribers of a change as identified by
// the operation, thingID and affordance name.
// The following operations are considered notifications:
// * property: HTOpProperty: Update of a property value, send by Thing agent
// * event: HTOpEvent: notification of event to subscribers of the Thing
type NotificationMessage struct {
	// MessageType identifies this message payload as a notification
	// This is set to "notification"
	MessageType string `json:"type"`

	// The operation for this notification as defined in TD-1.1 or the hiveot extensions (HTOp...)
	// This identifies the notification type and is a required field
	Operation string `json:"operation"`

	// ThingID of the thing this notification is from.
	// For notifications received by consumers this is the digitwin dThingID
	// For notifications sent by agents this is the agent ThingID
	// This field is required.
	ThingID string `json:"thingID"`

	// Name of the event, action or property affordance the notification is from.
	// This field is optional and only required for specific notifications.
	Name string `json:"name,omitempty"`

	// Data for the notification as described in the TD affordance dataschema.
	// If the operation is one of the Thing level operations, the input is specified
	// by the operation's dataschema.
	Data any `json:"data,omitempty"` // native

	// Created holds the date-time the notification was created. using RFC3339milli
	// This MUST be set by the protocol binding if not provided.
	Created string `json:"created"`

	// AgentID contains the Agent ID that published the notification
	// The protocol server MUST set this to the authenticated client.
	SenderID string `json:"senderID"`

	//--- additional optional fields

	// CorrelationID of the message. Correlates the notification with the request
	// that triggered it, like with subscriptions and streams.
	// This is optional. If omitted, this is not linked to any request.
	CorrelationID string `json:"correlationID,omitempty"`

	// MessageID unique ID of the message. Intended to detect duplicates.
	// Generated by the protocol binding.
	MessageID string `json:"messageID"`
}

// GetUpdated is a helper to provide a human readable timestamp
//
// format is optional format or "" to use the default format RFC822 ("02 Jan 06 15:04 MST")
// use "WT" for weekday, time (Mon, 14:31:01 PDT)
func (req *NotificationMessage) GetUpdated(format string) string {
	created, err := dateparse.ParseAny(req.Created)
	if err != nil {
		return req.Created // can't parse, return as-is
	}
	createdTime := created.Local()
	if format == "WT" {
		// Format weekday, time if less than a week old
		age := time.Now().Sub(createdTime)
		if age < time.Hour*24*7 {
			format = "Mon, 15:04:05 MST"
		} else {
			format = time.RFC822
		}
	} else {
		format = time.RFC822
	}
	return createdTime.Format(format)
}

// ToString is a helper to easily read the request input as a string
func (req *NotificationMessage) ToString() string {
	return tputils.DecodeAsString(req.Data)
}

// ToBool is a helper to easily return the result as boolean
func (req *NotificationMessage) ToBool() bool {
	return tputils.DecodeAsBool(req.Data)
}

// RequestMessage for sending a request for an operation on a Thing or service.
// Agents/Things  MUST send a response when a request is received and a correlationID
// is included.
//
// The following operations are considered to be requests:
//
//   - invokeaction  [WoT]
//   - subscribe, unsubscribe [WoT]    (handled by protocol bindings)
//   - observe, unobserve [WoT]        (handled by protocol bindings)
//   - readproperty, readallproperties [WoT]
//   - queryaction, queryallactions [WoT]
//   - readevent, readallevents  (of a Thing)  [HiveOT extension]
//   - readtd, readalltds  (of a directory or thing) [HiveOT extension]
type RequestMessage struct {
	// MessageType identifies this message payload as a request
	// This is set to "request"
	MessageType string `json:"type"`

	// The operation for this message as defined in TD-1.1 or the hiveot extensions (HTOp...)
	// This identifies the request and is a required field
	Operation string `json:"operation"`

	// ThingID of the thing this request is for.
	// For messages from consumers this is the digitwin dThingID
	// For messages to agents this is the agent ThingID
	// This field is required.
	ThingID string `json:"thingID"`

	// Name of the event, action or property affordance the request is for.
	// This field is optional and only required for specific operations.
	Name string `json:"name,omitempty"`

	// Input for the request as described in the TD affordance dataschema.
	// If the operation is one of the Thing level operations, the input is specified
	// by the operation's dataschema. WoT doesn't have this yet so hiveot will
	// define the missing bits if any.
	Input any `json:"input,omitempty"` // native

	// CorrelationID of the message. Uniquely identifies the request and must be included
	// in the response.
	// Notifications can include this to correlate with the subscription.
	// Message streams can include this to correlate with the original request.
	// This is optional. If omitted, no response will be sent.
	CorrelationID string `json:"correlationID,omitempty"`

	//--- fields populated by the protocol transport

	// SenderID is the account ID of the client sending the request.
	// The protocol server MUST set this to the authenticated client.
	SenderID string `json:"senderID,omitempty"`

	// Created holds the timestamp the request was created using RFC3339milli
	// This MUST be set by the protocol binding if not provided.
	Created string `json:"timestamp"`

	// MessageID unique ID of the message. Intended to detect duplicates.
	// Generated by the protocol binding.
	MessageID string `json:"messageID"`
}

// CreateResponse is a helper to easily create a response from a request with the
// status set to 'completed' or failed if err is not nil.
// If err is set then the status is set to failed.
func (req *RequestMessage) CreateResponse(output any, err error) (resp ResponseMessage) {
	resp = NewResponseMessage(req.Operation, req.ThingID, req.Name, output, nil, req.CorrelationID)
	resp.Status = StatusCompleted
	resp.MessageID = shortid.MustGenerate()
	if err != nil {
		resp.Status = StatusFailed
		resp.Error = err.Error()
	}
	return resp
}

// ToString is a helper to easily convert the request input to a string
func (req *RequestMessage) ToString() string {
	return tputils.DecodeAsString(req.Input)
}

// ToObject is a helper to easily convert the request input to an object
func (req *RequestMessage) ToObject(input any) error {
	return tputils.DecodeAsObject(req.Input, &input)
}

// ResponseMessage serves to notify a single client of the result of a request.
type ResponseMessage struct {
	// MessageType identifies this message payload as a response
	// This is set to the value of MessageTypeResponse
	MessageType string `json:"type"`

	// The operation this is a response to. This MUST be the operation provided in the request.
	Operation string `json:"operation"`

	// CorrelationID of the message. Correlates the response with the request.
	// This is required. If omitted, the response will be ignored.
	CorrelationID string `json:"correlationID"`

	// Status of the request processing: pending, running, completed or failed.
	// (use 'StatusPending', ... constants on top of this file)
	// If status is failed then Error holds the reason and Output possible details
	Status string `json:"status"`

	// Output for the request as described in the TD affordance dataschema.
	// If the operation is one of the Thing level operations, the output is specified
	// by the operation's dataschema. WoT doesn't have this yet so hiveot will
	// define the missing bits if any. (see documentation)
	//
	// If status is failed then output optionally contains a detailed error description.
	Output any `json:"output"` // native

	// Error contains the short error description when status is failed.
	Error string `json:"error"`

	// Timestamp the request was received by the thing agent
	Received string `json:"received"`

	// Timestamp the status was updated in this response
	Updated string `json:"timestamp"`

	// Authenticated ID of the agent sending the response, set by the server
	// The protocol server MUST set this to the authenticated client.
	SenderID string `json:"senderID"`

	//--- additional optional fields

	// ThingID of the thing this is a response from.
	// For responses passed to consumers this is the digitwin dThingID
	// For responses sent by agents this is the agent ThingID
	// This field is optional and intended to help debugging and logging.
	ThingID string `json:"thingID,omitempty"`

	// Name of the action or property affordance this is a response from.
	// This field is optional and intended to help debugging and logging.
	Name string `json:"name,omitempty"`

	// MessageID unique ID of the message. Intended to detect duplicates.
	// Generated by the protocol binding.
	MessageID string `json:"messageID,omitempty"`
}

// GetUpdated is a helper to provide a human readable timestamp
// This uses the time presentation format RFC822 ("02 Jan 06 15:04 MST")
func (resp *ResponseMessage) GetUpdated() string {
	created, err := dateparse.ParseAny(resp.Updated)
	if err != nil {
		return resp.Updated // can't parse, return as-is
	}
	created = created.Local()
	return created.Format(time.RFC822)
}

// ToString is a helper to easily read the response output as a string
func (resp *ResponseMessage) ToString() string {
	return tputils.DecodeAsString(resp.Output)
}

// NewRequestMessage creates a new RequestMessage instance.
//
//	operation is the request operation WoTOp... or HTOp...
//	thingID is the thing the value applies to (destination of action or source of event)
//	name is the name of the property, event or action affordance as described in the thing TD
//	input is the request input as defined in the corresponding affordance dataschema.
//	correlationID unique ID of the request or empty when no response is expected
func NewRequestMessage(operation string, thingID, name string, input any, correlationID string) RequestMessage {
	return RequestMessage{
		MessageType:   MessageTypeRequest,
		Operation:     operation,
		ThingID:       thingID,
		Name:          name,
		Input:         input,
		CorrelationID: correlationID,
		Created:       time.Now().Format(wot.RFC3339Milli),
		MessageID:     shortid.MustGenerate(),
	}
}

// NewResponseMessage creates a new ResponseMessage instance.
//
// This sets status to completed if err is nil or Failed if err is provided.
// If the status is not completed or failed then set it to the appropriate value after creation.
//
//	operation is the request operation WoTOp... or HTOp...
//	thingID is the thing the value applies to (destination of action or source of event)
//	name is the name of the property, event or action affordance as described in the thing TD
//	output is the output data as defined in the corresponding affordance dataschema or nil if not applicable
//	err is the optional error response
//	correlationID  ID provided by the request
func NewResponseMessage(operation string, thingID, name string, output any, err error, correlationID string) ResponseMessage {
	resp := ResponseMessage{
		MessageType:   MessageTypeResponse,
		Operation:     operation,
		ThingID:       thingID,
		Name:          name,
		Output:        output,
		CorrelationID: correlationID,
		Received:      "",
		Status:        StatusCompleted,
		Updated:       time.Now().Format(wot.RFC3339Milli),
		MessageID:     shortid.MustGenerate(),
	}
	if err != nil {
		resp.Error = err.Error()
		resp.Status = StatusFailed
	}
	return resp
}

// NewNotificationMessage creates a new NotificationMessage instance.
//
// When agents create a notification they use the local ThingID. The digital twin
// ThingID is used when the digital twin forwards the notification to subscribers.
//
// If the notification is linked to a request (subscription or streams) then set
// the CorrelationID directly in the message.
//
//	operation is the operation describing the notification WoTOp... or HTOp...
//	thingID is the Thing the notification applies to.
//	name is the name of the property, event or action affordance as described in the thing TD
//	data is the notification data as defined in the corresponding affordance dataschema, or nil if not applicable.
func NewNotificationMessage(operation string, thingID, name string, data any) NotificationMessage {

	return NotificationMessage{
		MessageType: MessageTypeNotification,
		Operation:   operation,
		ThingID:     thingID,
		Name:        name,
		Data:        data,
		MessageID:   shortid.MustGenerate(),
		Created:     time.Now().Format(wot.RFC3339Milli),
	}
}
