// Package transports with the 3 flow messages: requests, response and  notifications
package transports

import (
	"github.com/hiveot/hub/wot"
	"github.com/teris-io/shortid"
	"time"
)

// This defines the standardized application messages used by hiveot and its transport protocols.

// constants that identify a payload as a request,response or notification
// intended for use in hiveot protocol extensions.
const (
	MessageTypeRequest      = "request"
	MessageTypeResponse     = "response"
	MessageTypeNotification = "notification"
)

// NotificationHandler processes a notification message
type NotificationHandler func(notification NotificationMessage)

// ResponseHandler handles a response to a request message
type ResponseHandler func(response ResponseMessage)

// RequestHandler processes a request and returns a response.
//
//	msg is the envelope that contains the request to process
type RequestHandler func(msg RequestMessage) (response ResponseMessage)

// NotificationMessage serves to notify subscribers of a change as identified by
// the operation, thingID and affordance name.
// The following operations are considered notifications:
// * property: HTOpProperty: Update of a property value, send by Thing agent
// * event: HTOpEvent: notification of event to subscribers of the Thing
type NotificationMessage struct {
	// MessageType identifies this message payload as a notification
	// This is set to the value defined in MessageTypeNotification
	MessageType string `json:"type"`

	// The operation for this notification as defined in TD-1.1 or the hiveot extensions (HTOp...)
	// This identifies the notification type and is a required field
	Operation string `json:"operation"`

	// ThingID of the thing this notification is from.
	// For messages to/from consumers this is the digitwin dThingID
	// For messages from/to agents this is the agent ThingID
	// This field is required.
	ThingID string `json:"thingID"`

	// Name of the event, action or property affordance the notification is from.
	// This field is optional and only required for specific operations.
	Name string `json:"name,omitempty"`

	// Data for the notification as described in the TD affordance dataschema.
	// If the operation is one of the Thing level operations, the input is specified
	// by the operation's dataschema.
	Data any `json:"input,omitempty"` // native

	// Created holds the date-time the notification was created. using RFC3339milli
	// This MUST be set by the protocol binding if not provided.
	Created string `json:"timestamp"`

	//--- additional optional fields

	// MessageID unique ID of the message. Intended to detect duplicates.
	// Generated by the protocol binding.
	MessageID string `json:"messageID"`
}

// RequestMessage for sending a request for an operation on a Thing.
// All agents (or things) are required to send a response when a request is received.
//
// The following operations are considered to be requests:
//
//   - invokeaction  [WoT]
//   - subscribe, unsubscribe [WoT]
//   - observe, unobserve [WoT]
//   - readproperty, readallproperties [WoT]
//   - queryaction, queryallactions [WoT]
//   - readevent, readallevents  (of a Thing)  [HiveOT extension]
//   - readtd, readalltds  (of a directory or thing) [HiveOT extension]
type RequestMessage struct {
	// MessageType identifies this message payload as a request
	// This is set to the value of MessageTypeRequest
	MessageType string `json:"type"`

	// The operation for this message as defined in TD-1.1 or the hiveot extensions (HTOp...)
	// This identifies the request and is a required field
	Operation string `json:"operation"`

	// ThingID of the thing this request is for.
	// For messages to/from consumers this is the digitwin dThingID
	// For messages from/to agents this is the agent ThingID
	// This field is required.
	ThingID string `json:"thingID"`

	// Name of the event, action or property affordance the request is for.
	// This field is optional and only required for specific operations.
	Name string `json:"name,omitempty"`

	// Input for the request as described in the TD affordance dataschema.
	// If the operation is one of the Thing level operations, the input is specified
	// by the operation's dataschema. WoT doesn't have this yet so hiveot will
	// define the missing bits if any.
	Input any `json:"input,omitempty"` // native

	// RequestID of the message. Uniquely identifies the request and must be included
	// in the response.
	// This is optional. If omitted, no response will be sent.
	RequestID string `json:"requestID,omitempty"`

	//--- fields populated by the protocol transport

	// SenderID is the account ID of the client sending the request.
	// The protocol server MUST set this to the authenticated client.
	SenderID string `json:"senderID,omitempty"`

	// Created holds the timestamp the data was created using RFC3339milli
	// This MUST be set by the protocol binding if not provided.
	Created string `json:"timestamp"`

	// MessageID unique ID of the message. Intended to detect duplicates.
	// Generated by the protocol binding.
	MessageID string `json:"messageID"`
}

// CreateResponse is a helper to easily create a response from a request
func (req *RequestMessage) CreateResponse(status string, output any, err error) (resp ResponseMessage) {
	resp = NewResponseMessage(req.Operation, req.ThingID, req.Name, output, nil, req.RequestID)
	resp.Status = status
	resp.MessageID = shortid.MustGenerate()
	if err != nil {
		resp.Error = err.Error()
	}
	return resp
}

// ResponseMessage serves to notify a single client of the result of a request.
type ResponseMessage struct {
	// MessageType identifies this message payload as a response
	// This is set to the value of MessageTypeResponse
	MessageType string `json:"type"`

	// The operation this is a response to. This is the operation provided in the request.
	Operation string `json:"operation"`

	// RequestID of the message. Uniquely identifies the request and must be included
	// in the response.
	// This is required. If omitted, the response will be ignored.
	RequestID string `json:"requestID"`

	// Status of the request processing: pending, running, completed or failed
	// If status is failed then Error holds the reason and Output possible details
	Status string `json:"status"`

	// Output for the request as described in the TD affordance dataschema.
	// If the operation is one of the Thing level operations, the output is specified
	// by the operation's dataschema. WoT doesn't have this yet so hiveot will
	// define the missing bits if any.
	Output any `json:"output"` // native

	// Optional error response. If an error is set then output contains possible
	// detail and Status is set to Failed
	Error string `json:"error"`

	// Timestamp the request was received by the thing agent
	Received string `json:"received"`

	// Timestasmp the status was updated in this response
	Updated string `json:"timestamp"`

	//--- additional optional fields

	// ThingID of the thing this is a response from.
	// For messages to/from consumers this is the digitwin dThingID
	// For messages from/to agents this is the agent ThingID
	// This field is optional and intended to help debugging and logging.
	ThingID string `json:"thingID,omitempty"`

	// Name of the event, action or property affordance this is a response of.
	// This field is optional and intended to help debugging and logging.
	Name string `json:"name,omitempty"`

	// MessageID unique ID of the message. Intended to detect duplicates.
	// Generated by the protocol binding.
	MessageID string `json:"messageID"`
}

// NewRequestMessage creates a new RequestMessage instance.
//
//	operation is the request operation WoTOp... or HTOp...
//	thingID is the thing the value applies to (destination of action or source of event)
//	name is the name of the property, event or action affordance as described in the thing TD
//	input is the request input as defined in the corresponding affordance dataschema.
//	requestID unique ID of the request or empty when no response is expected
func NewRequestMessage(operation string, thingID, name string, input any, requestID string) RequestMessage {
	return RequestMessage{
		MessageType: MessageTypeRequest,
		Operation:   operation,
		ThingID:     thingID,
		Name:        name,
		Input:       input,
		RequestID:   requestID,
		Created:     time.Now().Format(wot.RFC3339Milli),
		MessageID:   shortid.MustGenerate(),
	}
}

// NewResponseMessage creates a new ResponseMessage instance.
//
// This sets status to completed if err is nil or Failed if err is provided.
// If the status is not completed or failed then set it to the appropriate value after creation.
//
//	operation is the request operation WoTOp... or HTOp...
//	thingID is the thing the value applies to (destination of action or source of event)
//	name is the name of the property, event or action affordance as described in the thing TD
//	output is the output data as defined in the corresponding affordance dataschema or nil if not applicable
//	err is the optional error response
//	requestID unique ID of the request or empty when no response is expected
func NewResponseMessage(operation string, thingID, name string, output any, err error, requestID string) ResponseMessage {
	resp := ResponseMessage{
		MessageType: MessageTypeResponse,
		Operation:   operation,
		ThingID:     thingID,
		Name:        name,
		Output:      output,
		RequestID:   requestID,
		Received:    "",
		Status:      StatusCompleted,
		Updated:     time.Now().Format(wot.RFC3339Milli),
		MessageID:   shortid.MustGenerate(),
	}
	if err != nil {
		resp.Error = err.Error()
		resp.Status = StatusFailed
	}
	return resp
}

// NewNotificationMessage creates a new NotificationMessage instance.
//
//	operation is the operation describing the notification WoTOp... or HTOp...
//	thingID is the thing the notification applies to
//	name is the name of the property, event or action affordance as described in the thing TD
//	data is the notification data as defined in the corresponding affordance dataschema, or nil if not applicable.
func NewNotificationMessage(operation string, thingID, name string, data any) NotificationMessage {
	return NotificationMessage{
		MessageType: MessageTypeNotification,
		Operation:   operation,
		ThingID:     thingID,
		Name:        name,
		Data:        data,
		MessageID:   shortid.MustGenerate(),
		Created:     time.Now().Format(wot.RFC3339Milli),
	}
}
