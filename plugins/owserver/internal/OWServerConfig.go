package internal

import "os"

// OWServerConfig contains the plugin configuration
type OWServerConfig struct {
	// BindingID is the client ID of this binding instance. Default is owserver-{hostname}
	// There is normally no need to change this unless multiple instances are run
	// on the same host.
	BindingID string `yaml:"bindingID"`

	// ServerURL optional hub address to connect to.
	// Default "" for auto discovery.
	// * "unix://path/to/socket"     for UDS
	// * "unix://@/mqttinmemuds"     for in-memory UDS
	// * "nats://address:4222/"      for Nats server TCP/TLS
	// * "mqtts://address:8441/"     for Nats server TCP/TLS
	// * "mqttwss://address:8444/ws" for Websocket
	ServerURL string `yaml:"serverUrl,omitempty"`

	// Keyfile with the client's public/private key
	// Generated on first startup if not found.
	// Default is {certsDir}/owserver.pem | .nkey
	KeyFile string `yaml:"keyFile,omitempty"`

	// File with the clients authentication token.
	// Generated by the launcher.
	// Default is {certsDir}/owserver.jwt
	AuthTokenFile string      `yaml:"authTokenFile,omitempty"`
	AuthToken     interface{} `yaml:"-"` // loaded from token file
	//AuthTokenPub  string      `yaml:"-"` // from token file

	// OWServerURL optional http://address:port of the EDS OWServer-V2 gateway.
	// Default "" is auto-discover using DNS-SD
	OWServerURL string `yaml:"owServerURL,omitempty"`

	// OWServerLogin and password to the EDS OWserver using Basic Auth.
	OWServerLogin    string `yaml:"owServerLogin,omitempty"`
	OWServerPassword string `yaml:"owServerPassword,omitempty"`

	// TDInterval optional override interval of republishing the full TD, in seconds.
	// Default is 12 hours
	TDInterval int `yaml:"tdInterval,omitempty"`

	// PollInterval optional override interval of polling Thing values, in seconds.
	// Default is 60 seconds
	PollInterval int `yaml:"pollInterval,omitempty"`

	// RepublishInterval optional override interval that unmodified Thing values are republished, in seconds.
	// Default is 3600 seconds
	RepublishInterval int `yaml:"republishInterval,omitempty"`
}

//// Setup config.
//// This loads the key and token from file
//func (cfg *OWServerConfig) Setup() ([]byte, string) {
//	key, err := os.ReadFile(cfg.KeyFile)
//	token, err := os.ReadFile(cfg.AuthTokenFile)
//	return key, string(token)
//}

// NewConfig returns a OWServerConfig with default values
func NewConfig() OWServerConfig {
	cfg := OWServerConfig{}

	// ensure valid defaults
	hostName, _ := os.Hostname()
	cfg.BindingID = "owserver-" + hostName
	cfg.TDInterval = 3600 * 12
	cfg.PollInterval = 60
	cfg.RepublishInterval = 3600
	cfg.AuthTokenFile = cfg.BindingID + ".jwt"
	cfg.KeyFile = cfg.BindingID + ".key"
	return cfg
}
