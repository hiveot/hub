// Package launcher with the agent request handler for using service 'Admin'
// This builds a service agent that calls the service.
// DO NOT EDIT. This file is auto generated by tm2go. Any changes will be overwritten.
// Generated 13 Oct 2025 14:21 PDT. 
package launcher

import "errors"
import "github.com/hiveot/hub/messaging/tputils"
import "github.com/hiveot/hub/messaging"


// IAdminService defines the interface of the 'Admin' service
//
// This defines a method for each of the actions in the TD. 
// 
type IAdminService interface {

   // ListPlugins List Plugins
   // List available plugins and their status
   ListPlugins(senderID string, onlyrunning bool) (plugins []PluginInfo, err error)

   // StartAllPlugins Start All
   // Start all available plugins
   StartAllPlugins(senderID string) error

   // StartPlugin Start A Plugin
   // Start a plugin
   StartPlugin(senderID string, pluginID string) (pluginStatus PluginInfo, err error)

   // StopAllPlugins Stop All
   // Stop all running plugins
   StopAllPlugins(senderID string, fullStop bool) error

   // StopPlugin Stop A Plugin
   // Stop a plugin
   StopPlugin(senderID string, pluginID string) (pluginStatus PluginInfo, err error)
}

// NewHandleAdminRequest returns an agent handler for Thing 'admin' requests.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
// 
// This returns the marshalled response data or an error.
func NewHandleAdminRequest(svc IAdminService)(func(msg *messaging.RequestMessage, c messaging.IConnection) *messaging.ResponseMessage) {
    return func(msg *messaging.RequestMessage, c messaging.IConnection) *messaging.ResponseMessage {
        var output any
        var err error
        switch msg.Name {
            case "listPlugins":
                var args bool
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.ListPlugins(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: " + err.Error())
                }
            case "startAllPlugins":
                if err == nil {
                  err = svc.StartAllPlugins(msg.SenderID)
                } else {
                  err = errors.New("bad function argument: " + err.Error())
                }
            case "startPlugin":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.StartPlugin(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: " + err.Error())
                }
            case "stopAllPlugins":
                var args bool
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  err = svc.StopAllPlugins(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: " + err.Error())
                }
            case "stopPlugin":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.StopPlugin(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: " + err.Error())
                }
            default:
            	err = errors.New("Unknown Method '"+msg.Name+"' of service '"+msg.ThingID+"'")
        }
        return msg.CreateResponse(output,err)
    }
}