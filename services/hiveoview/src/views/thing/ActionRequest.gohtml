<!--Action dialog template
    The action dialog displays the input and progress of an action.
    Used to initiate a new action, show the status of an action in progress and
    can be used to view historical actions.
    Once submitted successfully this is replaced with a delivery progress content.
 -->

{{- /*gotype:github.com/hiveot/hub/services/hiveoview/src/views/thing.ActionRequestTemplateData*/ -}}

<h-modal show showClose showCancel showSubmit>
	<article style="min-width: 410px;max-width:80vw;max-height:90vh">
		<header class="h-row-centered" style="height: 60px">
			<h3>{{.Action.Title}}</h3>
		</header>

		<main>
			<form id="action-input-form" style="overflow:auto;max-height:80vh">
				<label>Action
            {{/* textarea doesnt resize so do this instead*/}}
					<div style="color:gray;
                     border:1px solid var(--pico-form-element-border-color);
                     padding: var(--pico-form-element-spacing-vertical) var(--pico-form-element-spacing-horizontal);
                     margin-bottom: var(--pico-spacing);">
						<i>{{.Description}}</i>
					</div>
				</label>

          {{/* Show the previous action status and input if available */}}
          {{if .LastActionRecord}}
						<label>Previous Action
							<table class="prevaction">
								<tr style="width:800px">
									<td>Time</td>
									<td style="width:max-content">{{.LastActionTime}} ({{.LastActionAge}} ago)</td>
								</tr>
								<tr>
									<td>Status</td>
									<td>{{.LastActionRecord.Status}}
                      {{if .LastActionRecord.Error}}
												<span>: {{.LastActionRecord.Error}}</span>
                      {{end}}
									</td>
								</tr>
                  {{if .Action.Input }}
										<tr>
											<td>Input</td>
											<td>{{.InputValue.Value.ToString 120}}</td>
										</tr>
                  {{end}}
							</table>
						</label>

          {{end}}


          {{/* if input is required*/}}
          {{if .Action.Input}}
						<div>
                {{/*TODO: support object with multiple input fields*/}}
                {{/* the 'for' id must match that of RenderInputValue*/}}
							<label for="input-{{.Name}}">{{.InputValue.Schema.Title}}</label>
                {{template "RenderInputValue.gohtml" .InputValue}}
						</div>
          {{end}}
			</form>

        {{/* Show the progress bar after submit*/}}
			<span>
			<progress id="action-progress-bar"
			          style="visibility:hidden; position:absolute;left:1px;width:99%;border-radius:0"></progress>
			<p id="action-progress-error" style="visibility:hidden; color:red">error</p>
		</span>

		</main>

		<footer>
        {{- /*close-modal is handled by h-modal component*/ -}}
			<button id="cancelBtn"
			        title="cancel and close the dialog"
			        onclick="this.dispatchEvent(new Event('close-modal',{bubbles:true}))"
			        class="secondary">Cancel
			</button>
        {{/* FIXME-1: disable submit if input type is not supported*/}}
        {{/* FIXME-2: disable submit while waiting for the result*/}}
			<button type="submit"
              {{if .Action.Input}}
                  {{if not .Action.Input.IsNative}}
										disabled
										title="input format not supported"
                  {{end}}
              {{end}}
							hx-post="{{.SubmitActionRequestPath}}"
							hx-include="#action-input-form"
							hx-swap="none"
							hx-on::before-request="showProgress(this)"
							hx-on::after-request="onSubmitCompleted(event, this)"
			>Submit
			</button>
		</footer>

	</article>
</h-modal>

<script>

    // disable the submit button and show the progress bar
    function showProgress(submitBtn) {
        submitBtn.disabled = true
        let el = document.getElementById("action-progress-bar")
        el.style.visibility = "visible"
    }

    // close the modal when completed or present an error
    function onSubmitCompleted(ev, submitBtn) {
        ev.stopImmediatePropagation()
        let details = ev.detail
        if (details.successful) {
            let closeEv = new Event('close-modal', {bubbles: true})
            submitBtn.dispatchEvent(closeEv)
		        return
        }
        // submit failed, show the error
        submitBtn.disabled = false
        // hide the progress bar
        let el = document.getElementById("action-progress-bar")
        el.style.visibility = "hidden"
        // show the error instead
        let el2 = document.getElementById("action-progress-error")
        el2.style.visibility = "visible"
        el2.textContent=ev.detail.xhr.response
    }
</script>

<style>
    .prevaction {
        /*display: grid;*/
        border: 1px solid var(--pico-form-element-border-color);
    }

    .prevaction td {
        background-color: inherit;
        border: none;
    }
</style>