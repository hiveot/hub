<!--RenderInteractionValue.gohtml
    Render the value of an InteractionOutput with units.
     * Renders Text, int/numbers, and enums.
     * Booleans are rendered as switches or indicators.
     * use htmx to automatically update the value on an SSE event
     * Link the text/number value to the history page

 -->

{{- /*gotype:github.com/hiveot/hub/lib/consumedthing.InteractionOutput*/ -}}

{{/*	=== Integer, Number, Enum as Text Value ===*/}}
{{/* Wrap the value in a link to the history page*/}}
{{/*Listen to /affordancetype/thingid/name sse event for updating the value*/}}
<a title="View history"
   href="/value/{{.AffordanceType}}/{{.ThingID}}/{{.Name}}/history"
   hx-get="/value/{{.AffordanceType}}/{{.ThingID}}/{{.Name}}/history"
   hx-target="#historyPage"
   hx-swap="innerHtml"
   hx-trigger="click"
   hx-on::after-request="navigateTo(null,this.href)"
>

    {{if eq .Schema.Type "boolean"}}
        {{/*	=== Boolean Value === switch or status indicator */}}
        {{if .Schema.ReadOnly }}
	        <iconify-icon icon="mdi:alert-circle" inline
		          {{if .Value.Boolean}} class="alert-icon" {{else}} class="no-alert-icon" {{end}}
            {{if eq .AffordanceType "action"}}
    			sse-swap="property/{{.ThingID}}/{{.Name}}"
            {{else}}
                sse-swap="{{.AffordanceType}}/{{.ThingID}}/{{.Name}}"
            {{end}}
            hx-swap="none"
            hx-on::sse-before-message="this.className=isChecked(event)?'alert-icon':'no-alert-icon'"
	        >
	        </iconify-icon>
        {{else}}
            {{/*    <h-switch name="value" off="Off" on="On" value="{{$iv}}"></h-switch>*/}}
			<input name="output-{{.Name}}-switch"
			       type="checkbox" role="switch" disabled
			       style="margin-top:0"
                {{/* Action output is updated through its corresponding property value */}}
                {{if eq .AffordanceType "action"}}
					sse-swap="property/{{.ThingID}}/{{.Name}}"
                {{else}}
					sse-swap="{{.AffordanceType}}/{{.ThingID}}/{{.Name}}"
                {{end}}
                hx-swap="none"
                hx-on::sse-before-message="this.checked=isChecked(event)"
                {{if .Value.Boolean}}checked{{end}}
			/>
        {{end}}
    {{else}}

        {{/* Dynamic refresh on event or property notification. Actions only update
           if there is a corresponding property. */}}
			<span
		        {{if eq .AffordanceType "action"}}
			        sse-swap="property/{{.ThingID}}/{{.Name}}"
                {{else}}
			        sse-swap="{{.AffordanceType}}/{{.ThingID}}/{{.Name}}"
                {{end}}
				      hx-target="this"
				>
				{{.Value.Text}}
			</span>
			&nbsp;{{.UnitSymbol}}
    {{end}}
</a>

{{if eq .Schema.Type "boolean"}}
	<script>
      function isChecked(ev) {
          // console.log("RenderOutputValue. isChecked: '"+ev.detail.type+"'= "+ev.detail.data,ev)
          if (ev.detail.data === "true") {
              return true
          }
          return false
      }
	</script>
{{end}}

<style>
    input[type=checkbox][role=switch]:checked {
        color: red;
    }
    .no-alert-icon {
        color: gray;
        font-size: 1.5em;
    }
    .alert-icon {
        color: red;
		    font-size: 1.5em;
    }
</style>