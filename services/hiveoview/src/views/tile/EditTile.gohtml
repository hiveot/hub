<!--Tile editor dialog-->

{{- /*gotype:github.com/hiveot/hub/services/hiveoview/src/views/tile.EditTileTemplateData*/ -}}

<h-modal id="editTileModal"
         show showClose shadow>
	<article>
		<header class="h-row-centered" style="height: 60px">
			<h3 style="margin:0">Edit Tile</h3>
		</header>
		<main>
			<form id="edit-tile-form" style="overflow:auto"
			>

          {{/*Title and Type*/}}
				<fieldset>

					<label title="Tile ID: {{.Tile.ID}}">
						Title:
						<input autofocus id="tile-title" name="title" required
						       value="{{.Tile.Title}}" placeholder="{{.Tile.Title}}"
						/>
					</label>

					<label>
						Type:
						<select id="tile-type" name="tileType" autofocus
						        onchange="setSourceForImageType()">

                {{ range $ttID, $ttLabel := .TileTypeLabels}}
									<option value="{{$ttID}}"
                          {{if eq $ttID $.Tile.TileType}} selected {{end}}>
                      {{$ttLabel}}
									</option>
                {{end}}
						</select>
					</label>
				</fieldset>


				<fieldset id="image-source-section">
					<label>Image URL
						<input id="image-url" type="url" name="imageURL" placeholder="Enter a background image URL"
						       value="{{.Tile.ImageURL}}">
					</label>
					<label class="h-row" style="white-space: nowrap">
						Reload Interval
						<input name="reloadInterval"
						       type="number" min="3"
						       placeholder="Nr of seconds to reload the image"
						       value="{{.Tile.ImageReloadInterval}}">
						Seconds
					</label>
				</fieldset>

				<fieldset id="sources-section">
            {{/* Sources if type is not image*/}}
					<label class="h-row">
						Sources:
						<button type="button" class="outline h-icon-button"
						        title="Add Source"
						        hx-target="#modalLevel2"
						        hx-get="{{.RenderSelectTileSourcesPath}}"
						        hx-swap="innerHTML"
						>
							<iconify-icon icon='mdi:playlist-plus'></iconify-icon>
						</button>
					</label>

            {{/* NOTE!: RenderSelectSources uses this ID 'edit-tile-sources' to add sources in this list */}}
					<h-grid-table2 id="edit-tile-sources" title="{{.Tile.ID}}" striped border>
              {{/* Header*/}}
						<li title-row>
							<div ></div>
							<div width="minmax(100px, max-content)">Thing Source</div>
							<div width="minmax(60px, max-content)">Value</div>
							<div width="minmax(100px,max-content)">Updated</div>
							<div >remove</div>
						</li>
              {{range $k,$v := .Tile.Sources}}
								<li id="{{$k}}-source" draggable="true">
                    {{/*drag handle to re-order the list*/}}
									<div class="h-row-centered drag-handle" >
										<iconify-icon style="font-size:24px" icon='mdi:drag'></iconify-icon>
									</div>
                    {{/* The hidden input is used to submit list of sources with the form*/}}
									<input type="hidden" name="sources"
									       value="{{$v.AffordanceType}}/{{$v.ThingID}}/{{$v.Name}}"/>
									<input name="sourceTitles" value="{{$v.Title}}"
									       style="margin:0"
									       title="Edit the label here. ThingID: {{$v.ThingID}}/{{$v.Name}}"/>
									<div>{{$.GetValue $v}}</div>
									<div>{{$.GetUpdated $v}}</div>
                    {{/*delete source*/}}
									<button type="button" class="h-row-centered outline h-icon-button"
									        style="border:none"
									        onclick="deleteRow(this.parentNode)"
									>
										<iconify-icon icon="mdi:delete"></iconify-icon>
									</button>
								</li>
              {{end}}
{{/*						Insertion point for adding rows*/}}
							<li id="insert-tile-sources-here" style="display:none"></li>
					</h-grid-table2>
				</fieldset>

          {{/*Select the background color/transparency (when not image)*/}}
				<fieldset id="backgroundSection">
					<label>
						<input id="background-enabled" type="checkbox" name="bgEnabled"
                   {{if .Tile.BackgroundEnabled}}checked{{end}}
						>
						Background
					</label>

					<fieldset style="padding:8px; border: var(--pico-card-border);"
					          id="bgEnabledSection" class="h-col" {{if not .Tile.BackgroundEnabled}} disabled {{end}}>
              {{/* Option to set background color */}}
						<label class="h-row">
							<label style="width:100%">
								Color
								<input id="tile-bg-color" name="bgColor"
								       type="color" style="margin-bottom: 0"
								       title="{{.Tile.BackgroundColor}}"
								       value="{{.Tile.BackgroundColor}}">
							</label>
						</label>

						<span class="h-row">
								<label style="text-wrap: nowrap" for="tile-bg-transparency">Transparency: </label>
								<input id="tile-bg-transparency" name="bgTransparency"
								       class="input-percent"
								       type="range" min="0" max="1" step="0.1"
								       value="{{.Tile.BackgroundTransparency}}">
					</span>
					</fieldset>
				</fieldset>

			</form>
		</main>

		<footer>
        {{- /*close-modal is handled by h-modal component*/ -}}
			<button id="cancelBtn"
			        onclick="this.dispatchEvent(new Event('close-modal',{bubbles:true}))"
			        class="secondary">Cancel
			</button>
			<button type="submit"
			        hx-include="#edit-tile-form"
			        hx-post="{{.SubmitEditTilePath}}"
			        hx-swap="none"
			        hx-on::after-request="onSubmitCompleted(event, this)"
			>Submit
			</button>
		</footer>
	</article>
</h-modal>



<script>

    // Listen for the editor ready event and setup the inputs
    document.getElementById("editTileModal").addEventListener("ready", () => {
        setup()
    })

    // Listen for the background enable/disable input toggle and enable or diable the background image
    document.getElementById("background-enabled")
        .addEventListener("change", (ev) => {
            if (ev.target.checked) {
                enableBackground()
            } else {
                disableBackground()
            }
        })

    // delete the table row
    function deleteRow(rowEl) {
        let table = rowEl.parentNode;
        table.removeChild(rowEl);
    }

    // Disable the background settings
    // This disables the background input section and hides any image.
    function disableBackground() {
        // console.log("disableBackground")
        let bgSectionEl = document.getElementById("bgEnabledSection")
        // let bgShownEl = document.getElementById("background-shown");
        bgSectionEl.disabled = true
        // bgShownEl.hidden = true
    }

    var _el

    function dragOver(e) {
        if (isBefore(_el, e.target))
            e.target.parentNode.insertBefore(_el, e.target);
        else
            e.target.parentNode.insertBefore(_el, e.target.nextSibling);
    }

    function dragStart(e) {
        e.dataTransfer.effectAllowed = "move";
        e.dataTransfer.setData("text/plain", null); // Thanks to bqlou for their comment.
        _el = e.target;
    }

    // Enable the background settings
    // This enables the background input section, show the stored background-image
    // in the shown background-shown image.
    // If a URL is set, use it for the shown image.
    function enableBackground() {
        // console.log("enableBackground")
        let bgSectionEl = document.getElementById("bgEnabledSection")
        bgSectionEl.disabled = false
    }

    function isBefore(el1, el2) {
        if (el2.parentNode === el1.parentNode)
            for (var cur = el1.previousSibling; cur && cur.nodeType !== 9; cur = cur.previousSibling)
                if (cur === el2)
                    return true;
        return false;
    }

    // set the background color to inherit
    // function inheritBackgroundColor() {
    //     let el = document.getElementById("tile-bg-color")
    //     el.value = ""
    // }

    // if type is Image, show the URL otherwise the sources
    function setSourceForImageType() {
        let tileTypeEl = document.getElementById("tile-type")
        let backgroundSection = document.getElementById("backgroundSection")
        let sourcesSectionEl = document.getElementById("sources-section")
        let imageSourceSectionEl = document.getElementById("image-source-section")
        // todo: use the actual type ID
        if (tileTypeEl.value === "image") {
            sourcesSectionEl.hidden = true
            imageSourceSectionEl.hidden = false
            backgroundSection.hidden = true
        } else {
            sourcesSectionEl.hidden = false
            imageSourceSectionEl.hidden = true
            backgroundSection.hidden = false
        }
    }

    function setup() {
        let bgEnabledEl = document.getElementById("background-enabled")
        if (bgEnabledEl.checked) {
            enableBackground()
        } else {
            disableBackground()
        }
        setSourceForImageType()
    }


    // Ugly to have to do this!
    function onSubmitCompleted(ev, btn) {
        ev.stopImmediatePropagation()
        let details = ev.detail
        if (details.successful) {
            let closeEv = new Event('close-modal', {bubbles: true})
            btn.dispatchEvent(closeEv)
        }
    }
</script>