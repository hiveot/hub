<!--Tile editor dialog-->

{{- /*gotype:github.com/hiveot/hub/services/hiveoview/src/views/tile.EditTileTemplateData*/ -}}

<h-modal show showClose shadow>
		<article>
			<header class="h-row-centered" style="height: 60px">
					<h3 style="margin:0">Edit Tile</h3>
			</header>
			<main>
				<form id="edit-tile-form" style="overflow:auto"
				>

					<fieldset>
						<label title="Tile ID: {{.Tile.ID}}"
										for="tile-title">Title: </label>
						<input autofocus id="tile-title" name="title" required
						       value="{{.Tile.Title}}" placeholder="{{.Tile.Title}}"
						/>

						<label for="tile-type">Type: </label>
						<select id="tile-type" name="tileType" autofocus>
                {{ range $ttID, $ttLabel := .TileTypeLabels}}
									<option value="{{$ttID}}"
													{{if eq $ttID $.Tile.TileType}} selected {{end}}>
                      {{$ttLabel}}
									</option>
                {{end}}
						</select>

						<label  class="h-row">Sources:
							<button type="button" class="outline h-icon-button"
							        title="Add Source"
							        hx-target="#modalLevel2"
							        hx-get="{{.RenderSelectTileSourcesPath}}"
							        hx-swap="innerHTML"
							>
								<iconify-icon icon='mdi:playlist-plus'></iconify-icon>
							</button>
						</label>

						<ul id="edit-tile-sources"
						    class="h-grid-table tile-sources-table" striped border>
              {{/* Header*/}}
							<li>
								<div></div>
								<div>Thing Event</div>
								<div>Value</div>
								<div>Updated</div>
							</li>
              {{range $k,$v := .Tile.Sources}}
	                <li>
										{{/* The hidden input is used to submit list of sources with the form*/}}
		                <input type="hidden" name="sources"
		                       value="{{$v.ThingID}}/{{$v.Name}}"/>
		                <button type="button" class="h-row outline h-icon-button"
		                        onclick="deleteRow(this.parentNode)"
		                >
			                <iconify-icon icon="mdi:delete"></iconify-icon>
		                </button>
				            <input name="sourceTitles" value="{{$v.Title}}"
				                   style="margin:0"
				                   title="Edit the label here. ThingID: {{$v.ThingID}}/{{$v.Name}}"/>
		                <div class="h-row">{{$.GetValue $v.ThingID $v.Name}}</div>
		                <div class="h-row">{{$.GetUpdated  $v.ThingID $v.Name}}</div>
	                </li>
							{{end}}
						</ul>

					</fieldset>
				</form>
			</main>

			<footer>
	      {{- /*close-modal is handled by h-modal component*/ -}}
				<button id="cancelBtn"
				        onclick="this.dispatchEvent(new Event('close-modal',{bubbles:true}))"
				        class="secondary">Cancel
				</button>
				<button type="submit"
				        hx-include="#edit-tile-form"
				        hx-post="{{.SubmitEditTilePath}}"
				        hx-swap="none"
				        hx-on::after-request="onSubmitCompleted(event, this)"
				>Submit
				</button>
		</footer>
	</article>
</h-modal>

<style>
    .tile-sources-table {
        grid-template-columns:
          max-content                 /*delete icon*/
	        minmax(200px, max-content)          /*Name*/
	        minmax(100px, max-content)        /*Value*/
	        minmax(100px, max-content); /*updated*/
    }

</style>


<script>
		// tileSources holds the sources currently being edited
		let tileSources = {{.Tile.Sources}}


				// listen for events to add a source
				// @param ev event carrying thingID and property/event name
				document.addEventListener("editTileAddSource", (ev)=>{

				})

		// add a table row
		function addRow() {
        let table = rowEl.parentNode;
        table.removeChild(rowEl);
    }


    // delete the table row
    function deleteRow(rowEl) {
        let table = rowEl.parentNode;
        table.removeChild(rowEl);
    }

    // Ugly to have to do this!
    function onSubmitCompleted(ev, btn) {
        ev.stopImmediatePropagation()
        let details = ev.detail
        if (details.successful) {
            let closeEv = new Event('close-modal',{bubbles:true})
            btn.dispatchEvent(closeEv)
        }
    }
</script>