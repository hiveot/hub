<!--Gauge Tile renderer-->
{{- /*gotype:github.com/hiveot/hub/services/hiveoview/src/views/tile.RenderTileTemplateData*/ -}}
{{/*If a gauge has a second source, the second is shown in the gauge box including its unit*/}}

{{if .Tile.Sources }}
		{{$nrSources := len .Tile.Sources}}
  	{{$source1 := index .Tile.Sources 0 }}
    {{$iout := $.GetOutputValue $source1}}

    {{$value2 := ""}}
	  {{if gt $nrSources 1}}
        {{$source2 := index .Tile.Sources 1 }}
        {{$iout2 := $.GetOutputValue $source2}}
			  {{$value2 = $iout2.ToString}}
    {{end}}
	{{/* Add a link to view history of the value */}}
	<a style="display:inline-block; width:100%; height:100%;"	
 		href="/value/{{$iout.AffordanceType}}/{{$iout.ThingID}}/{{$iout.Name}}/history"
   		hx-get="/value/{{$iout.AffordanceType}}/{{$iout.ThingID}}/{{$iout.Name}}/history"
   		hx-target="#historyPage"
   		hx-swap="innerHtml"
   		hx-trigger="click"
   		hx-on::after-request="navigateTo(null,this.href)"
	>		
		<h-gauge
		 id="{{$.Tile.ID}}" class="gauge-card"
		         linear='{{eq $.Tile.TileType "linear-gauge"}}'
		         gauge-type="{{$.Tile.GaugeType}}"
		         override="{{$.Tile.GaugeOverride}}"
		         units="{{$iout.UnitSymbol}}"
		         max-value="{{$iout.Schema.Maximum}}"
		         min-value="{{$iout.Schema.Minimum}}"
		         value="{{$iout.Value.Number}}"
		         value2="{{$value2}}"
		         sse-swap="{{$source1.AffordanceType}}/{{$source1.ThingID}}/{{$source1.Name}}"
		         hx-target="this"
		         hx-swap="none"
		         hx-on::sse-before-message="updateGauge(event, '{{$iout.UnitSymbol}}')"
		         title="{{$iout.Value.Number}} {{$iout.UnitSymbol}}"
		>
		</h-gauge>
	</a>
{{end}}

<style>
	.gauge-card {
			/*display: inline-flex;*/
			/*width: 100%;*/
			/*height: 100%;*/
	}
</style>

<script>
		// how best to configure a gauge?
		// option 1: presets based on unit type: eg temp, humidity, illumination, pressure
		//           option to select the unit override.
		//           use min/max from source, if set
		//  pro: good presentation out of the box
		// option 2: separate customizable details panel, based on preset of option 1


    // updateGauge uses the SSE event to update the gauge value.
    updateGauge = (event, unit) => {
        // console.log("updateGauge",event)
        let gaugeEl = event.currentTarget
        // gaugeEl.setValue(event.detail.data)
		    gaugeEl.setAttribute("value",event.detail.data)
		    gaugeEl.title = event.detail.data + " " + unit
    }
</script>
