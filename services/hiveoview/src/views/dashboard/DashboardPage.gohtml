<!--After an initial load without data, auto-reload when viewed. -->


{{- /*gotype:github.com/hiveot/hub/services/hiveoview/src/views/dashboard.DashboardPageTemplateData*/ -}}
{{if not .Dashboard}}
	<div hx-trigger="intersect once"
	     hx-get=""
	     hx-target="#dashboardPage"
	>
		<p>reloading page fragment...</p>
		<h-loading></h-loading>
	</div>

{{else}}


    {{/*Show the dashboard. Reload when tiles are deleted*/}}
		<main id="current-dashboard" class="dashboard"
          style="position:relative"
		      hx-get=""
		      hx-trigger="sse:{{.DashboardUpdatedEvent}}, refreshPage from:body"
		      hx-target="#dashboardPage"
		>

        {{if .Dashboard.BackgroundEnabled}}
					<h-img class="dashboard-background-image"
					       interval={{.Dashboard.BackgroundReloadInterval}}
					       src="{{.Background}}">
					</h-img>
        {{end}}

        {{/* Add a div to ensure filling the screen size*/}}
			<div style="flex-grow:1">
          {{/* change event: When layout changes push the new layout to the server*/}}
				<div class="grid-stack"
				     hx-trigger="change"
				     hx-post="{{.SubmitDashboardLayoutPath}}"
				     hx-vals='js:{layout: getLayout(), size:getLayoutSize()}'
				     hx-swap="none"
				>
            {{range $k,$v := .Dashboard.Tiles }}
							<div class="grid-stack-item " gs-id="{{$k}}"
							     gs-min-h="4"
							     gs-min-w="2"
							     gs-size-to-content="false">
								<div class="grid-stack-item-content" style="overflow:unset">
                    {{template "RenderTile.gohtml" $.GetTileTemplateData $k}}
								</div>
							</div>
            {{end}}

				</div>
			</div>
		</main>

		<script>
        var grid;
        var options;
        startGridStack();

        // initialize the dashboard using gridstack
        function startGridStack() {
            // debugger;
            options = { // put in gridstack options here
                animate: false,// {{.Dashboard.GridLayouts.Animate}},
                cellHeight: 30,     // fixed row height to avoid scaling content
                column: 24,
                columnOpts: {
                    // columnMax: 24,
                    // columnWidth: 100,
                    // layout: 'moveScale',
                    layout: "none", // we reload the previously saved layout for the size
                    // layout: "moveResize",
                    //  breakpointForWindow:true,  // not sure what this does window vs grid size?
                    // using breakpoints changes with the layout after resizing such it doesn't restore to old placement
                    // breakpoints: [{w: 300, c: 1}, {w: 500, c: 2}, {w: 800, c: 6}, {w: 1024, c: 12},  {w:4096, c:24}]
                    // breakpoints: [
                    //     {w:300, c:1}, {w:500, c:3}, {w: 600, c: 5}, {w: 800, c: 7},
                    //     {w: 1000, c: 10}, {w:1200, c:12}, {w:1500, c:15}
                    // ]
                },
                //  disable element moving
                disableDrag: false,//{{.Dashboard.Locked}},
                // disable element resizing
                disableResize: false,//{{.Dashboard.Locked}},
                draggable: {
                    // handle: ".drag-target",
                    cancel: ".no-drag"
                },
                float: {{.Dashboard.Grid.Float}},       // false=cells move to the top (false)
                lazyLoad: false,
                margin: "4px",       // gap between widgets
                minRow: 3,
                sizeToContent: false, // this maximizes the widget height which is not what is needed
                staticGrid: {{.Dashboard.Locked}},   // allow resize in edit mode

                //--- custom storage to detect resize
                lastSize: "",
                // map of size by serialized layouts
                layouts:  {{.Dashboard.GridLayouts}},
            };
            grid = GridStack.init(options)//.load(serializedData);

            // htmx posts layout changes to the server but we also need these client side
            grid.on("change", function (ev, items) {
                // console.log("grid.onchange", items)

                let size = getLayoutSize()
                let newLayout = getCurrentLayout()
                // console.log("on grid change. size=",size,"newLayout",  newLayout)
                // debugger
                options.layouts[size] = newLayout
            })

            // listen for screen size changes to reload a new layout
            window.onresize = function () {
                let size = getLayoutSize()
                if (size !== options.lastSize) {
                    options.lastSize = size
                    restoreGridLayout(grid, options.layouts, size)
                    // debugger
                    // using breakpoints doesn't restore the proper size so just set the breakpoints
                }
            }

            // first layout
            let size = getLayoutSize()
            let columns = getSizeColumns(size)
            restoreGridLayout(grid, options.layouts, size, columns)
        }

        // Return the serialized grid item layout.
        function getCurrentLayout() {
            let newLayout = []
            // note, save() is broken and returns negative numbers so this iterates the items instead
            gridItems = grid.getGridItems()
            gridItems.forEach(gridItem => {
                let node = gridItem.gridstackNode
                let newItem = {
                    id: node.id,
                    x: node.x,
                    y: node.y,
                    w: node.w,
                    h: node.h,
                    minW: node.minW,
                    minH: node.minH
                }
                newLayout.push(newItem)
            })
            let serLayout = JSON.stringify(newLayout)
            return serLayout

        }

        // Return the nr of columns for a size "sm, md, lg, xl"
        function getSizeColumns(size) {
            let columns = 24  // xl
            if (size === "sm") {
                columns = 2
            } else if (size === "md") {
                columns = 8
            } else if (size === "lg") {
                columns = 16
            }
            return columns
        }

        // Return the screen size name "sm, md, lg, xl"
        // used to store a separate layout per size
        function getLayoutSize() {
            let size = "xl"
            let w = window.innerWidth;
            if (w < 600) {
                size = "sm"
            } else if (w <= 1280) {
                size = "md"
            } else if (w <= 1920) {
                size = "lg"
            }
            return size
        }

        // load the layout for the current window size into the grid.
        // restore the nr of columns and the layout for the given window size
        function restoreGridLayout(grid, layouts, size) {

            {{if .Dashboard.GridLayouts}}
            // TODO: reload the layout from the server to avoid two devices with
            //  different size overwriting each other.
            //  Alteratively, save only the current size in post.
            if (layouts) {
                let columns = getSizeColumns(size)
                let layoutJSON = layouts[size]
                grid.column(columns)
                if (!layoutJSON) {
                    console.log("No layout for size " + size + ". Keeping current layout")
                } else {
                    let layout = JSON.parse(layoutJSON)
                    if (layout) {
                        // debugger
                        // console.log("restoreGridLayout: size=",size, "columns:",columns, "layout:", layout)
                        // options.column = columns
                        grid.column(columns)
                        grid.load(layout, false)
                    }
                }
            }
            // console.log("loadLayout size=", size)
            {{end}}
        }

        // return the current layout as used by the grid.
        function getLayout() {
            let size = getLayoutSize()
            let serLayout = options.layouts[size]
            return serLayout
        }

        function update() {
            grid.update();
        }

		</script>

		<style>
        .dashboard {
            width: 100%;
            height: 100%;
            overflow: auto;
            display: flex;
            flex-direction: column;
            padding-left: 0;
            padding-right: 0;
        }

        .dashboard-background-image {
            position:absolute;
            width:100%;
            height:100%;
            pointer-events:none;
            z-index:-1;
        }

        .grid-stack-item {
        }

        .grid-stack-item-content {

            /*Allow overflow for menu*/
            overflow: unset;

            display: flex;
            flex-direction: column;
            border-radius: var(--pico-card-border-radius);
        }

        /*fix: resize handle should not appear in popup dialog*/
        .ui-resizable-handle {
            z-index: 6 !important;
        }

        /*Dashboard tile styles */
        .tile-panel {
            display: flex;
            flex-direction: column;
            height: 100%;
            border: var(--pico-card-border);
            border-radius: var(--pico-card-border-radius);
            padding: 0;
            margin: 0;
            /*z-index:1;*/
        }

        /* tile-header is defined in dashboard page as it is shared amongst all tiles */
        /* remove section header bunch of padding/margin offsets
				 * this is used by RenderTile.gohtml
				 */
        .tile-header {
            display: flex;
            flex-direction: row;
            font-size: 1.1em;
            min-height: 20px;
            /*header top corner must match the panel radius*/
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
            padding: 6px; /* reduce padding*/
            align-items: center;
            background-color: var(--pico-header-background-color);
            border-bottom: var(--pico-card-border);
        }

        /* tile-content is defined in dashboard page as it is shared amongst all tiles */
        .tile-content {
            flex-grow: 1;
            background-color: var(--pico-card-background-color);
            border-bottom-left-radius: 8px;
            border-bottom-right-radius: 8px;
        }

        /* a table in a tile is full height and has border radius matching the tile */
        .tile-content table {
            margin: 0;
            height: 100%;
        }

        .tile-content tr:last-child td:first-child {
            border-bottom-left-radius: var(--pico-card-border-radius);
        }

        .tile-content tr:last-child td:last-child {
            border-bottom-right-radius: var(--pico-card-border-radius);
        }

		</style>

		<!--end of dashboard-->
{{end}}
