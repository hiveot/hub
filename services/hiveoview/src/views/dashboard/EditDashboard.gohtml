<!-- Render dashboard config editor -->

{{- /*gotype:github.com/hiveot/hub/services/hiveoview/src/views/dashboard.RenderEditDashboardTemplateData*/ -}}

<h-modal id="editDashModal"
         show showClose shadow style="max-width:90vw; max-height: 90vh"
>
	<article style="max-width:90vw; max-height: 90vh">
		<header class="h-row-centered">
			<h3>Dashboard Configuration</h3>
		</header>

      {{/*	Use hx-post in form to submit on enter*/}}
		<form tabindex="0" id="edit-dashboard-form"
		      hx-post="{{.SubmitDashboard}}"
		      hx-swap="none"
		      hx-vals='js:{"background":getImage()}'
		      style="overflow: hidden; display:flex;flex-direction: column"
		      hx-on::after-request="onSubmitCompleted(event, this)"
		>
			<div>
				<label>Dashboard Name
					<input id="dashboard-title-id" type="text" name="title" autofocus tabindex="0"
					       value="{{.Dashboard.Title}}"/>
				</label>
			</div>

        {{/*Lock the dashboard */}}
			<label>
				<input type="checkbox" name="locked"
               {{if .Dashboard.Locked}}checked{{end}}
				>
				Lock the dashboard
			</label>

        {{/*Float vs reflow grid items*/}}
			<label>
				<input type="checkbox" name="float"
               {{if .Dashboard.Grid.Float}}checked{{end}}
				>
				Manual place tiles
			</label>

        {{/*Enable/disable background image*/}}
			<label>
				<input id="background-enabled" type="checkbox" name="backgroundEnabled"
               {{if .Dashboard.BackgroundEnabled}}checked{{end}}
				>
				Background Image
			</label>

        {{/* fields for background image selection*/}}
			<fieldset id="bgEnabledSection" class="h-col" {{if not .Dashboard.BackgroundEnabled}} disabled {{end}}>
				<fieldset role="group">
					<label>URL
						<input id="background-url" type="url" name="backgroundURL" placeholder="Enter a background image URL"
						       value="{{.Dashboard.BackgroundURL}}">
					</label>
				</fieldset>

				or
          {{/* Upload a file*/}}
				<fieldset role="group">
					<input id="background-file-input-id" type="file"
					       accept=".png, .jpg, .jpeg"
					       onchange="handleSelectFile(this)">
					<button type="reset" onclick="clearBackground()">Clear</button>
				</fieldset>

          {{/*Hidden input containing the actual background for form submission
			 This is set to base64 image or URL. Unlike img this can be empty */}}
				<input id="background-image" name="backgroundImage" type="hidden"
				       value="{{.Dashboard.BackgroundImage}}">

          {{/* Current selected image for presentation only */}}
          {{/* overflow hidden with object-fit cover, crops the image to fill the available area*/}}
          {{/* Without object-fit the image doesnt preserve aspect ratio*/}}
				<img type="image" id="background-shown" alt="background image"
				     src="{{.BackgroundImageURL}}"
				     style="object-fit:cover;  height: 20vh;max-height: 50vh; "
				/>
			</fieldset>
		</form>

		<footer class="h-row">
        {{- /*close-modal is handled by h-modal component*/ -}}
			<button id="cancelBtn"
			        onclick="this.dispatchEvent(new Event('close-modal',{bubbles:true}))"
			        class="secondary">Cancel
			</button>
        {{/* Use hx-post in button to submit on button click*/}}
			<button type="submit"
			        form="edit-dashboard-form"
			        style="margin-bottom: 0">Submit
			</button>
		</footer>

	</article>

</h-modal>


<script>

    console.log("editDashboard swapped in")

    // Listen for the editor ready event and setup the inputs
    document.getElementById("editDashModal")
        .addEventListener('ready', () => {
            setup()
        })

    // Listen for the background enable/disable input toggle and enable or diable the background image
    document.getElementById("background-enabled")
        .addEventListener("change", (ev) => {
            if (ev.target.checked) {
                enableBackground()
            } else {
                disableBackground()
            }
        })

    // Listen for the URL input changes and update the image
    document.getElementById("background-url")
        .addEventListener('focusout', (ev) => {
            let backgroundURL = ev.target.value
            if (backgroundURL !== "") {
                let bgImageEl = document.getElementById("background-image")
                let bgShownEl = document.getElementById("background-shown");
                bgImageEl.value = backgroundURL
                bgShownEl.src = backgroundURL
            }
        })

    // Clear the background image.
    // This disables the background input section and disables the background image
    function clearBackground() {
        // elements to update
        let bgImageEl = document.getElementById("background-image")
        let bgEnabledEl = document.getElementById("background-enabled")

        // do not clear the URL input to allow recovery of the URL by toggling enable
        bgImageEl.value = undefined
        bgEnabledEl.removeAttribute("checked")
        disableBackground()
    }

    // Disable the background settings
    // This disables the background input section and hides any image.
    function disableBackground() {
        console.log("disableBackground")
        let bgSectionEl = document.getElementById("bgEnabledSection")
        let bgShownEl = document.getElementById("background-shown");
        bgSectionEl.disabled = true
        bgShownEl.hidden = true
    }

    // Enable the background settings
    // This enables the background input section, show the stored background-image
    // in the shown background-shown image.
    // If a URL is set, use it for the shown image.
    function enableBackground() {
        console.log("enableBackground")
        let bgSectionEl = document.getElementById("bgEnabledSection")
        let bgShownEl = document.getElementById("background-shown");
        let bgImageEl = document.getElementById("background-image")
        let bgURLEl = document.getElementById("background-url");
        bgSectionEl.disabled = false
        bgShownEl.hidden = false
        bgShownEl.src = bgImageEl.value
        if (bgURLEl.value) {
            bgShownEl.src = bgURLEl.value
        }
    }

    // Setup the edit dialog with background image
    // This will log image loading errors to the console
    function setup() {
        let bgEnabledEl = document.getElementById("background-enabled")
        if (bgEnabledEl.checked) {
            enableBackground()
        } else {
            disableBackground()
        }
        // show an error in the console if no image can be shown
        let bgShownEl = document.getElementById("background-shown");
        bgShownEl.addEventListener('error', () => {
            bgShownEl.alt = "Failed loading " + bgShownEl.src
            console.error("error: load image error. source:", bgShownEl.src)
        })

    }


    function getImage() {
        let bgShownEl = document.getElementById("background-shown");
        return bgShownEl.src
    }

    // upload an image file and embed it as base64 and clear the URL
    // On completion both the shown and image element hold the base64 image.
    function handleSelectFile(input) {
        if (input.files.length === 0) {
            return
        }
        let bgImageEl = document.getElementById("background-image")
        let bgShownEl = document.getElementById("background-shown");
        let bgURLEl = document.getElementById("background-url");
        const selectedFile = input.files[0]
        let reader = new FileReader();
        reader.onloadend = function () {
            bgShownEl.src = reader.result
            bgImageEl.value = reader.result
            bgURLEl.value = ""
        };
        reader.readAsDataURL(selectedFile)
    }

    // Ugly to have to do this!
    function onSubmitCompleted(ev, btn) {
        ev.stopImmediatePropagation()
        console.log("Submitted dashboard changes")
        let closeEv = new Event('close-modal', {bubbles: true})
        btn.dispatchEvent(closeEv)
    }
</script>

