<!--After an initial load without data, auto-reload when viewed. -->


{{- /*gotype:github.com/hiveot/hub/services/hiveoview/src/views/dashboard.DashboardPageTemplateData*/ -}}
{{if not .Dashboard}}
<div  hx-trigger="intersect once"
      hx-get=""
      hx-target="#dashboardPage"
>
    <p>reloading page fragment...</p>
    <h-loading></h-loading>
</div>

{{else}}


{{/*Show the dashboard. Reload when tiles are deleted*/}}
<main class="dashboard"
      hx-get=""
      hx-trigger="sse:{{.DashboardUpdatedEvent}}"
      hx-target="#dashboardPage"
>

    {{/* Add a div to ensure filling the screen size*/}}
    <div style="flex-grow:1">
        {{/* change event: When layout changes push the new layout to the server*/}}
        <div class="grid-stack"
             hx-trigger="change"
             hx-post="{{.SubmitDashboardLayoutPath}}"
             hx-vals='js:{layout: getLayout(), size:getLayoutSize()}'
             hx-swap="none"
        >
            {{range $k,$v := .Dashboard.Tiles }}
            <div class="grid-stack-item "gs-id="{{$k}}"
                 gs-min-h="4"
                 gs-size-to-content="false">
                <div class="grid-stack-item-content" style="overflow:unset">
                    {{template "RenderTile.gohtml" $.GetTileTemplateData $k}}
                </div>
            </div>
            {{end}}

        </div>
    </div>
</main>

<script>
    var grid;
    var options;
    startGridStack();

    function startGridStack() {
        // debugger;
        options = { // put in gridstack options here
            animate:true,
            draggable: {
                // handle: ".drag-target",
                cancel: ".no-drag"
            },
            nomove:true,
            float: false,       // cells move to the top (false)
            cellHeight: 30,     // fix the row height to avoid scaling content
            staticGrid:false,   // allow resize in edit mode
            minRow: 3,
            columnOpts: {
                // layout: "none", // we reload the previously saved layout for the size
                // layout: "moveResize",
                //  breakpointForWindow:true,  // not sure what this does window vs grid size?
                // breakpoints: [{w: 300, c: 1}, {w: 600, c: 4}, {w: 800, c: 8}, {w:1200, c:12}]
            },
            // custom storage to detect resize
            lastSize: "",
            // local store with latest layouts without loading back from the
            layouts:  {{.Dashboard.GridLayouts}},
        };
        grid = GridStack.init(options)//.load(serializedData);

        // htmx posts layout changes to the server but we also need these client side
        grid.on("change", function() {
            console.log("grid.onchange")
            let newLayout = getLayout()
            let size = getLayoutSize()
            options.layouts[size] = newLayout
        })

        // listen for screen size changes to reload a new layout
        window.onresize = function() {
            let size = getLayoutSize()
            console.info("onresize. size=",size)
            if (size !== options.lastSize) {
                options.lastSize = size
                loadGridLayout(grid, options.layouts)
            }
        }
        loadGridLayout(grid, options.layouts)
    }


    // Return the screen size name "sm, md, lg, xl"
    function getLayoutSize() {
        let size = "xl"
        let w = window.innerWidth;
        if (w < 600) {
            size = "sm"
        } else if (w < 1024) {
            size = "md"
        } else if (w < 1280) {
            size = "lg"
        }
        return size
    }

    // load the layout for the current window size into the grid.
    function loadGridLayout(grid,layouts) {

        {{if .Dashboard.GridLayouts}}
        // TODO: reload the layout from the (state) server to avoid two devices with
        //  different size overwriting each other.
        //  Alteratively, save only the current size in post.
        let size = getLayoutSize()

        if (layouts) {
            let layoutJSON = layouts[size]
            let layout = JSON.parse(layoutJSON)
            if (layout) {
                grid.load(layout, false)
            }
        }
        console.log("loadLayout size=", size, "layout", layout)
        {{end}}
    }

    // return the current layout as used by the grid.
    function getLayout() {
        let size = getLayoutSize()
        console.info("getLayout: size=",size)

        let dashData = grid.save(saveContent=false)
        if (dashData) {
            return JSON.stringify(dashData)
        }
        return ""
    }
    function update() {
        grid.update();
    }

</script>

<style>
    .dashboard {
        width: 100%;
        height: 100%;
        overflow: auto;
        display: flex;
        flex-direction: column;
        padding-left: var(--pico-spacing);
        padding-right: var(--pico-spacing);
        /*background-color: var(--pico-background-color);*/
    }
    .grid-stack-item {
    }
    .grid-stack-item-content {

        /*Allow overflow for menu*/
        overflow: unset;

        display:flex;
        flex-direction:column;
        border-radius: var(--pico-card-border-radius);
    }
    /*fix: resize handle should not appear in popup dialog*/
    .ui-resizable-handle {
        z-index:6 !important;
    }

    /*Dashboard tile styles */
    .tile-panel {
        display:flex;
        flex-direction:column;
        height:100%;
        border: var(--pico-card-border);
        border-radius: var(--pico-card-border-radius);
        padding:0;
        margin:0;
        /*z-index:1;*/
    }
    /* remove section header bunch of padding/margin offsets*/
    .tile-header {
        display: flex;
        flex-direction: row;
        font-size: 1.1em;
        min-height: 20px;
        /*header top corner must match the panel radius*/
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
        padding: 6px; /* reduce padding*/
        align-items: center;
        background-color: var(--pico-header-background-color);
        border-bottom: var(--pico-card-border);
    }
    .tile-content{
        flex-grow:1;
        background-color: var(--pico-card-background-color);
        border-bottom-left-radius: 8px;
        border-bottom-right-radius: 8px;
    }
    .tile-content table {
        margin: 0;
        height: 100%;
    }
    .tile-content tr:last-child td:first-child {
        border-bottom-left-radius: var(--pico-card-border-radius);
    }
    .tile-content tr:last-child td:last-child {
        border-bottom-right-radius: var(--pico-card-border-radius);
    }
</style>

<!--end of dashboard-->
{{end}}
