// Package authz with the agent request handler for using service 'Admin'
// This builds a service agent that calls the service.
// DO NOT EDIT. This file is auto generated by td2go. Any changes will be overwritten.
// Generated 01 Apr 2025 23:15 PDT. 
package authz

import "errors"
import "github.com/hiveot/hub/messaging/tputils"
import "github.com/hiveot/hub/messaging"


// IAdminService defines the interface of the 'Admin' service
//
// This defines a method for each of the actions in the TD. 
// 
type IAdminService interface {

   // GetClientRole Get Client Role
   // Read the role of a client
   // This returns a response with client role
   GetClientRole(senderID string, clientID string) (role ClientRole, err error)

   // SetClientRole Set Client Role
   // Update the role of a consumer
   SetClientRole(senderID string, args AdminSetClientRoleArgs) error
}

// NewHandleAdminRequest returns an agent handler for Thing 'admin' requests.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
// 
// This returns the marshalled response data or an error.
func NewHandleAdminRequest(svc IAdminService)(func(msg *messaging.RequestMessage, c messaging.IConnection) *messaging.ResponseMessage) {
    return func(msg *messaging.RequestMessage, c messaging.IConnection) *messaging.ResponseMessage {
        var output any
        var err error
        switch msg.Name {
            case "getClientRole":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.GetClientRole(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "setClientRole":
                args := AdminSetClientRoleArgs{}
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  err = svc.SetClientRole(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            default:
            	err = errors.New("Unknown Method '"+msg.Name+"' of service '"+msg.ThingID+"'")
        }
        return msg.CreateResponse(output,err)
    }
}