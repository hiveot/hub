// Package digitwin with types of service 'ThingValues' from agent 'digitwin'
// DO NOT EDIT. This file is auto generated by td2go. Any changes will be overwritten.
// Intended for use by both service agents and consumer.
// Generated 01 Apr 2025 23:15 PDT. 
package digitwin


//--- Constants ---

// ThingValuesAgentID is the account ID of the agent managing the Thing.
const ThingValuesAgentID = "digitwin"

// ThingValuesServiceID is the thingID of the device/service as used by agents.
// Agents use this to publish events and subscribe to actions
const ThingValuesServiceID = "ThingValues"

// ThingValuesDThingID is the Digitwin thingID as used by consumers. Digitwin adds the dtw:{agent} prefix to the serviceID
// Consumers use this to publish actions and subscribe to events
const ThingValuesDThingID = "dtw:digitwin:ThingValues"

// Property, Event and Action names
const (
    ThingValuesActionReadEvent = "readEvent"
    ThingValuesActionReadProperty = "readProperty"
    ThingValuesActionQueryAction = "queryAction"
    ThingValuesActionQueryAllActions = "queryAllActions"
    ThingValuesActionReadAllEvents = "readAllEvents"
    ThingValuesActionReadAllProperties = "readAllProperties"
)

//--- Schema definitions of Thing 'thingValues' ---

// ActionStatus defines a Action Status data schema.
//
// Status of the an action
type ActionStatus struct {
    
    // ActionID with Action ID
    //
    // Unique identifier of the action
    ActionID string `json:"actionID,omitempty"`
    
    // AgentID with Agent ID
    //
    // The agent handling the action
    AgentID string `json:"agentID,omitempty"`
    
    // Error with Error
    //
    // Action error info when failed
    Error string `json:"error,omitempty"`
    
    // Input with Action input
    //
    // Action input value
    Input any `json:"input,omitempty"`
    
    // Name with Action name
    //
    // name of the action or property
    Name string `json:"name,omitempty"`
    
    // Output with Action output
    Output any `json:"output,omitempty"`
    
    // Requested with Requested Time
    //
    // Time the action request was received
    Requested string `json:"requested,omitempty"`
    
    // SenderID with Sender client ID
    //
    // ID of the client requesting the action
    SenderID string `json:"senderID,omitempty"`
    
    // Status with Action status
    //
    // Status of the action's progress
    Status string `json:"status,omitempty"`
    
    // ThingID with Action Thing
    //
    // Digital twin ThingID the action applies to
    ThingID string `json:"thingID,omitempty"`
    
    // Updated with Updated Time
    //
    // Time the action status was last updated
    Updated string `json:"updated,omitempty"`
}

// ThingValue defines a Thing Value data schema.
//
// Property or event value
type ThingValue struct {
    
    // AffordanceType with Type of value
    //
    // Value of an 'property', 'event', or 'action'
    AffordanceType string `json:"affordanceType,omitempty"`
    
    // Id with Value identifier
    //
    // Unique identification of this reported value
    Id string `json:"id,omitempty"`
    
    // Name with Name
    //
    // Name of the property holding the value
    Name string `json:"name,omitempty"`
    
    // Output with Payload
    //
    // Data in format as described by the thing's property affordance
    Output any `json:"output,omitempty"`
    
    // ThingID with Thing ID
    //
    // Digital twin Thing ID
    ThingID string `json:"thingID,omitempty"`
    
    // Updated with Updated time
    //
    // Time the value was last updated
    Updated string `json:"updated,omitempty"`
}

//--- Argument and Response struct for action of Thing 'thingValues' ---

const ThingValuesQueryActionMethod = "queryAction"

// ThingValuesQueryActionArgs defines the arguments of the queryAction function
// Action status - Read the current action status of a Thing
type ThingValuesQueryActionArgs struct {
    
    // Name with Action Name
    //
    // The action name to query
    Name string `json:"name,omitempty"`
    
    // ThingID with Thing ID
    //
    // ID of the Thing to query
    ThingID string `json:"thingID,omitempty"`
}

// ThingValuesQueryActionResp defines the response of the queryAction function
// Action status - Read the current action status of a Thing
//
// The latest action value
// ThingValuesQueryActionResp defines a Action value data schema.
//
// The latest action value
type ThingValuesQueryActionResp ActionStatus


const ThingValuesQueryAllActionsMethod = "queryAllActions"

// ThingValuesQueryAllActionsResp defines the response of the queryAllActions function
// Action statuses - Read all action statuses of a Thing
//
// Map of action statuses
// ThingValuesQueryAllActionsResp defines a Action value data schema.
//
// Map of action statuses
type ThingValuesQueryAllActionsResp map[string]ActionStatus


const ThingValuesReadAllEventsMethod = "readAllEvents"

// ThingValuesReadAllEventsResp defines the response of the readAllEvents function
// Read all event values - Read the latest known event values of a Thing
//
// Map with the most recent event ThingValue objects
// ThingValuesReadAllEventsResp defines a Event values data schema.
//
// Map with the most recent event ThingValue objects
type ThingValuesReadAllEventsResp map[string]ThingValue


const ThingValuesReadAllPropertiesMethod = "readAllProperties"

// ThingValuesReadAllPropertiesResp defines the response of the readAllProperties function
// Read all properties - Read the latest known property values
//
// Map of event name:ThingValue objects
// ThingValuesReadAllPropertiesResp defines a Property values data schema.
//
// Map of event name:ThingValue objects
type ThingValuesReadAllPropertiesResp map[string]ThingValue


const ThingValuesReadEventMethod = "readEvent"

// ThingValuesReadEventArgs defines the arguments of the readEvent function
// Read event value - Read the latest event value of a Thing
type ThingValuesReadEventArgs struct {
    
    // Name with Event name
    //
    // Name of the event to read the latest values
    Name string `json:"name,omitempty"`
    
    // ThingID with Thing ID
    //
    // ID of the Thing to read
    ThingID string `json:"thingID,omitempty"`
}

// ThingValuesReadEventResp defines the response of the readEvent function
// Read event value - Read the latest event value of a Thing
//
// Most recent event value
// ThingValuesReadEventResp defines a Event value data schema.
//
// Most recent event value
type ThingValuesReadEventResp ThingValue


const ThingValuesReadPropertyMethod = "readProperty"

// ThingValuesReadPropertyArgs defines the arguments of the readProperty function
// Read property value - Read the latest property value
type ThingValuesReadPropertyArgs struct {
    
    // Name with Property name
    //
    // The property name whose value to read
    Name string `json:"name,omitempty"`
    
    // ThingID with Thing ID
    //
    // ID of the Thing to read
    ThingID string `json:"thingID,omitempty"`
}

// ThingValuesReadPropertyResp defines the response of the readProperty function
// Read property value - Read the latest property value
//
// Most recent property value
// ThingValuesReadPropertyResp defines a Property value data schema.
//
// Most recent property value
type ThingValuesReadPropertyResp ThingValue



// ThingValuesTD contains the raw TD of this service for publication to the Hub
const ThingValuesTD = `{"actions":{"queryAction":{"@type":"hiveot:function","description":"Read the current action status of a Thing","title":"Action status","idempotent":true,"input":{"readOnly":false,"type":"object","properties":{"name":{"title":"Action Name","description":"The action name to query","readOnly":false,"type":"string"},"thingID":{"title":"Thing ID","description":"ID of the Thing to query","readOnly":false,"type":"string"}},"required":["thingID","name"]},"output":{"title":"Action value","description":"The latest action value","readOnly":false,"type":"object","schema":"ActionStatus"},"safe":true},"queryAllActions":{"@type":"hiveot:function","description":"Read all action statuses of a Thing","title":"Action statuses","idempotent":true,"input":{"title":"Thing ID","description":"ID of the Thing to query","readOnly":false,"type":"string"},"output":{"title":"Action value","description":"Map of action statuses","readOnly":false,"type":"object","properties":{"":{"title":"Action Status","readOnly":false,"type":"object","schema":"ActionStatus"}}},"safe":true},"readAllEvents":{"@type":"hiveot:function","description":"Read the latest known event values of a Thing","forms":[{"href":"/{operation}"}],"title":"Read all event values","idempotent":true,"input":{"title":"Thing ID","description":"ID of the Thing to read","readOnly":false,"type":"string"},"output":{"title":"Event values","description":"Map with the most recent event ThingValue objects","readOnly":false,"type":"object","properties":{"":{"title":"Event Value","readOnly":false,"type":"object","schema":"ThingValue"}}},"safe":true},"readAllProperties":{"@type":"hiveot:function","description":"Read the latest known property values","forms":[{"href":"/{operation}"}],"title":"Read all properties","idempotent":true,"input":{"title":"Thing ID","description":"Digital twin ID of the Thing to read","readOnly":false,"type":"string"},"output":{"title":"Property values","description":"Map of event name:ThingValue objects","readOnly":false,"type":"object","properties":{"":{"title":"Property Value","readOnly":false,"type":"object","schema":"ThingValue"}}},"safe":true},"readEvent":{"@type":"hiveot:function","description":"Read the latest event value of a Thing","forms":[{"href":"/{operation}"}],"title":"Read event value","idempotent":true,"input":{"readOnly":false,"type":"object","properties":{"name":{"title":"Event name","description":"Name of the event to read the latest values","readOnly":false,"type":"string"},"thingID":{"title":"Thing ID","description":"ID of the Thing to read","readOnly":false,"type":"string"}},"required":["thingID","name"]},"output":{"title":"Event value","description":"Most recent event value","readOnly":false,"type":"object","schema":"ThingValue"},"safe":true},"readProperty":{"@type":"hiveot:function","description":"Read the latest property value","forms":[{"href":"/{operation}"}],"title":"Read property value","idempotent":true,"input":{"readOnly":false,"type":"object","properties":{"name":{"title":"Property name","description":"The property name whose value to read","readOnly":false,"type":"string"},"thingID":{"title":"Thing ID","description":"ID of the Thing to read","readOnly":false,"type":"string"}},"required":["thingID","name"]},"output":{"title":"Property value","description":"Most recent property value","readOnly":false,"type":"object","schema":"ThingValue"},"safe":true}},"@context":["https://www.w3.org/2022/wot/td/v1.1",{"hiveot":"https://www.hiveot.net/vocab/v0.1"}],"@type":"Service","base":"https://localhost/","created":"2024-10-04T17:00:00.000Z","deny":["none"],"description":"Service for providing the last known property, event and action values","events":{},"id":"ThingValues","modified":"2024-10-04T17:00:00.000Z","properties":null,"schemaDefinitions":{"ActionStatus":{"title":"Action Status","description":"Status of the an action","readOnly":false,"type":"object","properties":{"actionID":{"title":"Action ID","description":"Unique identifier of the action","readOnly":false,"type":"string"},"agentID":{"title":"Agent ID","description":"The agent handling the action","readOnly":false,"type":"string"},"error":{"title":"Error","description":"Action error info when failed","readOnly":false,"type":"string"},"input":{"title":"Action input","description":"Action input value","readOnly":false,"type":"any"},"name":{"title":"Action name","description":"name of the action or property","readOnly":false,"type":"string"},"output":{"title":"Action output","readOnly":false,"type":"any"},"requested":{"title":"Requested Time","description":"Time the action request was received","readOnly":false,"type":"string"},"senderID":{"title":"Sender client ID","description":"ID of the client requesting the action","readOnly":false,"type":"string"},"status":{"title":"Action status","description":"Status of the action's progress","enum":["pending","running","completed","failed"],"readOnly":false,"type":"string"},"thingID":{"title":"Action Thing","description":"Digital twin ThingID the action applies to","readOnly":false,"type":"string"},"updated":{"title":"Updated Time","description":"Time the action status was last updated","readOnly":false,"type":"string"}}},"ThingValue":{"title":"Thing Value","description":"Property or event value","readOnly":false,"type":"object","properties":{"affordanceType":{"title":"Type of value","description":"Value of an 'property', 'event', or 'action'","readOnly":false,"type":"string"},"id":{"title":"Value identifier","description":"Unique identification of this reported value","readOnly":false,"type":"string"},"name":{"title":"Name","description":"Name of the property holding the value","readOnly":false,"type":"string"},"output":{"title":"Payload","description":"Data in format as described by the thing's property affordance","readOnly":false,"type":"any"},"thingID":{"title":"Thing ID","description":"Digital twin Thing ID","readOnly":false,"type":"string"},"updated":{"title":"Updated time","description":"Time the value was last updated","readOnly":false,"type":"string"}}}},"security":["bearer"],"securityDefinitions":{"bearer":{"description":"HTTP protocol authentication","scheme":"bearer","name":"authentication","alg":"es256","format":"jwt","in":"header"}},"title":"DigiTwin Values Service","support":"https://www.github.com/hiveot/hub"}`