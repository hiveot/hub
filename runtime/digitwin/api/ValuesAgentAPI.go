// Package digitwin with the agent request handler for using service 'ThingValues'
// This builds a service agent that calls the service.
// DO NOT EDIT. This file is auto generated by td2go. Any changes will be overwritten.
// Generated 29 Jan 2025 07:58 PST. 
package digitwin

import "errors"
import "github.com/hiveot/hub/transports/tputils"
import "github.com/hiveot/hub/transports"


// IThingValuesService defines the interface of the 'ThingValues' service
//
// This defines a method for each of the actions in the TD. 
// 
type IThingValuesService interface {

   // QueryAction Action status
   // Read the current action status of a Thing
   // This returns a the latest action value
   QueryAction(senderID string, args ThingValuesQueryActionArgs) (actionvalue ActionStatus, err error)

   // ReadAllEvents Read all event values
   // Read the latest known event values of a Thing
   // This returns a list with the most recent event value objects
   ReadAllEvents(senderID string, thingID string) (eventvalues []ThingValue, err error)

   // ReadAllProperties Read all properties
   // Read the latest known property values
   // This returns a list of ThingValue objects
   ReadAllProperties(senderID string, thingID string) (propertyvalues []ThingValue, err error)

   // ReadEvent Read event value
   // Read the latest event value of a Thing
   // This returns a most recent event value
   ReadEvent(senderID string, args ThingValuesReadEventArgs) (eventvalue ThingValue, err error)

   // ReadProperty Read property value
   // Read the latest property value
   // This returns a most recent property value
   ReadProperty(senderID string, args ThingValuesReadPropertyArgs) (propertyvalue ThingValue, err error)
}

// NewHandleThingValuesRequest returns an agent handler for Thing 'thingValues' requests.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
// 
// This returns the marshalled response data or an error.
func NewHandleThingValuesRequest(svc IThingValuesService)(func(msg *transports.RequestMessage, c transports.IConnection) *transports.ResponseMessage) {
    return func(msg *transports.RequestMessage, c transports.IConnection) *transports.ResponseMessage {
        var output any
        var err error
        switch msg.Name {
            case "queryAction":
                args := ThingValuesQueryActionArgs{}
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.QueryAction(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "readAllEvents":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.ReadAllEvents(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "readAllProperties":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.ReadAllProperties(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "readEvent":
                args := ThingValuesReadEventArgs{}
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.ReadEvent(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "readProperty":
                args := ThingValuesReadPropertyArgs{}
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.ReadProperty(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            default:
            	err = errors.New("Unknown Method '"+msg.Name+"' of service '"+msg.ThingID+"'")
        }
        return msg.CreateResponse(output,err)
    }
}