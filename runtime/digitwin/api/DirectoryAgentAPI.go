// Package digitwin with the agent request handler for using service 'ThingDirectory'
// This builds a service agent that calls the service.
// DO NOT EDIT. This file is auto generated by tm2go. Any changes will be overwritten.
// Generated 06 Sep 2025 09:41 PDT.
package digitwin

import (
	"errors"

	"github.com/hiveot/hub/messaging"
	"github.com/hiveot/hub/messaging/tputils"
)

// IThingDirectoryService defines the interface of the 'ThingDirectory' service
//
// This defines a method for each of the actions in the TD.
type IThingDirectoryService interface {

	// CreateThing Create Thing TD
	// Update the Thing TD in the directory. For use by Thing agents only.
	CreateThing(senderID string, tDJSON string) error

	// DeleteThing Delete Thing
	// Remove a digital twin TD from the directory
	DeleteThing(senderID string, dThingID string) error

	// RetrieveAllThings Read all TDs
	// Read a batch of TD documents
	// This returns a list of JSON encoded TD documents
	RetrieveAllThings(senderID string, args ThingDirectoryRetrieveAllThingsArgs) (tDlist []string, err error)

	// RetrieveThing Retrieve a TD
	// Return a JSON encoded TD document
	// This returns a a JSON encoded Thing Description Document
	RetrieveThing(senderID string, thingID string) (tD string, err error)

	// UpdateThing Update Thing TD
	// Update the Thing TD in the directory. For use by agents only.
	UpdateThing(senderID string, tD string) error
}

// NewHandleThingDirectoryRequest returns an agent handler for Thing 'ThingDirectory' requests.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
//
// This returns the marshalled response data or an error.
func NewHandleThingDirectoryRequest(svc IThingDirectoryService) func(msg *messaging.RequestMessage, c messaging.IConnection) *messaging.ResponseMessage {
	return func(msg *messaging.RequestMessage, c messaging.IConnection) *messaging.ResponseMessage {
		var output any
		var err error
		switch msg.Name {
		case "deleteThing":
			var args string
			err = tputils.DecodeAsObject(msg.Input, &args)
			if err == nil {
				err = svc.DeleteThing(msg.SenderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
		case "retrieveThing":
			var args string
			err = tputils.DecodeAsObject(msg.Input, &args)
			if err == nil {
				output, err = svc.RetrieveThing(msg.SenderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
		case "retrieveAllThings":
			args := ThingDirectoryRetrieveAllThingsArgs{}
			err = tputils.DecodeAsObject(msg.Input, &args)
			if err == nil {
				output, err = svc.RetrieveAllThings(msg.SenderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
		case "updateThing":
			var args string
			err = tputils.DecodeAsObject(msg.Input, &args)
			if err == nil {
				err = svc.UpdateThing(msg.SenderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
		case "createThing":
			var args string
			err = tputils.DecodeAsObject(msg.Input, &args)
			if err == nil {
				err = svc.CreateThing(msg.SenderID, args)
			} else {
				err = errors.New("bad function argument: " + err.Error())
			}
		default:
			err = errors.New("Unknown Method '" + msg.Name + "' of service '" + msg.ThingID + "'")
		}
		return msg.CreateResponse(output, err)
	}
}
