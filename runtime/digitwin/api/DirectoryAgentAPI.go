// Package digitwin with the agent request handler for using service 'ThingDirectory'
// This builds a service agent that calls the service.
// DO NOT EDIT. This file is auto generated by td2go. Any changes will be overwritten.
// Generated 01 Apr 2025 23:15 PDT. 
package digitwin

import "errors"
import "github.com/hiveot/hub/messaging/tputils"
import "github.com/hiveot/hub/messaging"


// IThingDirectoryService defines the interface of the 'ThingDirectory' service
//
// This defines a method for each of the actions in the TD. 
// 
type IThingDirectoryService interface {

   // ReadAllTDs Read all TDs
   // Read a batch of TD documents
   // This returns a list of JSON encoded TD documents
   ReadAllTDs(senderID string, args ThingDirectoryReadAllTDsArgs) (tDlist []string, err error)

   // ReadTD Read TD
   // Return a JSON encoded TD document
   // This returns a a JSON encoded Thing Description Document
   ReadTD(senderID string, thingID string) (tD string, err error)

   // RemoveTD Remove TD
   // Remove a digital twin from the directory
   RemoveTD(senderID string, dThingID string) error

   // UpdateTD Update TD
   // Update the Thing TD in the directory. For use by agents only.
   UpdateTD(senderID string, tD string) error
}

// NewHandleThingDirectoryRequest returns an agent handler for Thing 'ThingDirectory' requests.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
// 
// This returns the marshalled response data or an error.
func NewHandleThingDirectoryRequest(svc IThingDirectoryService)(func(msg *messaging.RequestMessage, c messaging.IConnection) *messaging.ResponseMessage) {
    return func(msg *messaging.RequestMessage, c messaging.IConnection) *messaging.ResponseMessage {
        var output any
        var err error
        switch msg.Name {
            case "readTD":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.ReadTD(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "readAllTDs":
                args := ThingDirectoryReadAllTDsArgs{}
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.ReadAllTDs(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "removeTD":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  err = svc.RemoveTD(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "updateTD":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  err = svc.UpdateTD(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            default:
            	err = errors.New("Unknown Method '"+msg.Name+"' of service '"+msg.ThingID+"'")
        }
        return msg.CreateResponse(output,err)
    }
}