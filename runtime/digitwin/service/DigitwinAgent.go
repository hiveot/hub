package service

import (
	"fmt"
	"github.com/hiveot/hub/api/go/digitwin"
	"github.com/hiveot/hub/lib/hubclient"
	"github.com/hiveot/hub/runtime/api"
	"log/slog"
)

type DigitwinAgent struct {
	svc           *DigitwinService
	dirHandler    api.ActionHandler
	valuesHandler api.ActionHandler
}

// HandleAction digitwin services request (args order as generated by tdd2go)
func (agent *DigitwinAgent) HandleAction(msg *hubclient.ThingMessage) (stat hubclient.RequestStatus) {

	if msg.ThingID == digitwin.DirectoryDThingID {
		stat = agent.dirHandler(msg)
	} else if msg.ThingID == digitwin.ValuesDThingID {
		stat = agent.valuesHandler(msg)
	} else {
		slog.Warn("HandleAction: dThingID is not a service capability", "dThingID", msg.ThingID)
		err := fmt.Errorf("%s is not a digitwin service capability", msg.ThingID)
		stat.Failed(msg, err)
	}
	return stat
}

// NewDigitwinAgent creates the agent that passes messages to the service api.
// This uses the tdd2go generated service action handlers.
func NewDigitwinAgent(svc *DigitwinService) *DigitwinAgent {
	agent := &DigitwinAgent{
		svc:           svc,
		dirHandler:    digitwin.NewHandleDirectoryAction(svc.DirSvc),
		valuesHandler: digitwin.NewHandleValuesAction(svc.ValuesSvc),
	}
	return agent
}
