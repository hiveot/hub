package service

import (
	"fmt"
	"github.com/hiveot/hub/api/go/digitwin"
	"github.com/hiveot/hub/transports"
	"log/slog"
)

type DigitwinAgent struct {
	svc           *DigitwinService
	dirHandler    transports.RequestHandler
	valuesHandler transports.RequestHandler
}

// HandleAction digitwin services request (args order as generated by tdd2go)
// This implements the client interface for handling a request
func (agent *DigitwinAgent) HandleAction(msg *transports.ThingMessage) (output any, err error) {

	if msg.ThingID == digitwin.DirectoryDThingID {
		output, err = agent.dirHandler(msg)
	} else if msg.ThingID == digitwin.ValuesDThingID {
		output, err = agent.valuesHandler(msg)
	} else {
		slog.Warn("HandleAction: dThingID is not a service capability", "dThingID", msg.ThingID)
		err = fmt.Errorf("%s is not a digitwin service capability", msg.ThingID)
	}
	return output, err
}

// NewDigitwinAgent creates the agent that passes messages to the service api.
// This uses the tdd2go generated service action handlers.
func NewDigitwinAgent(svc *DigitwinService) *DigitwinAgent {
	agent := &DigitwinAgent{
		svc:           svc,
		dirHandler:    digitwin.NewHandleDirectoryAction(svc.DirSvc),
		valuesHandler: digitwin.NewHandleValuesAction(svc.ValuesSvc),
	}
	return agent
}
