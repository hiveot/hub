// Package authn with the agent request handler for using service 'User'
// This builds a service agent that calls the service.
// DO NOT EDIT. This file is auto generated by td2go. Any changes will be overwritten.
// Generated 15 Aug 2025 20:34 PDT. 
package authn

import "errors"
import "github.com/hiveot/hub/messaging/tputils"
import "github.com/hiveot/hub/messaging"


// IUserService defines the interface of the 'User' service
//
// This defines a method for each of the actions in the TD. 
// 
type IUserService interface {

   // GetProfile Get Client Profile
   GetProfile(senderID string) (resp ClientProfile, err error)

   // Login Login
   // Login with password
   Login(senderID string, args UserLoginArgs) (token string, err error)

   // Logout Logout
   // Logout from all devices
   Logout(senderID string) error

   // RefreshToken Request a new auth token for the current client
   RefreshToken(senderID string, oldToken string) (newToken string, err error)

   // UpdateName Request changing the display name of the current client
   UpdateName(senderID string, newName string) error

   // UpdatePassword Update Password
   // Request changing the password of the current client
   UpdatePassword(senderID string, password string) error

   // UpdatePubKey Update Public Key
   // Request changing the public key on file of the current client.
   UpdatePubKey(senderID string, publicKeyPEM string) error
}

// NewHandleUserRequest returns an agent handler for Thing 'user' requests.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
// 
// This returns the marshalled response data or an error.
func NewHandleUserRequest(svc IUserService)(func(msg *messaging.RequestMessage, c messaging.IConnection) *messaging.ResponseMessage) {
    return func(msg *messaging.RequestMessage, c messaging.IConnection) *messaging.ResponseMessage {
        var output any
        var err error
        switch msg.Name {
            case "updatePassword":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  err = svc.UpdatePassword(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "updatePubKey":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  err = svc.UpdatePubKey(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "getProfile":
                if err == nil {
                  output, err = svc.GetProfile(msg.SenderID)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "login":
                args := UserLoginArgs{}
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.Login(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "logout":
                if err == nil {
                  err = svc.Logout(msg.SenderID)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "refreshToken":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.RefreshToken(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "updateName":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  err = svc.UpdateName(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            default:
            	err = errors.New("Unknown Method '"+msg.Name+"' of service '"+msg.ThingID+"'")
        }
        return msg.CreateResponse(output,err)
    }
}