// Package authn with the agent request handler for using service 'Admin'
// This builds a service agent that calls the service.
// DO NOT EDIT. This file is auto generated by td2go. Any changes will be overwritten.
// Generated 22 Feb 2025 12:16 PST. 
package authn

import "errors"
import "github.com/hiveot/hub/messaging/tputils"
import "github.com/hiveot/hub/messaging"


// IAdminService defines the interface of the 'Admin' service
//
// This defines a method for each of the actions in the TD. 
// 
type IAdminService interface {

   // AddAgent Add Agent
   // Create an account for IoT device agents
   // This returns a agent authentication token
   AddAgent(senderID string, agentInfo AdminAddAgentArgs) (token string, err error)

   // AddConsumer Add Consumer
   // Add an end-user client
   AddConsumer(senderID string, consumerInfo AdminAddConsumerArgs) error

   // AddService Add Service
   // Add a service account
   // This returns a service authentication token
   AddService(senderID string, serviceInfo AdminAddServiceArgs) (token string, err error)

   // GetClientProfile Get Client Profile
   // Get the profile information describing a client
   GetClientProfile(senderID string, clientID string) (profile ClientProfile, err error)

   // GetProfiles Get Profiles
   // Get a list of all client profiles
   GetProfiles(senderID string) (clientProfiles []ClientProfile, err error)

   // NewAgentToken New Agent Token
   // Obtain a new authentication token for an agent or service
   // This returns a new service or agent authentication token
   NewAgentToken(senderID string, agentID string) (token string, err error)

   // RemoveClient Remove Client
   // Remove a client account
   RemoveClient(senderID string, clientID string) error

   // SetClientPassword Set Client Password
   // Update the password of a consumer
   SetClientPassword(senderID string, clientInfo AdminSetClientPasswordArgs) error

   // UpdateClientProfile Update Client Profile
   // Update the details of a client
   UpdateClientProfile(senderID string, clientProfile ClientProfile) error
}

// NewHandleAdminRequest returns an agent handler for Thing 'admin' requests.
//
// This unmarshalls the request payload into an args struct and passes it to the service
// that implements the corresponding interface method.
// 
// This returns the marshalled response data or an error.
func NewHandleAdminRequest(svc IAdminService)(func(msg *messaging.RequestMessage, c messaging.IConnection) *messaging.ResponseMessage) {
    return func(msg *messaging.RequestMessage, c messaging.IConnection) *messaging.ResponseMessage {
        var output any
        var err error
        switch msg.Name {
            case "newAgentToken":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.NewAgentToken(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "setClientPassword":
                args := AdminSetClientPasswordArgs{}
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  err = svc.SetClientPassword(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "updateClientProfile":
                var args ClientProfile
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  err = svc.UpdateClientProfile(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "addAgent":
                args := AdminAddAgentArgs{}
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.AddAgent(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "addConsumer":
                args := AdminAddConsumerArgs{}
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  err = svc.AddConsumer(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "getProfiles":
                if err == nil {
                  output, err = svc.GetProfiles(msg.SenderID)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "removeClient":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  err = svc.RemoveClient(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "addService":
                args := AdminAddServiceArgs{}
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.AddService(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            case "getClientProfile":
                var args string
                err = tputils.DecodeAsObject(msg.Input, &args)
                if err == nil {
                  output, err = svc.GetClientProfile(msg.SenderID, args)
                } else {
                  err = errors.New("bad function argument: "+err.Error())
                }
                break
            default:
            	err = errors.New("Unknown Method '"+msg.Name+"' of service '"+msg.ThingID+"'")
        }
        return msg.CreateResponse(output,err)
    }
}