<!--After an initial load without data, auto-reload when viewed. -->


{{- /*gotype:github.com/hiveot/hub/bindings/hiveoview/src/views/dashboard.DashboardPageTemplateData*/ -}}
{{if not .Dashboard}}
<div  hx-trigger="intersect once"
        hx-swap="outerHTML"
        hx-get="">
    <p>reloading page fragment...</p>
    <h-loading></h-loading>
</div>

{{else}}


{{/*Show the dashboard. Reload when tiles are deleted*/}}
<main class="dashboard container-fluid"
      hx-get=""
      hx-trigger="sse:{{.DashboardUpdatedEvent}}"
      hx-swap="outerHTML"
>
    <div>
    Dashboard: {{.Dashboard.Title}} :
        <button hx-trigger="click"
                hx-get="{{.RenderNewTilePath}}"
                hx-target="#dashboardDialog"
                hx-swap="innerHTML"
        >New tile</button>

        <button
                hx-trigger="click"
                hx-get="{{.RenderConfirmDeleteDashboardPath}}"
                hx-target="#dashboardDialog"
                hx-swap="innerHTML"
        >Delete Dashboard</button>
    </div>

    {{/* Add a div to ensure filling the screen size*/}}
    <div style="flex-grow:1">
        {{/* change event: When layout changes push the new layout to the server*/}}
        <div class="grid-stack"
             hx-trigger="change"
             hx-post="{{.SubmitDashboardLayoutPath}}"
             hx-vals='js:{layout: saveLayout()}'
             hx-swap="none"
        >
            {{range $k,$v := .Dashboard.Tiles }}
            <div class="grid-stack-item" gs-id="{{$k}}" gs-min-h="4"
                 gs-size-to-content="false">
                <div class="grid-stack-item-content" style="overflow:unset">
                   {{template "RenderTile.gohtml" $.GetTileTemplateData $k}}
                </div>
            </div>
            {{end}}

        </div>
    </div>
</main>
<div id="dashboardDialog"></div>

<script>

    var grid;
    startGridStack();

    function startGridStack() {
        // debugger;
        var options = { // put in gridstack options here
            animate:true,
            float: true,        // allow cells to move anywhere
            cellHeight: 30,     // fix the row height to avoid scaling content
            staticGrid:false,   // allow resize in edit mode
            minRow: 3,
            columnOpts: {
                layout: "moveResize",
                breakpointForWindow:false,
                breakpoints: [{w: 300, c: 1}, {w: 600, c: 4}, {w: 800, c: 8}, {w:1200, c:12}]
            }
        };
        grid = GridStack.init(options)//.load(serializedData);

        {{if .Dashboard.GridLayout}}
        let layout = JSON.parse("{{.Dashboard.GridLayout}}");
        if (layout) {
            grid.load(layout,false)
        }
        {{end}}
    }

    function saveLayout() {
        let dashData = grid.save(saveContent=false)
        if (dashData) {
            return JSON.stringify(dashData)
        }
        return ""
    }
    function update() {
        grid.update();
    }

</script>


<style>
    .dashboard {
        width: 100%;
        height: 100%;
        overflow: auto;
        display: flex;
        flex-direction: column;
    }


    .grid-stack-item {
    }
    .grid-stack-item-content {

        /*Allow overflow for menu*/
        overflow: unset;

        display:flex;
        flex-direction:column;
        background-color: var(--pico-form-element-background-color);
        border-color: var(--pico-background-color);
        border: var(--pico-background-color) 1px solid;
        border-radius: 5px;
        box-shadow: var(--pico-box-shadow);
    }
    .ui-resizable-handle {
        z-index:6 !important;
    }

</style>
<!--end of dashboard-->
{{end}}
