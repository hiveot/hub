<!--After an initial load without data, auto-reload when viewed. -->


{{- /*gotype:github.com/hiveot/hub/bindings/hiveoview/src/views/dashboard.DashboardPageTemplateData*/ -}}
{{if not .Dashboard}}
<div  hx-trigger="intersect once"
        hx-swap="outerHTML"
        hx-get="">
    <p>reloading page fragment...</p>
    <h-loading></h-loading>
</div>

{{else}}


{{/*Show the dashboard. Reload when tiles are deleted*/}}
<main class="dashboard"
      hx-get=""
      hx-trigger="sse:{{.DashboardUpdatedEvent}}"
      hx-swap="outerHTML"
>

    {{/* Add a div to ensure filling the screen size*/}}
    <div style="flex-grow:1">
        {{/* change event: When layout changes push the new layout to the server*/}}
        <div class="grid-stack"
             hx-trigger="change"
             hx-post="{{.SubmitDashboardLayoutPath}}"
             hx-vals='js:{layout: saveLayout()}'
             hx-swap="none"
        >
            {{range $k,$v := .Dashboard.Tiles }}
            <div class="grid-stack-item "gs-id="{{$k}}"
                 gs-min-h="4"
                 gs-size-to-content="false">
                <div class="grid-stack-item-content" style="overflow:unset">
                   {{template "RenderTile.gohtml" $.GetTileTemplateData $k}}
                </div>
            </div>
            {{end}}

        </div>
    </div>
</main>
<div id="dashboardDialog"></div>

<script>

    var grid;
    startGridStack();

    function startGridStack() {
        // debugger;
        var options = { // put in gridstack options here
            animate:true,
            draggable: {
                // handle: ".drag-target",
                cancel: ".no-drag"
            },
            nomove:true,
            float: false,       // cells move to the top (false)
            cellHeight: 30,     // fix the row height to avoid scaling content
            staticGrid:false,   // allow resize in edit mode
            minRow: 3,
            columnOpts: {
                layout: "moveResize",
                breakpointForWindow:true,  // not sure what this does window vs grid size?
                breakpoints: [{w: 300, c: 1}, {w: 600, c: 4}, {w: 800, c: 8}, {w:1200, c:12}]
            }
        };
        grid = GridStack.init(options)//.load(serializedData);

        {{if .Dashboard.GridLayout}}
        let layout = JSON.parse("{{.Dashboard.GridLayout}}");
        if (layout) {
            grid.load(layout,false)
        }
        {{end}}
    }

    // save the current layout.
    // TODO: include the active breakpoint setting so that each breakpoint
    // can have its own layout.
    function saveLayout() {
        let dashData = grid.save(saveContent=false)
        if (dashData) {
            return JSON.stringify(dashData)
        }
        return ""
    }
    function update() {
        grid.update();
    }

</script>


<style>

    .dashboard {
        width: 100%;
        height: 100%;
        overflow: auto;
        display: flex;
        flex-direction: column;
        padding-left: var(--pico-spacing);
        padding-right: var(--pico-spacing);
        /*background-color: var(--pico-background-color);*/
    }
    .grid-stack-item {
    }
    .grid-stack-item-content {

        /*Allow overflow for menu*/
        overflow: unset;

        display:flex;
        flex-direction:column;
        border-radius: var(--pico-card-border-radius);
    }
    /*fix: resize handle should not appear in popup dialog*/
    .ui-resizable-handle {
        z-index:6 !important;
    }

    /*Dashboard tile styles */
    .tile-panel {
        display:flex;
        flex-direction:column;
        height:100%;
        border: var(--pico-card-border);
        border-radius: var(--pico-card-border-radius);
        padding:0;
        margin:0;
        /*z-index:1;*/
    }
    /* remove section header bunch of padding/margin offsets*/
    .tile-header {
        display: flex;
        flex-direction: row;
        font-size: 1.1em;
        min-height: 20px;
        /*header top corner must match the panel radius*/
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
        padding: 6px; /* reduce padding*/
        align-items: center;
        background-color: var(--pico-header-background-color);
        border-bottom: var(--pico-card-border);
    }
    .tile-content{
        flex-grow:1;
        background-color: var(--pico-card-background-color);
        border-bottom-left-radius: 8px;
        border-bottom-right-radius: 8px;
    }
    .tile-content table {
        margin: 0;
        height: 100%;
    }
    .tile-content tr:last-child td:first-child {
        border-bottom-left-radius: var(--pico-card-border-radius);
    }
    .tile-content tr:last-child td:last-child {
        border-bottom-right-radius: var(--pico-card-border-radius);
    }
</style>
<!--end of dashboard-->
{{end}}
