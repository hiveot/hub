<!--After an initial load without data, auto-reload when viewed. -->


{{- /*gotype:github.com/hiveot/hub/bindings/hiveoview/src/views/dashboard.DashboardPageTemplateData*/ -}}
{{if not .Dashboard}}
<div  hx-trigger="intersect once"
        hx-swap="outerHTML"
        hx-get="">
    <p>reloading page fragment...</p>
    <h-loading></h-loading>
</div>

{{else}}


<main class="dashboard container-fluid" >

    <div>
    Dashboard: {{.Dashboard.Title}} :
        <button hx-trigger="click"
                hx-get="{{.RenderNewTilePath}}"
                hx-target="#dashboardDialog"
                hx-swap="innerHTML"
        >New tile</button>

        <button
                hx-trigger="click"
                hx-get="{{.RenderConfirmDeleteDashboardPath}}"
                hx-target="#dashboardDialog"
                hx-swap="innerHTML"
        >Delete Dashboard</button>
    </div>

    {{/* change event: When layout changes push the new layout to the server*/}}
    <div class="grid-stack"
         hx-trigger="change"
         hx-post="{{.SubmitDashboardLayoutPath}}"
         hx-vals='js:{layout: saveLayout()}'
         hx-swap="none"
    >
        {{range .Tiles }}
        <div class="grid-stack-item" gs-id="{{.ID}}"
             gs-size-to-content="false">
            <div class="grid-stack-item-content">
                <header class="tile-header h-row">
                    <span></span>
                    <div>{{.Title}}</div>
                    {{/* <div class="h-grow"></div>*/}}
                    <button slot="button" class="h-icon-button outline"
                            style="border:none"
                            hx-target="#dashboardDialog"
                            hx-get="/tile/{{$.Dashboard.ID}}/{{.ID}}/edit"
                            hx-swap="innerHTML"
                    >
                        <iconify-icon icon="mdi:menu"></iconify-icon>
                    </button>
                </header>
                <div class="tile-content">
                    {{template "RenderTile.gohtml" .}}
                </div>
            </div>
        </div>
        {{end}}

    </div>
</main>
<div id="dashboardDialog"></div>

<script>

    var grid;
    startGridStack();

    function startGridStack() {
        // debugger;
        var options = { // put in gridstack options here
            float: false,
            // handle: ".tile-header" // only allow dragging by the header
            cellHeight: 'initial', // 0, auto
            staticGrid:false,  // allow resize in edit mode
        };
        grid = GridStack.init(options)//.load(serializedData);

        {{if .Dashboard.GridLayout}}
        let layout = JSON.parse("{{.Dashboard.GridLayout}}");
        grid.load(layout)
        {{end}}
    }

    function saveLayout() {
        let dashData = grid.save(saveContent=false)
        let ser = JSON.stringify(dashData)
        // debugger
        return ser
    }


</script>


<style>
    .dashboard {
        width: 100%;
        height: 100%;
        overflow: auto;
        display: flex;
        flex-direction: column;
    }

    .grid-stack {
        /*use the full available space*/
        flex-grow:1;
    }
    .grid-stack-item {
    }
    .grid-stack-item-content {
        /*color: #2c3e50;*/
        /*width: 100%;*/
        /*height: 100%;*/
        /*text-align: center;*/
        display:flex;
        flex-direction:column;
        /*background-color: #18bc9c;*/
        background-color: var(--pico-form-element-background-color);
        border-color: var(--pico-background-color);
        border: var(--pico-background-color) 1px solid;
        border-radius: 5px;
        box-shadow: var(--pico-box-shadow);
    }

    .tile-header {
        background-color: var(--pico-background-color);
        color: var(--pico-color);
        /*background-color: var(--pico-form-element-background-color);*/
        justify-content:space-between;
        font-size: 1.1em;
        min-height: 20px;
        padding: 6px;
        cursor:move;
    }
    .tile-content{
        display:flex;
        flex-grow:1;
        overflow:auto;
        padding:0;
        justify-content:center;
        align-items:center;
        /*background-color: var(--pico-background-color);*/
    }

</style>
<!--end of dashboard-->
{{end}}
