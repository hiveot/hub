// Package mongohs with MongoDB based history mongoClient
// This implements the HistoryStore.proto API
package mongohs

import (
	"context"
	"fmt"

	"github.com/araddon/dateparse"
	"github.com/sirupsen/logrus"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"

	"github.com/hiveot/hub/lib/thing"
)

// getHistory returns the request history from a collection
// if before is used, after must be set as well
func (srv *MongoBucketStore) getHistory(ctx context.Context,
	collection *mongo.Collection,
	thingID string, valueName string, after string, before string, limit int) ([]thing.ThingValue, error) {

	var hist = make([]thing.ThingValue, 0)
	var timeFilter bson.D
	if collection == nil {
		err := fmt.Errorf("parameter error. Collection is nil")
		logrus.Error(err)
		return hist, err
	}

	filter := bson.M{}
	if thingID != "" {
		filter["thingID"] = thingID
	}
	// filter on a time range. Require at least an 'after' time.
	if before != "" && after == "" {
		err := fmt.Errorf("in a time range query before time requires after time to be provided")
		logrus.Warning(err)
		return nil, err
	}
	if after != "" {
		timeAfter, err := dateparse.ParseAny(after)
		if err != nil {
			logrus.Infof("Invalid 'After' time: %s", err)
			return nil, err
		}
		timeAfterBson := primitive.NewDateTimeFromTime(timeAfter)
		if before == "" {
			// not a range, just time after
			timeFilter = bson.D{{"$gte", timeAfterBson}}
		} else {
			// make it a range
			timeBefore, err := dateparse.ParseAny(before)
			if err != nil {
				logrus.Infof("Invalid 'Before' time: %s", err)
				return nil, err
			}
			timeBeforeBson := primitive.NewDateTimeFromTime(timeBefore)
			timeFilter = bson.D{{"$gte", timeAfterBson}, {"$lte", timeBeforeBson}}
		}
		filter[TimeStampField] = timeFilter
	}

	if valueName != "" {
		filter["name"] = valueName
	}
	//if limit > 0 {
	//	filter["limit"] = 0
	//}

	cursor, err := collection.Find(ctx, filter, options.Find().SetLimit(int64(limit)))
	if err != nil {
		logrus.Warning(err)
		return nil, err
	}

	defer cursor.Close(ctx)
	//res := make([]thing.ThingValue,0) &thing.ThingValueList{
	//	Values: actions,
	//}
	for cursor.Next(ctx) {
		histValue := thing.ThingValue{}
		err = cursor.Decode(&histValue)
		hist = append(hist, histValue)
	}
	return hist, err
}
