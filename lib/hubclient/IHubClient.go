package hubclient

import (
	"crypto/tls"
	"github.com/hiveot/hub/lib/thing"
	"time"
)

// predefined event IDs start with '$'
const (
	// EventIDProperties is an event that contains a map of all Thing properties that have changed
	EventIDProperties = "$properties"

	// EventIDTD is the event under which a TD document is sent
	EventIDTD = "$td"
)

// ISubscription interface to underlying subscription mechanism
type ISubscription interface {
	Unsubscribe()
}

// EventMessage for subscribers
type EventMessage struct {
	// ClientID of the device or service publishing the event
	AgentID string `yaml:"agentID"`
	// Optional ThingID of the Thing that generated the event
	ThingID string `yaml:"thingID,omitempty"`
	// Name of the event as defined in the TD document
	Name string `yaml:"name"`
	// Optional event payload as defined in the TD document
	Payload []byte `yaml:"payload,omitempty"`
	// Timestamp the event was created in milliseconds since Epoc
	Timestamp int64 `yaml:"timestamp"`
}

// RequestMessage message for thing or service subscribers
type RequestMessage struct {
	// ClientID of the device or service that handles the action
	AgentID string `yaml:"agentID"`
	// ThingID of the Thing handling the action.
	// For services this is the name of the capability that handles the action.
	ThingID string `yaml:"thingID"`
	// Name of the request method, as defined in the capability TD document as an action
	Name string `yaml:"name"`

	// ClientID of the authenticated client publishing the request
	ClientID string `yaml:"clientID"`
	// Optional action payload as defined in the TD document
	Payload []byte `yaml:"payload,omitempty"`
	// Timestamp the event was created in milliseconds since Epoc
	Timestamp int64 `yaml:"timestamp"`

	// Reply to the received action with optional payload or error
	// This can be called multiple times to send multiple batches.
	SendReply func(payload []byte, err error) error
	// Acknowledge completion of the action
	SendAck func() error
}

// ActionResponse contains the response to an action request
type ActionResponse struct {
	// Publication topic/subject address
	Address string
	// The duration of the request incl reply
	Duration time.Duration
	// The reply was an error reply message
	ErrorReply error
	// A reply or ack was received
	ReceivedReply bool
	// The reply payload on success
	Payload []byte
	// The action request was sent successfully
	SentSuccess bool
}

// ErrorMessage payload
// Embed this in response messages as it will be used to respond with an error
type ErrorMessage struct {
	Error string `json:"error,omitempty"`
}

// IHubClient interface of the golang hub messaging client
type IHubClient interface {

	// ClientID of the current connection
	ClientID() string

	// ConnectWithCert connects to the messaging server using client certificate authentication
	// Support for client cert auth depends on the server setup.
	// The certificate CN must match the clientID
	ConnectWithCert(clientCert tls.Certificate) error

	// ConnectWithToken connects to the messaging server using an authentication token
	// and pub/private keys provided when creating an instance of the hub client.
	ConnectWithToken(token string) error

	// ConnectWithTokenFile loads a priv/pub keys and auth token from file and
	// uses these to connect to the server.
	// This is convenience function intended for use by services and protocol bindings.
	//
	// The keyfile is only needed if no key was provided during instance creation.
	//
	// The keys and token can be generated by the hub cli or launcher.
	ConnectWithTokenFile(tokenFile string, keyFile string) error

	// ConnectWithPassword connects to the messaging server using password authentication
	ConnectWithPassword(password string) error

	// LoadCreateKey loads or creates a public/private key pair for the client.
	// If the key cannot be loaded a new key is created and written to the key file.
	//
	// If no keyfile is given then store the key in a file named {clientID}.key
	// The default location is {home}/certs/{clientID}.key.
	//
	// The key can be used with ConnectToHub and ConnectWithTokenFile()
	//
	// This returns the created key, its public key string or an error.
	// The key format depends on the hub used.
	LoadCreateKey(keyFile string) (key interface{}, pubKey string, err error)

	// Disconnect from the hub server
	Disconnect()

	// ParseResponse parses response message
	// This is a convenience function
	ParseResponse(data []byte, resp interface{}) error

	// Pub allows publication on any topic.
	// Intended for testing or for publishing to special topics.
	Pub(topic string, payload []byte) error

	// PubAction publishes a request for action from a Thing.
	//
	//	agentID of the device or service that handles the action.
	//	thingID is the destination thingID to whom the action applies.
	//  name is the name of the action as described in the Thing's TD
	//  payload is the optional payload of the action as described in the Thing's TD
	// This returns an ActionResponse object or an error if no reply was received
	PubAction(agentID string, thingID string, name string, payload []byte) (ActionResponse, error)

	// PubConfig publishes a Thing configuration change request
	//
	// The client's ID is used as the publisher ID of the action.
	//
	//	agentID of the device that handles the action for the thing or service capability
	//	thingID is the destination thingID that handles the action
	//  propName is the ID of the property to change as described in the TD properties section
	//  payload is the optional payload of the action as described in the Thing's TD
	// This returns an ActionResponse object or an error if no reply was received
	PubConfig(agentID string, thingID string, propName string, payload []byte) (ActionResponse, error)

	// PubEvent publishes a Thing event. The payload is an event value as per TD document.
	// Intended for devices and services to notify of changes to the Things they are the agent for.
	//
	// 'thingID' is the ID of the 'thing' whose event to publish. This is the ID under which the
	// TD document is published that describes the thing. It can be the ID of the sensor, actuator
	// or service.
	//
	// This will use the client's ID as the agentID of the event.
	// eventName is the ID of the event described in the TD document 'events' section,
	// or one of the predefined events listed above as EventIDXyz
	//
	//  thingID of the Thing whose event is published
	//  eventName is one of the predefined events as described in the Thing TD
	//  value is the serialized event value, or nil if the event has no value
	PubEvent(thingID string, eventName string, value []byte) (err error)

	// PubRPCRequest publishes a RPC request to a service and waits for a response.
	// Intended for users and services to invoke RPC to services.
	//
	// Authorization to use the service capability can depend on the user's role. Check the service
	// documentation for details. When unauthorized then an error will be returned after a short delay.
	//
	// The client's ID is used as the senderID of the rpc request.
	//
	//	agentID of the service that handles the request
	//	capability is the capability to invoke
	//  methodName is the name of the request method to invoke
	//  req is the request message that will be marshalled
	//	resp is the expected response message that is unmarshalled
	// This returns the underlying ActionResponse object or an error if no reply was received
	PubRPCRequest(agentID string, capability string, methodName string,
		req interface{}, resp interface{}) (ActionResponse, error)

	// PubTD publishes an event with a Thing TD document.
	// The client's authentication ID will be used as the agentID of the event.
	PubTD(td *thing.TD) error

	// Sub allows subscribing to any topic/subject address that the client is authorized to.
	// Intended for testing or special topics.
	// Note that the addr format depends on the messaging core used so only use this if
	// the core is known.
	Sub(addr string, cb func(addr string, data []byte)) (ISubscription, error)

	// SubActions subscribes to actions requested of this client's Things.
	// Intended for use by devices or services to receive requests for its things.
	//
	// The handler receives an action request message with request payload and returns
	// an optional reply or an error when the request wasn't accepted.
	//
	// The supported actions are defined in the TD document of the things this binding has published.
	//  thingID is the device thing or service capability to subscribe to, or "" for wildcard
	//  cb is the callback to invoke
	//
	// The handler receives an action request message with request payload and
	// must reply with with msg.Reply or msg.Ack, or return an error
	SubActions(thingID string, handler func(msg *RequestMessage) error) (ISubscription, error)

	// SubConfig subscribes to configuration change requested of this client's Things.
	// Intended for use by devices to receive configuration requests for its things.
	// The device's agentID is the ID used to authenticate with the server, eg, this clientID.
	//
	// The handler receives an action request message with request payload and returns
	// an optional reply or an error when the request wasn't accepted.
	//
	// The supported properties are defined in the TD document of the things this binding has published.
	//  thingID is the device thing or service capability to subscribe to, or "" for wildcard
	//  cb is the callback to invoke
	//
	// The handler receives an action request message with request payload and
	// must reply with with msg.Reply or msg.Ack, or return an error
	SubConfig(thingID string,
		handler func(msg *RequestMessage) error) (ISubscription, error)

	// SubEvents subscribes to events from a device or service.
	// Intended for clients that wish to receive (semi)realtime updates of
	// changes to Things.
	//
	//	agentID is the ID of the device or service publishing the event, or "" for any agent.
	//	thingID is the ID of the Thing whose events to receive, or "" for any Things.
	//  eventName is the name of the event, or "" for any event
	// The handler receives an event message with payload.
	SubEvents(agentID string, thingID string, eventName string,
		handler func(msg *EventMessage)) (ISubscription, error)

	// SubRPCRequest subscribes a client to receive RPC capability method request.
	// Intended for use by services to receive requests for its capabilities.
	//
	// The capabilityID identifies the interface that is supported. Each
	// capability represents one or more methods that are identified by the
	// actionName.
	//
	// The handler must reply with msg.Reply or msg.Ack, or return an error.
	SubRPCRequest(capabilityID string,
		handler func(msg *RequestMessage) error) (ISubscription, error)

	// SubStream subscribes to events from things - in development
	//
	// The events stream is backed by a store that retains messages for a limited duration.
	// This is a JetStream stream in NATS.
	//
	// ReceiveLatest is handy to be up to date on all event instead of quering them separately. Only use this if
	// you're going to retrieve them anyways.
	//
	//  name is the stream to subscribe to or "" for the default events stream
	//	receiveLatest to immediately receive the latest event for each event instance
	//SubStream(name string, receiveLatest bool, cb func(msg *EventMessage)) (ISubscription, error)
}
