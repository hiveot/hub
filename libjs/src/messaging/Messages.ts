import {nanoid} from "nanoid";

// hiveot message trinity to rule them all
export const MessageTypeNotification = "notification"
export const MessageTypeRequest = "request"
export const MessageTypeResponse = "response"


// request status
// this aligns with action status values from WoT spec
// The request has not yet been delivered
export const StatusPending = "pending"

// The request is being processed
export const StatusRunning = "running"

// The request processing was completed
export const StatusCompleted = "completed"

// The request processing or delivery failed
export const StatusFailed = "failed"


// NotificationMessage serves to notify a single client of an event or property change
// if operation is invokeaction then this means the action is running.
// if operation is writeproperty then this means the write is running.
export class NotificationMessage extends Object {
    public constructor(op:string, thingID:string,name:string,data:any,
                       err?:string, correlationID?:string) {
        super()
        this.operation = op
        this.thingID = thingID
        this.messageType = MessageTypeNotification
        this.name = name
        this.data = data
        this.error = err
        this.correlationID = correlationID
        this.messageID = nanoid()
    }

    // CorrelationID of the message. Provided by the request and must be included
    // in the response.
    // This is required. If omitted, the response will be ignored.
    public correlationID?:string

    // Data containing the notification data as described in the TD event or property dataschema.
    // If the operation is one of the Thing level operations, the output is specified
    // by the operation's dataschema. WoT doesn't have this yet so hiveot will
    // define the missing bits if any. (see documentation)
    public data?: any

    // error contains the short error description when status is failed.
    public error?: string

    // MessageID unique ID of the message. Intended to detect duplicates.
    // Generated by the protocol binding.
    public messageID: string

    // MessageType identifies this message payload as a request
    // Intended to identify this message envelope.
    public messageType: string

    // Name of the action or property affordance this is a response from.
    // This field is optional and intended to help debugging and logging.
    public name?: string

    // Operation of the request this is the response to.
    // This is required.
    public operation: string

    // SenderID is the account ID of the agent sending the notification.
    // The protocol server MUST set this to the authenticated agent.
    public senderID: string = ""

    // ThingID of the thing this is a response from.
    // For responses passed to consumers this is the digitwin dThingID
    // For responses sent by agents this is the agent ThingID
    // This field is optional and intended to help debugging and logging.
    public thingID?: string

    // Timestamp the response was created
    public timestamp?: string
}

// RequestMessage for sending a request for an operation on a Thing or service.
// Agents/Things MUST send a response when a request is received and a correlationID
// is included.
//
// The following operations are considered to be requests:
//
//   - invokeaction  [WoT]
//   - subscribe, unsubscribe [WoT]   (handled by protocol bindings)
//   - observe, unobserve [WoT]       (handled by protocol bindings)
//   - readproperty, readallproperties [WoT]
//   - queryaction, queryallactions [WoT]
//   - readevent, readallevents  (of a Thing)  [HiveOT extension]
//   - readtd, readalltds  (of a directory or thing) [HiveOT extension]
export class RequestMessage extends Object {
    //
    public constructor(init?:Partial<RequestMessage>) {
        super();
        this.messageID = nanoid()
        this.messageType = MessageTypeRequest
        this.operation = ""
        Object.assign(this, init)
    }

    // correlationID of the message. Uniquely identifies the request and must
    // be included in the response.
    // Notifications can include this to correlate with the subscription.
    // Message streams can include this to correlate with the original request.
    // This is optional. If omitted, no response will be received.
    public correlationID?: string

    // Created holds the timestamp the request was created using RFC3339milli
    // This MUST be set by the protocol server if not provided.
    public created?: string

    // Input for the request as described in the TD affordance dataschema.
    // If the operation is one of the Thing level operations, the input is specified
    // by the operation's dataschema. WoT doesn't have this yet so hiveot will
    // define the missing bits if any.
    public input?: any

    // MessageID unique ID of the message. Intended to detect duplicates.
    // Generated by the protocol binding.
    public messageID: string

    // MessageType identifies this message payload as a request
    // Intended to identify this message envelope.
    public messageType: string

    // Name of the event, action or property affordance the request is for.
    // This field is optional and only required for specific operations.
    public name: string = ""

    // Message operation. Eg: WotOpInvokeAction, WotOpPublishEvent, ...
    // This is required.
    public operation: string

    // SenderID is the account ID of the client sending the request.
    // The protocol server MUST set this to the authenticated client.
    public senderID?: string

    // ThingID of the thing this request is for.
    // For messages from consumers this is the digitwin dThingID
    // For messages to agents this is the agent ThingID
    // This field is required.
    public thingID: string = ""

    // return a notification with a running status of this request
    // @param output is the optional progress output.
    public createNotification(output?: any): NotificationMessage {
        let notif = new NotificationMessage(
            this.operation, this.thingID, this.name, output, undefined, this.correlationID)
        return notif
    }
    // return a response for the request and optionall an error
    // if err is provided then output is either undefined or contains error details.
    public createResponse(output: any, err?: Error): ResponseMessage {
        let resp = new ResponseMessage(
            this.operation, this.thingID, this.name, output, err?.message, this.correlationID)
        return resp
    }
}

// ResponseMessage serves to notify a single client of the result of a request.
// The operation of the response MUST be that of the request.
export class ResponseMessage extends Object {
    public constructor(op:string, thingID:string,name:string,output:any,
                       err?:string, correlationID?:string) {
        super()
        this.operation = op
        this.thingID = thingID
        this.messageType = MessageTypeResponse
        this.name = name
        this.output = output
        this.error = err
        this.correlationID = correlationID
        this.messageID = nanoid()
    }

    // CorrelationID of the message. Provided by the request and must be included
    // in the response.
    // This is required. If omitted, the response will be ignored.
    public correlationID?:string

    // error contains the short error description when status is failed.
    public error?: string

    // MessageID unique ID of the message. Intended to detect duplicates.
    // Generated by the protocol binding.
    public messageID: string

    // MessageType identifies this message payload as a request
    // Intended to identify this message envelope.
    public messageType: string

    // Name of the action or property affordance this is a response from.
    // This field is optional and intended to help debugging and logging.
    public name?: string

    // Operation of the request this is the response to.
    // This is required.
    public operation: string

    // Output for the request as described in the TD affordance dataschema.
    // If the operation is one of the Thing level operations, the output is specified
    // by the operation's dataschema. WoT doesn't have this yet so hiveot will
    // define the missing bits if any. (see documentation)
    public output?: any

    // SenderID is the account ID of the agent sending the response.
    // The protocol server MUST set this to the authenticated client.
    public senderID: string = ""

    // ThingID of the thing this is a response from.
    // For responses passed to consumers this is the digitwin dThingID
    // For responses sent by agents this is the agent ThingID
    // This field is optional and intended to help debugging and logging.
    public thingID?: string


    // Timestamp the response was created
    public timestamp?: string
}
