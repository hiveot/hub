import { OpInvokeAction } from "../api/vocab/vocab.js";
import {nanoid} from "nanoid";

// hiveot message trinity to rule them all
export const MessageTypeNotification = "notification"
export const MessageTypeRequest = "request"
export const MessageTypeResponse = "response"


// request status
// this aligns with action status values from WoT spec
// The request has not yet been delivered
export const StatusPending = "pending"

// The request is being processed
export const StatusRunning = "running"

// The request processing was completed
export const StatusCompleted = "completed"

// The request processing or delivery failed
export const StatusFailed = "failed"


export class ActionStatus  {
    public actionID?: string
    public error?: ErrorValue
    public input?: any
    public output?: any
    public name?:string
    public senderID?:string
    public state?: string 
    public thingID?:string
    public timeRequested?:string
    public timeUpdated?:string

    public constructor(init?:Partial<ActionStatus>) {
        Object.assign(this, init)
    }
}

export class ErrorValue  {
    // Status is the HTTP status code of the error
    public status: number = 400
    // Type is a short string identifying the error type
    public type: string = "Bad Request"
    // Title is a short, human-readable summary of the problem.
    public title?: string
    // Detail is a human-readable explanation specific to this occurrence of the problem.
    public detail?: string

    public constructor(init?:Partial<ErrorValue>) {
        Object.assign(this, init)
    }
}   

// NotificationMessage serves to notify a single client of an event or property change
// if operation is invokeaction then this means the action is running.
// if operation is writeproperty then this means the write is running.
export class NotificationMessage extends Object {
    public constructor(op:string, thingID:string, name:string, value:any,
                       err?:Error, correlationID?:string) {
        super()
        this.operation = op
        this.thingID = thingID
        this.messageType = MessageTypeNotification
        this.name = name
        this.value = value
        this.correlationID = correlationID
        this.messageID = nanoid()
        if (err) {
            // this.error = new ErrorValue({
            //     status: 500, // Internal Server Error
            //     type: "Error",
            //     title: err.name + ": " + err.message,
            //     detail: err.cause?.toString(),
            // })
            this.error = new ErrorValue({
                status: 500, // Internal Server Error
                type: "Error",
                title: err.name + ": " + err.message,
                detail: err.cause?.toString(),
            })
        }
    }

    // CorrelationID of the message. Provided by the request and must be included
    // in the response.
    // This is required. If omitted, the response will be ignored.
    public correlationID?:string

    // error contains the short error description when status is failed.
    public error?:ErrorValue

    // MessageID unique ID of the message. Intended to detect duplicates.
    // Generated by the protocol binding.
    public messageID: string

    // MessageType identifies this message payload as a request
    // Intended to identify this message envelope.
    public messageType: string

    // Name of the action or property affordance this is a response from.
    // This field is optional and intended to help debugging and logging.
    public name?: string

    // Operation of the request this is the response to.
    // This is required.
    public operation: string

    // SenderID is the account ID of the agent sending the notification.
    // The protocol server MUST set this to the authenticated agent.
    public senderID: string = ""

    // ThingID of the thing this is a response from.
    // For responses passed to consumers this is the digitwin dThingID
    // For responses sent by agents this is the agent ThingID
    // This field is optional and intended to help debugging and logging.
    public thingID?: string

    // Timestamp the response was created
    public timestamp?: string

    // Value of the notification as described in the TD event or property dataschema.
    // If the operation is one of the Thing level operations, the data is specified
    // by the operation's dataschema. WoT doesn't have this yet so hiveot will
    // define the missing bits if any. (see documentation)
    public value?: any
}

// RequestMessage for sending a request for an operation on a Thing or service.
// Agents/Things MUST send a response when a request is received and a correlationID
// is included.
//
// The following operations are considered to be requests:
//
//   - invokeaction  [WoT]
//   - subscribe, unsubscribe [WoT]   (handled by protocol bindings)
//   - observe, unobserve [WoT]       (handled by protocol bindings)
//   - readproperty, readallproperties [WoT]
//   - queryaction, queryallactions [WoT]
//   - readevent, readallevents  (of a Thing)  [HiveOT extension]
//   - readtd, readalltds  (of a directory or thing) [HiveOT extension]
export class RequestMessage extends Object {
    //
    public constructor(init?:Partial<RequestMessage>) {
        super();
        this.messageID = nanoid()
        this.messageType = MessageTypeRequest
        this.operation = ""
        Object.assign(this, init)
    }

    // correlationID of the message. Uniquely identifies the request and must
    // be included in the response.
    // Notifications can include this to correlate with the subscription.
    // Message streams can include this to correlate with the original request.
    // This is optional. If omitted, no response will be received.
    public correlationID?: string

    // Created holds the timestamp the request was created in utc
    // This MUST be set by the protocol server if not provided.
    public created?: string

    // Input for the request as described in the TD affordance dataschema.
    // If the operation is one of the Thing level operations, the input is specified
    // by the operation's dataschema. WoT doesn't have this yet so hiveot will
    // define the missing bits if any.
    public input?: any

    // MessageID unique ID of the message. Intended to detect duplicates.
    // Generated by the protocol binding.
    public messageID: string

    // MessageType identifies this message payload as a request
    // Intended to identify this message envelope.
    public messageType: string

    // Name of the event, action or property affordance the request is for.
    // This field is optional and only required for specific operations.
    public name: string = ""

    // Message operation. Eg: WotOpInvokeAction, WotOpPublishEvent, ...
    // This is required.
    public operation: string

    // SenderID is the account ID of the client sending the request.
    // The protocol server MUST set this to the authenticated client.
    public senderID?: string

    // ThingID of the thing this request is for.
    // For messages from consumers this is the digitwin dThingID
    // For messages to agents this is the agent ThingID
    // This field is required.
    public thingID: string = ""

    // return a notification with a running status of this request
    // @param data is the optional progress data.
    public createNotification(data?: any): NotificationMessage {
        let notif = new NotificationMessage(
            this.operation, this.thingID, this.name, data, undefined, this.correlationID)
        return notif
    }
    
    // return an action response for this request and optionally an error
    // if err is provided then value is either undefined or contains error details.
    public createActionResponse(output: any, err?: Error): ResponseMessage {
        let errMsg = err ? err.name : undefined
        let actionID = ""
        let actionStatus = new ActionStatus({
            actionID:actionID,
            name:this.name,
            output:output,
            thingID:this.thingID, 
            senderID: this.senderID,
            state: err ? StatusFailed : StatusCompleted,
            timeRequested: new Date().toISOString(),
            timeUpdated: new Date().toISOString(),
        })
        if (err) {
            actionStatus.error = new ErrorValue({
                status: 400, // Bad Request
                type: "Bad Request",
                title: err.name + ": "+ err.message,
                detail: err.cause?.toString(),
            })
        }

        let resp = new ResponseMessage(
            this.operation, this.thingID, this.name, actionStatus, err, this.correlationID)
        return resp
    }
    
    // return an action value response for the request and optionally an error
    // if err is provided then value is either undefined or contains error details.
    public createResponse(value: any, err?: Error): ResponseMessage {
        if (this.operation == OpInvokeAction) {
            let resp = this.createActionResponse(value, err)
            return resp
        } else {
            let resp = new ResponseMessage(
                this.operation, this.thingID, this.name, value, err, this.correlationID)
            return resp
        }
    }

    
}

// ResponseMessage serves to notify a single client of the result of a request.
// The operation of the response MUST be that of the request.
export class ResponseMessage extends Object {
    public constructor(op:string, thingID:string, name:string, value:any,
                       err?:Error, correlationID?:string) {
        super()
        this.operation = op
        this.thingID = thingID
        this.messageType = MessageTypeResponse
        this.name = name
        this.value = value
        this.correlationID = correlationID
        this.messageID = nanoid()
        if (err) {
            this.error = new ErrorValue({
                status: 400, // Bad Request
                type: "Bad Request",
                title: err.name + ": "+ err.message,
                detail: err.cause?.toString(),
            })
        }
    }

    // CorrelationID of the message. Provided by the request and must be included
    // in the response.
    // This is required. If omitted, the response will be ignored.
    public correlationID?:string

    // error contains the short error description when status is failed.
    public error?: ErrorValue

    // MessageID unique ID of the message. Intended to detect duplicates.
    // Generated by the protocol binding.
    public messageID: string

    // MessageType identifies this message payload as a request
    // Intended to identify this message envelope.
    public messageType: string

    // Name of the action or property affordance this is a response from.
    public name: string

    // Operation of the request this is the response to.
    // This is required.
    public operation: string

    // SenderID is the account ID of the agent sending the response.
    //
    // This is a non-WOT feature of the HiveOT Hub.
    // The Hub protocol server MUST set this to the authenticated client.
    public senderID: string = ""

    // ThingID of the thing this is a response from.
    // For responses passed to consumers this is the digitwin dThingID
    // For responses sent by agents this is the agent ThingID
    // This field is optional and intended to help debugging and logging.
    public thingID?: string

    // Timestamp the response was created
    public timestamp?: string

    // Value of the response as described in the TD affordance dataschema.
    // If the operation is one of the Thing level operations, the value is specified
    // by the operation's dataschema.
    public value?: any

}
