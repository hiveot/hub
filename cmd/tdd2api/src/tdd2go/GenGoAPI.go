package tdd2go

import (
	"fmt"
	"github.com/hiveot/hub/lib/things"
	"github.com/hiveot/hub/lib/utils"
	"os"
	"path"
	"time"
)

// GenGoAPIFromTD generates a golang source file from a Thing Description Document of a service.
// Intended for services.
//
// TODO: use TD forms, if defined, to link to a protocol.
// Currently this uses a provided message transport that implements the transportation protocol
// to talk to the Hub. All actions are invoked through this transport.
//
// This generates:
// * constant {AgentID}{ThingID}AgentID  containing the agentID, if known
// * constant {AgentID}{ThingID}ThingID  containing the thingID
// * Define types used in actions
// * Define a client function for each action
// * Define a service interface for handling an action
// * Define a message handler for invoking the service and returning a response
func GenGoAPIFromTD(td *things.TD, outFile string) (err error) {

	dThingID := td.ID
	agentID, serviceID := things.SplitDigiTwinThingID(dThingID)
	//agentTitle := ToTitle(agentID)
	serviceTitle := ToTitle(serviceID)
	//agentServiceTitle := agentTitle + serviceTitle

	if agentID == "" {
		return fmt.Errorf("TD thingID does not have an agent prefix")
	}

	l := &utils.L{}
	l.Add("// Package %s with types and interfaces for using this service with agent '%s'",
		agentID, agentID)
	l.Add("// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.")
	l.Add("// Generated %s. ", time.Now().Format(time.RFC822))
	l.Add("package %s", agentID)

	l.Add("")
	l.Add("import \"encoding/json\"")
	l.Add("import \"errors\"")
	l.Add("import \"github.com/hiveot/hub/lib/things\"")
	l.Add("import \"github.com/hiveot/hub/lib/hubclient\"")
	l.Add("")
	l.Add("// %sAgentID is the connection ID of the agent managing the Thing.", serviceTitle)
	l.Add("const %sAgentID = \"%s\"", serviceTitle, agentID)
	l.Add("// %sServiceID is the internal thingID of the device/service as used by agents.", serviceTitle)
	l.Add("// Agents use this to publish events and subscribe to actions")
	l.Add("const %sServiceID = \"%s\"", serviceTitle, serviceID)
	l.Add("// %sDThingID is the Digitwin thingID as used by agents. Digitwin adds the dtw:{agent} prefix to the serviceID", serviceTitle)
	l.Add("// Consumers use this to publish actions and subscribe to events")
	l.Add("const %sDThingID = \"%s\"", serviceTitle, dThingID)
	l.Add("")
	GenSchemaDefinitions(l, serviceTitle, td)
	GenActionStructs(l, serviceTitle, td)
	GenServiceClient(l, serviceTitle, td)
	GenServiceInterface(l, serviceTitle, td)
	GenServiceHandler(l, serviceTitle, td)

	if l.Size() > 0 {
		outDir := path.Dir(outFile)
		_ = os.MkdirAll(outDir, 0755)
		err = l.Write(outFile)
	}
	return err
}
