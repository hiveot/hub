package td2go

import (
	"encoding/json"
	"fmt"
	"github.com/hiveot/hub/lib/utils"
	"github.com/hiveot/hub/wot/td"
	"os"
	"path"
	"time"
)

// GenGoAPIFromTD generates a golang source file from a Thing Description Document of a service.
// Intended for services.
//
// TODO: use TD forms, if defined, to link to a protocol.
// Currently this uses a provided message transport that implements the transportation protocol
// to talk to the Hub. All actions are invoked through this transport.
//
// This generates:
// * constant {AgentID}{ThingID}AgentID  containing the agentID, if known
// * constant {AgentID}{ThingID}ThingID  containing the thingID
// * Define types used in actions
// * Define a client function for each action
// * Define a service interface for handling an action
// * Define a message handler for invoking the service and returning a response
func GenGoAPIFromTD(td1 *td.TD, outFile string) (err error) {

	dThingID := td1.ID
	agentID, serviceID := td.SplitDigiTwinThingID(dThingID)
	// the title-ID is the title-case identifier of the thing ID
	thingTitleID := ToTitle(serviceID)

	if agentID == "" {
		return fmt.Errorf("TD thingID does not have an agent prefix")
	}

	l := &utils.SL{}
	l.Add("// Package %s with types and interfaces for using this service with agent '%s'",
		agentID, agentID)
	l.Add("// DO NOT EDIT. This file is auto generated by tdd2api. Any changes will be overwritten.")
	l.Add("// Generated %s. ", time.Now().Format(time.RFC822))
	l.Add("package %s", agentID)

	l.Add("")
	l.Add("import \"errors\"")
	l.Add("import \"github.com/hiveot/hub/transports/tputils\"")
	l.Add("import \"github.com/hiveot/hub/transports\"")
	l.Add("")
	GenThingConstantsFromTD(l, thingTitleID, td1)
	GenSchemaDefinitions(l, thingTitleID, td1)
	GenActionStructs(l, thingTitleID, td1)
	GenServiceClient(l, thingTitleID, td1)
	GenServiceInterface(l, thingTitleID, td1)
	GenServiceHandler(l, thingTitleID, td1)
	// last, append the TD in json for publication
	// yeah ugly. Revert the thingID to that of the service as seen by the agent
	// this is needed to be able to publish the TD
	td1.ID = serviceID
	tdDoc, _ := json.Marshal(td1)
	l.Add("")
	l.Add("// %sTD contains the raw TD of this service for publication to the Hub", thingTitleID)
	l.Add("const %sTD = `%s`", thingTitleID, tdDoc)

	if l.Size() > 0 {
		outDir := path.Dir(outFile)
		_ = os.MkdirAll(outDir, 0755)
		err = l.Write(outFile)
	}
	return err
}
